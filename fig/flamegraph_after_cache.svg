<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="565.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="21308"><g><title>SDLTimer (5 samples, 0.02%)</title><rect x="0.0000%" y="517" width="0.0235%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="527.50"></text></g><g><title>__clone3 (5 samples, 0.02%)</title><rect x="0.0000%" y="501" width="0.0235%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="511.50"></text></g><g><title>start_thread (5 samples, 0.02%)</title><rect x="0.0000%" y="485" width="0.0235%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="5"/><text x="0.2500%" y="495.50"></text></g><g><title>RunThread (5 samples, 0.02%)</title><rect x="0.0000%" y="469" width="0.0235%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="5"/><text x="0.2500%" y="479.50"></text></g><g><title>SDL_RunThread (5 samples, 0.02%)</title><rect x="0.0000%" y="453" width="0.0235%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="5"/><text x="0.2500%" y="463.50"></text></g><g><title>SDL_TimerThread (5 samples, 0.02%)</title><rect x="0.0000%" y="437" width="0.0235%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="5"/><text x="0.2500%" y="447.50"></text></g><g><title>SDL_SemWaitTimeout_REAL (5 samples, 0.02%)</title><rect x="0.0000%" y="421" width="0.0235%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="5"/><text x="0.2500%" y="431.50"></text></g><g><title>__new_sem_wait_slow64.constprop.0 (5 samples, 0.02%)</title><rect x="0.0000%" y="405" width="0.0235%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="5"/><text x="0.2500%" y="415.50"></text></g><g><title>__futex_abstimed_wait_common (5 samples, 0.02%)</title><rect x="0.0000%" y="389" width="0.0235%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="5"/><text x="0.2500%" y="399.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="0.0282%" y="485" width="0.0141%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="3"/><text x="0.2782%" y="495.50"></text></g><g><title>_int_free_create_chunk (3 samples, 0.01%)</title><rect x="0.1596%" y="485" width="0.0141%" height="15" fill="rgb(250,228,42)" fg:x="34" fg:w="3"/><text x="0.4096%" y="495.50"></text></g><g><title>default_bindings.isra.0 (5 samples, 0.02%)</title><rect x="0.2675%" y="485" width="0.0235%" height="15" fill="rgb(240,193,28)" fg:x="57" fg:w="5"/><text x="0.5175%" y="495.50"></text></g><g><title>[[heap]] (98 samples, 0.46%)</title><rect x="0.0282%" y="501" width="0.4599%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="98"/><text x="0.2782%" y="511.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as alloc::collections::vec_deque::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (12 samples, 0.06%)</title><rect x="0.4881%" y="485" width="0.0563%" height="15" fill="rgb(206,188,39)" fg:x="104" fg:w="12"/><text x="0.7381%" y="495.50"></text></g><g><title>&lt;gb_rs::graphics::BgFIFO as gb_rs::graphics::FIFO&gt;::pop (83 samples, 0.39%)</title><rect x="0.5444%" y="485" width="0.3895%" height="15" fill="rgb(217,207,13)" fg:x="116" fg:w="83"/><text x="0.7944%" y="495.50"></text></g><g><title>&lt;gb_rs::graphics::ObjFIFO as gb_rs::graphics::FIFO&gt;::next_line (4 samples, 0.02%)</title><rect x="0.9339%" y="485" width="0.0188%" height="15" fill="rgb(231,73,38)" fg:x="199" fg:w="4"/><text x="1.1839%" y="495.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (30 samples, 0.14%)</title><rect x="0.9574%" y="485" width="0.1408%" height="15" fill="rgb(225,20,46)" fg:x="204" fg:w="30"/><text x="1.2074%" y="495.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (29 samples, 0.14%)</title><rect x="0.9621%" y="469" width="0.1361%" height="15" fill="rgb(210,31,41)" fg:x="205" fg:w="29"/><text x="1.2121%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (29 samples, 0.14%)</title><rect x="0.9621%" y="453" width="0.1361%" height="15" fill="rgb(221,200,47)" fg:x="205" fg:w="29"/><text x="1.2121%" y="463.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.01%)</title><rect x="1.1545%" y="485" width="0.0141%" height="15" fill="rgb(226,26,5)" fg:x="246" fg:w="3"/><text x="1.4045%" y="495.50"></text></g><g><title>__vdso_clock_gettime (68 samples, 0.32%)</title><rect x="1.1686%" y="485" width="0.3191%" height="15" fill="rgb(249,33,26)" fg:x="249" fg:w="68"/><text x="1.4186%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (36 samples, 0.17%)</title><rect x="1.5018%" y="485" width="0.1690%" height="15" fill="rgb(235,183,28)" fg:x="320" fg:w="36"/><text x="1.7518%" y="495.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (10 samples, 0.05%)</title><rect x="1.6238%" y="469" width="0.0469%" height="15" fill="rgb(221,5,38)" fg:x="346" fg:w="10"/><text x="1.8738%" y="479.50"></text></g><g><title>&lt;gb_rs::graphics::TilePos as core::hash::Hash&gt;::hash (10 samples, 0.05%)</title><rect x="1.6238%" y="453" width="0.0469%" height="15" fill="rgb(247,18,42)" fg:x="346" fg:w="10"/><text x="1.8738%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (10 samples, 0.05%)</title><rect x="1.6238%" y="437" width="0.0469%" height="15" fill="rgb(241,131,45)" fg:x="346" fg:w="10"/><text x="1.8738%" y="447.50"></text></g><g><title>core::hash::Hasher::write_usize (10 samples, 0.05%)</title><rect x="1.6238%" y="421" width="0.0469%" height="15" fill="rgb(249,31,29)" fg:x="346" fg:w="10"/><text x="1.8738%" y="431.50"></text></g><g><title>gb_rs::clock::Clock::tick (5 samples, 0.02%)</title><rect x="1.6848%" y="485" width="0.0235%" height="15" fill="rgb(225,111,53)" fg:x="359" fg:w="5"/><text x="1.9348%" y="495.50"></text></g><g><title>gb_rs::cpu::CPU::display_registers (108 samples, 0.51%)</title><rect x="1.7083%" y="485" width="0.5069%" height="15" fill="rgb(238,160,17)" fg:x="364" fg:w="108"/><text x="1.9583%" y="495.50"></text></g><g><title>gb_rs::cpu::CPU::execute (253 samples, 1.19%)</title><rect x="2.2151%" y="485" width="1.1873%" height="15" fill="rgb(214,148,48)" fg:x="472" fg:w="253"/><text x="2.4651%" y="495.50"></text></g><g><title>gb_rs::cpu::CPU::handle_interrupts (149 samples, 0.70%)</title><rect x="3.4025%" y="485" width="0.6993%" height="15" fill="rgb(232,36,49)" fg:x="725" fg:w="149"/><text x="3.6525%" y="495.50"></text></g><g><title>gb_rs::memory::Memory::read_byte (149 samples, 0.70%)</title><rect x="3.4025%" y="469" width="0.6993%" height="15" fill="rgb(209,103,24)" fg:x="725" fg:w="149"/><text x="3.6525%" y="479.50"></text></g><g><title>gb_rs::cpu::SizedInstruction::decode (131 samples, 0.61%)</title><rect x="4.1017%" y="485" width="0.6148%" height="15" fill="rgb(229,88,8)" fg:x="874" fg:w="131"/><text x="4.3517%" y="495.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (7 samples, 0.03%)</title><rect x="5.4768%" y="469" width="0.0329%" height="15" fill="rgb(213,181,19)" fg:x="1167" fg:w="7"/><text x="5.7268%" y="479.50"></text></g><g><title>gb_rs::graphics::BgFIFO::fetch (171 samples, 0.80%)</title><rect x="4.7259%" y="485" width="0.8025%" height="15" fill="rgb(254,191,54)" fg:x="1007" fg:w="171"/><text x="4.9759%" y="495.50"></text></g><g><title>gb_rs::graphics::Graphics::render (147 samples, 0.69%)</title><rect x="5.5284%" y="485" width="0.6899%" height="15" fill="rgb(241,83,37)" fg:x="1178" fg:w="147"/><text x="5.7784%" y="495.50"></text></g><g><title>gb_rs::graphics::Graphics::draw_scanline (69 samples, 0.32%)</title><rect x="5.8945%" y="469" width="0.3238%" height="15" fill="rgb(233,36,39)" fg:x="1256" fg:w="69"/><text x="6.1445%" y="479.50"></text></g><g><title>gb_rs::joypad::Joypad::update (90 samples, 0.42%)</title><rect x="6.2230%" y="485" width="0.4224%" height="15" fill="rgb(226,3,54)" fg:x="1326" fg:w="90"/><text x="6.4730%" y="495.50"></text></g><g><title>gb_rs::memory::Memory::write_byte (7 samples, 0.03%)</title><rect x="6.6454%" y="485" width="0.0329%" height="15" fill="rgb(245,192,40)" fg:x="1416" fg:w="7"/><text x="6.8954%" y="495.50"></text></g><g><title>glXSwapBuffers (6 samples, 0.03%)</title><rect x="6.6782%" y="485" width="0.0282%" height="15" fill="rgb(238,167,29)" fg:x="1423" fg:w="6"/><text x="6.9282%" y="495.50"></text></g><g><title>std::sys::unix::time::Timespec::now (54 samples, 0.25%)</title><rect x="6.7439%" y="485" width="0.2534%" height="15" fill="rgb(232,182,51)" fg:x="1437" fg:w="54"/><text x="6.9939%" y="495.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (3 samples, 0.01%)</title><rect x="7.2414%" y="469" width="0.0141%" height="15" fill="rgb(231,60,39)" fg:x="1543" fg:w="3"/><text x="7.4914%" y="479.50"></text></g><g><title>std::time::Instant::duration_since (3 samples, 0.01%)</title><rect x="7.2414%" y="453" width="0.0141%" height="15" fill="rgb(208,69,12)" fg:x="1543" fg:w="3"/><text x="7.4914%" y="463.50"></text></g><g><title>std::time::Instant::checked_duration_since (3 samples, 0.01%)</title><rect x="7.2414%" y="437" width="0.0141%" height="15" fill="rgb(235,93,37)" fg:x="1543" fg:w="3"/><text x="7.4914%" y="447.50"></text></g><g><title>std::sys::unix::time::Instant::checked_sub_instant (3 samples, 0.01%)</title><rect x="7.2414%" y="421" width="0.0141%" height="15" fill="rgb(213,116,39)" fg:x="1543" fg:w="3"/><text x="7.4914%" y="431.50"></text></g><g><title>std::time::Instant::elapsed (93 samples, 0.44%)</title><rect x="7.0068%" y="485" width="0.4365%" height="15" fill="rgb(222,207,29)" fg:x="1493" fg:w="93"/><text x="7.2568%" y="495.50"></text></g><g><title>std::time::Instant::now (40 samples, 0.19%)</title><rect x="7.2555%" y="469" width="0.1877%" height="15" fill="rgb(206,96,30)" fg:x="1546" fg:w="40"/><text x="7.5055%" y="479.50"></text></g><g><title>std::sys::unix::time::Instant::now (40 samples, 0.19%)</title><rect x="7.2555%" y="453" width="0.1877%" height="15" fill="rgb(218,138,4)" fg:x="1546" fg:w="40"/><text x="7.5055%" y="463.50"></text></g><g><title>[[stack]] (1,484 samples, 6.96%)</title><rect x="0.4881%" y="501" width="6.9645%" height="15" fill="rgb(250,191,14)" fg:x="104" fg:w="1484"/><text x="0.7381%" y="511.50">[[stack]]</text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as alloc::collections::vec_deque::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (50 samples, 0.23%)</title><rect x="7.4808%" y="485" width="0.2347%" height="15" fill="rgb(239,60,40)" fg:x="1594" fg:w="50"/><text x="7.7308%" y="495.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::copy_slice (14 samples, 0.07%)</title><rect x="7.6497%" y="469" width="0.0657%" height="15" fill="rgb(206,27,48)" fg:x="1630" fg:w="14"/><text x="7.8997%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.07%)</title><rect x="7.6497%" y="453" width="0.0657%" height="15" fill="rgb(225,35,8)" fg:x="1630" fg:w="14"/><text x="7.8997%" y="463.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as alloc::collections::vec_deque::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (8 samples, 0.04%)</title><rect x="7.7154%" y="485" width="0.0375%" height="15" fill="rgb(250,213,24)" fg:x="1644" fg:w="8"/><text x="7.9654%" y="495.50"></text></g><g><title>&lt;gb_rs::graphics::BgFIFO as gb_rs::graphics::FIFO&gt;::pop (196 samples, 0.92%)</title><rect x="7.7530%" y="485" width="0.9198%" height="15" fill="rgb(247,123,22)" fg:x="1652" fg:w="196"/><text x="8.0030%" y="495.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (29 samples, 0.14%)</title><rect x="8.6822%" y="485" width="0.1361%" height="15" fill="rgb(231,138,38)" fg:x="1850" fg:w="29"/><text x="8.9322%" y="495.50"></text></g><g><title>__clock_gettime_2 (56 samples, 0.26%)</title><rect x="8.8981%" y="485" width="0.2628%" height="15" fill="rgb(231,145,46)" fg:x="1896" fg:w="56"/><text x="9.1481%" y="495.50"></text></g><g><title>__vdso_clock_gettime (28 samples, 0.13%)</title><rect x="9.1797%" y="485" width="0.1314%" height="15" fill="rgb(251,118,11)" fg:x="1956" fg:w="28"/><text x="9.4297%" y="495.50"></text></g><g><title>_mesa_image_address (4 samples, 0.02%)</title><rect x="9.3439%" y="485" width="0.0188%" height="15" fill="rgb(217,147,25)" fg:x="1991" fg:w="4"/><text x="9.5939%" y="495.50"></text></g><g><title>_mesa_set_enable (5 samples, 0.02%)</title><rect x="9.3674%" y="485" width="0.0235%" height="15" fill="rgb(247,81,37)" fg:x="1996" fg:w="5"/><text x="9.6174%" y="495.50"></text></g><g><title>check_internal_connections (3 samples, 0.01%)</title><rect x="9.4096%" y="485" width="0.0141%" height="15" fill="rgb(209,12,38)" fg:x="2005" fg:w="3"/><text x="9.6596%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (40 samples, 0.19%)</title><rect x="9.4237%" y="485" width="0.1877%" height="15" fill="rgb(227,1,9)" fg:x="2008" fg:w="40"/><text x="9.6737%" y="495.50"></text></g><g><title>dri_flush (4 samples, 0.02%)</title><rect x="9.6114%" y="485" width="0.0188%" height="15" fill="rgb(248,47,43)" fg:x="2048" fg:w="4"/><text x="9.8614%" y="495.50"></text></g><g><title>gb_rs::clock::Clock::tick (36 samples, 0.17%)</title><rect x="9.6396%" y="485" width="0.1690%" height="15" fill="rgb(221,10,30)" fg:x="2054" fg:w="36"/><text x="9.8896%" y="495.50"></text></g><g><title>gb_rs::cpu::CPU::display_registers (46 samples, 0.22%)</title><rect x="9.8085%" y="485" width="0.2159%" height="15" fill="rgb(210,229,1)" fg:x="2090" fg:w="46"/><text x="10.0585%" y="495.50"></text></g><g><title>gb_rs::cpu::CPU::execute (111 samples, 0.52%)</title><rect x="10.0244%" y="485" width="0.5209%" height="15" fill="rgb(222,148,37)" fg:x="2136" fg:w="111"/><text x="10.2744%" y="495.50"></text></g><g><title>gb_rs::cpu::CPU::get_register (3 samples, 0.01%)</title><rect x="10.5453%" y="485" width="0.0141%" height="15" fill="rgb(234,67,33)" fg:x="2247" fg:w="3"/><text x="10.7953%" y="495.50"></text></g><g><title>gb_rs::cpu::CPU::handle_interrupts (78 samples, 0.37%)</title><rect x="10.5594%" y="485" width="0.3661%" height="15" fill="rgb(247,98,35)" fg:x="2250" fg:w="78"/><text x="10.8094%" y="495.50"></text></g><g><title>gb_rs::cpu::CPU::push_pc_stack (4 samples, 0.02%)</title><rect x="10.9255%" y="485" width="0.0188%" height="15" fill="rgb(247,138,52)" fg:x="2328" fg:w="4"/><text x="11.1755%" y="495.50"></text></g><g><title>gb_rs::cpu::SizedInstruction::decode (100 samples, 0.47%)</title><rect x="10.9536%" y="485" width="0.4693%" height="15" fill="rgb(213,79,30)" fg:x="2334" fg:w="100"/><text x="11.2036%" y="495.50"></text></g><g><title>gb_rs::cpu::SizedInstruction::decode_cb (4 samples, 0.02%)</title><rect x="11.4229%" y="485" width="0.0188%" height="15" fill="rgb(246,177,23)" fg:x="2434" fg:w="4"/><text x="11.6729%" y="495.50"></text></g><g><title>ir_constant::ir_constant (5 samples, 0.02%)</title><rect x="11.4511%" y="341" width="0.0235%" height="15" fill="rgb(230,62,27)" fg:x="2440" fg:w="5"/><text x="11.7011%" y="351.50"></text></g><g><title>glsl_type::get_instance (5 samples, 0.02%)</title><rect x="11.4511%" y="325" width="0.0235%" height="15" fill="rgb(216,154,8)" fg:x="2440" fg:w="5"/><text x="11.7011%" y="335.50"></text></g><g><title>CompileShader (10 samples, 0.05%)</title><rect x="11.4417%" y="389" width="0.0469%" height="15" fill="rgb(244,35,45)" fg:x="2438" fg:w="10"/><text x="11.6917%" y="399.50"></text></g><g><title>_mesa_compile_shader.part.0 (10 samples, 0.05%)</title><rect x="11.4417%" y="373" width="0.0469%" height="15" fill="rgb(251,115,12)" fg:x="2438" fg:w="10"/><text x="11.6917%" y="383.50"></text></g><g><title>_mesa_glsl_builtin_functions_init_or_ref (10 samples, 0.05%)</title><rect x="11.4417%" y="357" width="0.0469%" height="15" fill="rgb(240,54,50)" fg:x="2438" fg:w="10"/><text x="11.6917%" y="367.50"></text></g><g><title>rzalloc_size (3 samples, 0.01%)</title><rect x="11.4746%" y="341" width="0.0141%" height="15" fill="rgb(233,84,52)" fg:x="2445" fg:w="3"/><text x="11.7246%" y="351.50"></text></g><g><title>ralloc_size (3 samples, 0.01%)</title><rect x="11.4746%" y="325" width="0.0141%" height="15" fill="rgb(207,117,47)" fg:x="2445" fg:w="3"/><text x="11.7246%" y="335.50"></text></g><g><title>GL_CreateShaderContext (11 samples, 0.05%)</title><rect x="11.4417%" y="405" width="0.0516%" height="15" fill="rgb(249,43,39)" fg:x="2438" fg:w="11"/><text x="11.6917%" y="415.50"></text></g><g><title>driGetConfigAttribIndex (7 samples, 0.03%)</title><rect x="11.5684%" y="261" width="0.0329%" height="15" fill="rgb(209,38,44)" fg:x="2465" fg:w="7"/><text x="11.8184%" y="271.50"></text></g><g><title>driConvertConfigs (20 samples, 0.09%)</title><rect x="11.5121%" y="293" width="0.0939%" height="15" fill="rgb(236,212,23)" fg:x="2453" fg:w="20"/><text x="11.7621%" y="303.50"></text></g><g><title>driIndexConfigAttrib (9 samples, 0.04%)</title><rect x="11.5637%" y="277" width="0.0422%" height="15" fill="rgb(242,79,21)" fg:x="2464" fg:w="9"/><text x="11.8137%" y="287.50"></text></g><g><title>driCreateNewScreen2 (3 samples, 0.01%)</title><rect x="11.6060%" y="293" width="0.0141%" height="15" fill="rgb(211,96,35)" fg:x="2473" fg:w="3"/><text x="11.8560%" y="303.50"></text></g><g><title>driOpenDriver (16 samples, 0.08%)</title><rect x="11.6200%" y="293" width="0.0751%" height="15" fill="rgb(253,215,40)" fg:x="2476" fg:w="16"/><text x="11.8700%" y="303.50"></text></g><g><title>loader_open_driver (16 samples, 0.08%)</title><rect x="11.6200%" y="277" width="0.0751%" height="15" fill="rgb(211,81,21)" fg:x="2476" fg:w="16"/><text x="11.8700%" y="287.50"></text></g><g><title>loader_open_driver_lib (16 samples, 0.08%)</title><rect x="11.6200%" y="261" width="0.0751%" height="15" fill="rgb(208,190,38)" fg:x="2476" fg:w="16"/><text x="11.8700%" y="271.50"></text></g><g><title>___dlopen (16 samples, 0.08%)</title><rect x="11.6200%" y="245" width="0.0751%" height="15" fill="rgb(235,213,38)" fg:x="2476" fg:w="16"/><text x="11.8700%" y="255.50"></text></g><g><title>_dlerror_run (16 samples, 0.08%)</title><rect x="11.6200%" y="229" width="0.0751%" height="15" fill="rgb(237,122,38)" fg:x="2476" fg:w="16"/><text x="11.8700%" y="239.50"></text></g><g><title>_dl_catch_error (16 samples, 0.08%)</title><rect x="11.6200%" y="213" width="0.0751%" height="15" fill="rgb(244,218,35)" fg:x="2476" fg:w="16"/><text x="11.8700%" y="223.50"></text></g><g><title>__GI__dl_catch_exception (16 samples, 0.08%)</title><rect x="11.6200%" y="197" width="0.0751%" height="15" fill="rgb(240,68,47)" fg:x="2476" fg:w="16"/><text x="11.8700%" y="207.50"></text></g><g><title>dlopen_doit (16 samples, 0.08%)</title><rect x="11.6200%" y="181" width="0.0751%" height="15" fill="rgb(210,16,53)" fg:x="2476" fg:w="16"/><text x="11.8700%" y="191.50"></text></g><g><title>_dl_open (16 samples, 0.08%)</title><rect x="11.6200%" y="165" width="0.0751%" height="15" fill="rgb(235,124,12)" fg:x="2476" fg:w="16"/><text x="11.8700%" y="175.50"></text></g><g><title>__GI__dl_catch_exception (16 samples, 0.08%)</title><rect x="11.6200%" y="149" width="0.0751%" height="15" fill="rgb(224,169,11)" fg:x="2476" fg:w="16"/><text x="11.8700%" y="159.50"></text></g><g><title>dl_open_worker (16 samples, 0.08%)</title><rect x="11.6200%" y="133" width="0.0751%" height="15" fill="rgb(250,166,2)" fg:x="2476" fg:w="16"/><text x="11.8700%" y="143.50"></text></g><g><title>__GI__dl_catch_exception (16 samples, 0.08%)</title><rect x="11.6200%" y="117" width="0.0751%" height="15" fill="rgb(242,216,29)" fg:x="2476" fg:w="16"/><text x="11.8700%" y="127.50"></text></g><g><title>dl_open_worker_begin (15 samples, 0.07%)</title><rect x="11.6247%" y="101" width="0.0704%" height="15" fill="rgb(230,116,27)" fg:x="2477" fg:w="15"/><text x="11.8747%" y="111.50"></text></g><g><title>_dl_relocate_object (14 samples, 0.07%)</title><rect x="11.6294%" y="85" width="0.0657%" height="15" fill="rgb(228,99,48)" fg:x="2478" fg:w="14"/><text x="11.8794%" y="95.50"></text></g><g><title>_dl_lookup_symbol_x (12 samples, 0.06%)</title><rect x="11.6388%" y="69" width="0.0563%" height="15" fill="rgb(253,11,6)" fg:x="2480" fg:w="12"/><text x="11.8888%" y="79.50"></text></g><g><title>do_lookup_x (10 samples, 0.05%)</title><rect x="11.6482%" y="53" width="0.0469%" height="15" fill="rgb(247,143,39)" fg:x="2482" fg:w="10"/><text x="11.8982%" y="63.50"></text></g><g><title>__glXInitialize (46 samples, 0.22%)</title><rect x="11.5074%" y="325" width="0.2159%" height="15" fill="rgb(236,97,10)" fg:x="2452" fg:w="46"/><text x="11.7574%" y="335.50"></text></g><g><title>dri2CreateScreen (45 samples, 0.21%)</title><rect x="11.5121%" y="309" width="0.2112%" height="15" fill="rgb(233,208,19)" fg:x="2453" fg:w="45"/><text x="11.7621%" y="319.50"></text></g><g><title>loader_get_driver_for_fd (4 samples, 0.02%)</title><rect x="11.7045%" y="293" width="0.0188%" height="15" fill="rgb(216,164,2)" fg:x="2494" fg:w="4"/><text x="11.9545%" y="303.50"></text></g><g><title>driParseConfigFiles (4 samples, 0.02%)</title><rect x="11.7045%" y="277" width="0.0188%" height="15" fill="rgb(220,129,5)" fg:x="2494" fg:w="4"/><text x="11.9545%" y="287.50"></text></g><g><title>parseOneConfigFile (4 samples, 0.02%)</title><rect x="11.7045%" y="261" width="0.0188%" height="15" fill="rgb(242,17,10)" fg:x="2494" fg:w="4"/><text x="11.9545%" y="271.50"></text></g><g><title>XML_ParseBuffer (4 samples, 0.02%)</title><rect x="11.7045%" y="245" width="0.0188%" height="15" fill="rgb(242,107,0)" fg:x="2494" fg:w="4"/><text x="11.9545%" y="255.50"></text></g><g><title>callProcessor.constprop.0 (4 samples, 0.02%)</title><rect x="11.7045%" y="229" width="0.0188%" height="15" fill="rgb(251,28,31)" fg:x="2494" fg:w="4"/><text x="11.9545%" y="239.50"></text></g><g><title>contentProcessor (4 samples, 0.02%)</title><rect x="11.7045%" y="213" width="0.0188%" height="15" fill="rgb(233,223,10)" fg:x="2494" fg:w="4"/><text x="11.9545%" y="223.50"></text></g><g><title>doContent (4 samples, 0.02%)</title><rect x="11.7045%" y="197" width="0.0188%" height="15" fill="rgb(215,21,27)" fg:x="2494" fg:w="4"/><text x="11.9545%" y="207.50"></text></g><g><title>storeAtts (3 samples, 0.01%)</title><rect x="11.7092%" y="181" width="0.0141%" height="15" fill="rgb(232,23,21)" fg:x="2495" fg:w="3"/><text x="11.9592%" y="191.50"></text></g><g><title>X11_GL_GetVisual (49 samples, 0.23%)</title><rect x="11.5074%" y="357" width="0.2300%" height="15" fill="rgb(244,5,23)" fg:x="2452" fg:w="49"/><text x="11.7574%" y="367.50"></text></g><g><title>glXChooseVisual (49 samples, 0.23%)</title><rect x="11.5074%" y="341" width="0.2300%" height="15" fill="rgb(226,81,46)" fg:x="2452" fg:w="49"/><text x="11.7574%" y="351.50"></text></g><g><title>__glXLookupVendorByScreen (3 samples, 0.01%)</title><rect x="11.7233%" y="325" width="0.0141%" height="15" fill="rgb(247,70,30)" fg:x="2498" fg:w="3"/><text x="11.9733%" y="335.50"></text></g><g><title>__glXLookupVendorByName (3 samples, 0.01%)</title><rect x="11.7233%" y="309" width="0.0141%" height="15" fill="rgb(212,68,19)" fg:x="2498" fg:w="3"/><text x="11.9733%" y="319.50"></text></g><g><title>___dlopen (3 samples, 0.01%)</title><rect x="11.7233%" y="293" width="0.0141%" height="15" fill="rgb(240,187,13)" fg:x="2498" fg:w="3"/><text x="11.9733%" y="303.50"></text></g><g><title>_dlerror_run (3 samples, 0.01%)</title><rect x="11.7233%" y="277" width="0.0141%" height="15" fill="rgb(223,113,26)" fg:x="2498" fg:w="3"/><text x="11.9733%" y="287.50"></text></g><g><title>_dl_catch_error (3 samples, 0.01%)</title><rect x="11.7233%" y="261" width="0.0141%" height="15" fill="rgb(206,192,2)" fg:x="2498" fg:w="3"/><text x="11.9733%" y="271.50"></text></g><g><title>__GI__dl_catch_exception (3 samples, 0.01%)</title><rect x="11.7233%" y="245" width="0.0141%" height="15" fill="rgb(241,108,4)" fg:x="2498" fg:w="3"/><text x="11.9733%" y="255.50"></text></g><g><title>dlopen_doit (3 samples, 0.01%)</title><rect x="11.7233%" y="229" width="0.0141%" height="15" fill="rgb(247,173,49)" fg:x="2498" fg:w="3"/><text x="11.9733%" y="239.50"></text></g><g><title>_dl_open (3 samples, 0.01%)</title><rect x="11.7233%" y="213" width="0.0141%" height="15" fill="rgb(224,114,35)" fg:x="2498" fg:w="3"/><text x="11.9733%" y="223.50"></text></g><g><title>__GI__dl_catch_exception (3 samples, 0.01%)</title><rect x="11.7233%" y="197" width="0.0141%" height="15" fill="rgb(245,159,27)" fg:x="2498" fg:w="3"/><text x="11.9733%" y="207.50"></text></g><g><title>dl_open_worker (3 samples, 0.01%)</title><rect x="11.7233%" y="181" width="0.0141%" height="15" fill="rgb(245,172,44)" fg:x="2498" fg:w="3"/><text x="11.9733%" y="191.50"></text></g><g><title>__GI__dl_catch_exception (3 samples, 0.01%)</title><rect x="11.7233%" y="165" width="0.0141%" height="15" fill="rgb(236,23,11)" fg:x="2498" fg:w="3"/><text x="11.9733%" y="175.50"></text></g><g><title>dl_open_worker_begin (3 samples, 0.01%)</title><rect x="11.7233%" y="149" width="0.0141%" height="15" fill="rgb(205,117,38)" fg:x="2498" fg:w="3"/><text x="11.9733%" y="159.50"></text></g><g><title>__memset_avx2_unaligned_erms (6 samples, 0.03%)</title><rect x="11.7374%" y="213" width="0.0282%" height="15" fill="rgb(237,72,25)" fg:x="2501" fg:w="6"/><text x="11.9874%" y="223.50"></text></g><g><title>glXCreateContext (7 samples, 0.03%)</title><rect x="11.7374%" y="357" width="0.0329%" height="15" fill="rgb(244,70,9)" fg:x="2501" fg:w="7"/><text x="11.9874%" y="367.50"></text></g><g><title>glXCreateContext (7 samples, 0.03%)</title><rect x="11.7374%" y="341" width="0.0329%" height="15" fill="rgb(217,125,39)" fg:x="2501" fg:w="7"/><text x="11.9874%" y="351.50"></text></g><g><title>CreateContext (7 samples, 0.03%)</title><rect x="11.7374%" y="325" width="0.0329%" height="15" fill="rgb(235,36,10)" fg:x="2501" fg:w="7"/><text x="11.9874%" y="335.50"></text></g><g><title>dri_common_create_context (7 samples, 0.03%)</title><rect x="11.7374%" y="309" width="0.0329%" height="15" fill="rgb(251,123,47)" fg:x="2501" fg:w="7"/><text x="11.9874%" y="319.50"></text></g><g><title>dri2_create_context_attribs (7 samples, 0.03%)</title><rect x="11.7374%" y="293" width="0.0329%" height="15" fill="rgb(221,13,13)" fg:x="2501" fg:w="7"/><text x="11.9874%" y="303.50"></text></g><g><title>driCreateContextAttribs (7 samples, 0.03%)</title><rect x="11.7374%" y="277" width="0.0329%" height="15" fill="rgb(238,131,9)" fg:x="2501" fg:w="7"/><text x="11.9874%" y="287.50"></text></g><g><title>dri_create_context (7 samples, 0.03%)</title><rect x="11.7374%" y="261" width="0.0329%" height="15" fill="rgb(211,50,8)" fg:x="2501" fg:w="7"/><text x="11.9874%" y="271.50"></text></g><g><title>st_api_create_context (7 samples, 0.03%)</title><rect x="11.7374%" y="245" width="0.0329%" height="15" fill="rgb(245,182,24)" fg:x="2501" fg:w="7"/><text x="11.9874%" y="255.50"></text></g><g><title>st_create_context (7 samples, 0.03%)</title><rect x="11.7374%" y="229" width="0.0329%" height="15" fill="rgb(242,14,37)" fg:x="2501" fg:w="7"/><text x="11.9874%" y="239.50"></text></g><g><title>__libc_poll (5 samples, 0.02%)</title><rect x="11.7702%" y="261" width="0.0235%" height="15" fill="rgb(246,228,12)" fg:x="2508" fg:w="5"/><text x="12.0202%" y="271.50"></text></g><g><title>SDL_GL_LoadLibrary_REAL (64 samples, 0.30%)</title><rect x="11.4980%" y="389" width="0.3004%" height="15" fill="rgb(213,55,15)" fg:x="2450" fg:w="64"/><text x="11.7480%" y="399.50"></text></g><g><title>X11_GL_LoadLibrary (64 samples, 0.30%)</title><rect x="11.4980%" y="373" width="0.3004%" height="15" fill="rgb(209,9,3)" fg:x="2450" fg:w="64"/><text x="11.7480%" y="383.50"></text></g><g><title>glXQueryExtension (6 samples, 0.03%)</title><rect x="11.7702%" y="357" width="0.0282%" height="15" fill="rgb(230,59,30)" fg:x="2508" fg:w="6"/><text x="12.0202%" y="367.50"></text></g><g><title>XQueryExtension (6 samples, 0.03%)</title><rect x="11.7702%" y="341" width="0.0282%" height="15" fill="rgb(209,121,21)" fg:x="2508" fg:w="6"/><text x="12.0202%" y="351.50"></text></g><g><title>_XReply (6 samples, 0.03%)</title><rect x="11.7702%" y="325" width="0.0282%" height="15" fill="rgb(220,109,13)" fg:x="2508" fg:w="6"/><text x="12.0202%" y="335.50"></text></g><g><title>xcb_wait_for_reply64 (6 samples, 0.03%)</title><rect x="11.7702%" y="309" width="0.0282%" height="15" fill="rgb(232,18,1)" fg:x="2508" fg:w="6"/><text x="12.0202%" y="319.50"></text></g><g><title>wait_for_reply (6 samples, 0.03%)</title><rect x="11.7702%" y="293" width="0.0282%" height="15" fill="rgb(215,41,42)" fg:x="2508" fg:w="6"/><text x="12.0202%" y="303.50"></text></g><g><title>_xcb_conn_wait (6 samples, 0.03%)</title><rect x="11.7702%" y="277" width="0.0282%" height="15" fill="rgb(224,123,36)" fg:x="2508" fg:w="6"/><text x="12.0202%" y="287.50"></text></g><g><title>sdl2::render::CanvasBuilder::build (77 samples, 0.36%)</title><rect x="11.4417%" y="453" width="0.3614%" height="15" fill="rgb(240,125,3)" fg:x="2438" fg:w="77"/><text x="11.6917%" y="463.50"></text></g><g><title>SDL_CreateRenderer_REAL (77 samples, 0.36%)</title><rect x="11.4417%" y="437" width="0.3614%" height="15" fill="rgb(205,98,50)" fg:x="2438" fg:w="77"/><text x="11.6917%" y="447.50"></text></g><g><title>GL_CreateRenderer (77 samples, 0.36%)</title><rect x="11.4417%" y="421" width="0.3614%" height="15" fill="rgb(205,185,37)" fg:x="2438" fg:w="77"/><text x="11.6917%" y="431.50"></text></g><g><title>SDL_RecreateWindow (65 samples, 0.31%)</title><rect x="11.4980%" y="405" width="0.3050%" height="15" fill="rgb(238,207,15)" fg:x="2450" fg:w="65"/><text x="11.7480%" y="415.50"></text></g><g><title>__libc_poll (5 samples, 0.02%)</title><rect x="11.8078%" y="293" width="0.0235%" height="15" fill="rgb(213,199,42)" fg:x="2516" fg:w="5"/><text x="12.0578%" y="303.50"></text></g><g><title>X11_GetBorderValues (6 samples, 0.03%)</title><rect x="11.8078%" y="389" width="0.0282%" height="15" fill="rgb(235,201,11)" fg:x="2516" fg:w="6"/><text x="12.0578%" y="399.50"></text></g><g><title>XGetWindowProperty (6 samples, 0.03%)</title><rect x="11.8078%" y="373" width="0.0282%" height="15" fill="rgb(207,46,11)" fg:x="2516" fg:w="6"/><text x="12.0578%" y="383.50"></text></g><g><title>_XReply (6 samples, 0.03%)</title><rect x="11.8078%" y="357" width="0.0282%" height="15" fill="rgb(241,35,35)" fg:x="2516" fg:w="6"/><text x="12.0578%" y="367.50"></text></g><g><title>xcb_wait_for_reply64 (6 samples, 0.03%)</title><rect x="11.8078%" y="341" width="0.0282%" height="15" fill="rgb(243,32,47)" fg:x="2516" fg:w="6"/><text x="12.0578%" y="351.50"></text></g><g><title>wait_for_reply (6 samples, 0.03%)</title><rect x="11.8078%" y="325" width="0.0282%" height="15" fill="rgb(247,202,23)" fg:x="2516" fg:w="6"/><text x="12.0578%" y="335.50"></text></g><g><title>_xcb_conn_wait (6 samples, 0.03%)</title><rect x="11.8078%" y="309" width="0.0282%" height="15" fill="rgb(219,102,11)" fg:x="2516" fg:w="6"/><text x="12.0578%" y="319.50"></text></g><g><title>gb_rs::gb::GameBoy::new (89 samples, 0.42%)</title><rect x="11.4417%" y="485" width="0.4177%" height="15" fill="rgb(243,110,44)" fg:x="2438" fg:w="89"/><text x="11.6917%" y="495.50"></text></g><g><title>gb_rs::graphics::Graphics::new (89 samples, 0.42%)</title><rect x="11.4417%" y="469" width="0.4177%" height="15" fill="rgb(222,74,54)" fg:x="2438" fg:w="89"/><text x="11.6917%" y="479.50"></text></g><g><title>sdl2::video::WindowBuilder::build (11 samples, 0.05%)</title><rect x="11.8078%" y="453" width="0.0516%" height="15" fill="rgb(216,99,12)" fg:x="2516" fg:w="11"/><text x="12.0578%" y="463.50"></text></g><g><title>SDL_CreateWindow_REAL (11 samples, 0.05%)</title><rect x="11.8078%" y="437" width="0.0516%" height="15" fill="rgb(226,22,26)" fg:x="2516" fg:w="11"/><text x="12.0578%" y="447.50"></text></g><g><title>SDL_FinishWindowCreation (11 samples, 0.05%)</title><rect x="11.8078%" y="421" width="0.0516%" height="15" fill="rgb(217,163,10)" fg:x="2516" fg:w="11"/><text x="12.0578%" y="431.50"></text></g><g><title>X11_ShowWindow (11 samples, 0.05%)</title><rect x="11.8078%" y="405" width="0.0516%" height="15" fill="rgb(213,25,53)" fg:x="2516" fg:w="11"/><text x="12.0578%" y="415.50"></text></g><g><title>XIfEvent (5 samples, 0.02%)</title><rect x="11.8359%" y="389" width="0.0235%" height="15" fill="rgb(252,105,26)" fg:x="2522" fg:w="5"/><text x="12.0859%" y="399.50"></text></g><g><title>_XReadEvents (5 samples, 0.02%)</title><rect x="11.8359%" y="373" width="0.0235%" height="15" fill="rgb(220,39,43)" fg:x="2522" fg:w="5"/><text x="12.0859%" y="383.50"></text></g><g><title>xcb_wait_for_event (5 samples, 0.02%)</title><rect x="11.8359%" y="357" width="0.0235%" height="15" fill="rgb(229,68,48)" fg:x="2522" fg:w="5"/><text x="12.0859%" y="367.50"></text></g><g><title>_xcb_conn_wait (5 samples, 0.02%)</title><rect x="11.8359%" y="341" width="0.0235%" height="15" fill="rgb(252,8,32)" fg:x="2522" fg:w="5"/><text x="12.0859%" y="351.50"></text></g><g><title>__libc_poll (5 samples, 0.02%)</title><rect x="11.8359%" y="325" width="0.0235%" height="15" fill="rgb(223,20,43)" fg:x="2522" fg:w="5"/><text x="12.0859%" y="335.50"></text></g><g><title>gb_rs::gb::GameBoy::run (158 samples, 0.74%)</title><rect x="11.8594%" y="485" width="0.7415%" height="15" fill="rgb(229,81,49)" fg:x="2527" fg:w="158"/><text x="12.1094%" y="495.50"></text></g><g><title>gb_rs::gb::Debugger::check_pause (4 samples, 0.02%)</title><rect x="12.5821%" y="469" width="0.0188%" height="15" fill="rgb(236,28,36)" fg:x="2681" fg:w="4"/><text x="12.8321%" y="479.50"></text></g><g><title>gb_rs::gb::Debugger::check_breakpoints (4 samples, 0.02%)</title><rect x="12.5821%" y="453" width="0.0188%" height="15" fill="rgb(249,185,26)" fg:x="2681" fg:w="4"/><text x="12.8321%" y="463.50"></text></g><g><title>gb_rs::graphics::BgFIFO::fetch (236 samples, 1.11%)</title><rect x="12.6009%" y="485" width="1.1076%" height="15" fill="rgb(249,174,33)" fg:x="2685" fg:w="236"/><text x="12.8509%" y="495.50"></text></g><g><title>gb_rs::graphics::Graphics::render (97 samples, 0.46%)</title><rect x="13.7085%" y="485" width="0.4552%" height="15" fill="rgb(233,201,37)" fg:x="2921" fg:w="97"/><text x="13.9585%" y="495.50"></text></g><g><title>gb_rs::graphics::Tile::fetch_tile (4 samples, 0.02%)</title><rect x="14.1637%" y="485" width="0.0188%" height="15" fill="rgb(221,78,26)" fg:x="3018" fg:w="4"/><text x="14.4137%" y="495.50"></text></g><g><title>gb_rs::joypad::Joypad::update (83 samples, 0.39%)</title><rect x="14.1825%" y="485" width="0.3895%" height="15" fill="rgb(250,127,30)" fg:x="3022" fg:w="83"/><text x="14.4325%" y="495.50"></text></g><g><title>_XEventsQueued (3 samples, 0.01%)</title><rect x="16.8106%" y="357" width="0.0141%" height="15" fill="rgb(230,49,44)" fg:x="3582" fg:w="3"/><text x="17.0606%" y="367.50"></text></g><g><title>poll_for_response (3 samples, 0.01%)</title><rect x="16.8106%" y="341" width="0.0141%" height="15" fill="rgb(229,67,23)" fg:x="3582" fg:w="3"/><text x="17.0606%" y="351.50"></text></g><g><title>&lt;sdl2::event::EventPollIterator as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.05%)</title><rect x="16.7824%" y="453" width="0.0469%" height="15" fill="rgb(249,83,47)" fg:x="3576" fg:w="10"/><text x="17.0324%" y="463.50"></text></g><g><title>sdl2::event::poll_event (10 samples, 0.05%)</title><rect x="16.7824%" y="437" width="0.0469%" height="15" fill="rgb(215,43,3)" fg:x="3576" fg:w="10"/><text x="17.0324%" y="447.50"></text></g><g><title>SDL_PollEvent_REAL (10 samples, 0.05%)</title><rect x="16.7824%" y="421" width="0.0469%" height="15" fill="rgb(238,154,13)" fg:x="3576" fg:w="10"/><text x="17.0324%" y="431.50"></text></g><g><title>SDL_PumpEventsInternal.constprop.0 (10 samples, 0.05%)</title><rect x="16.7824%" y="405" width="0.0469%" height="15" fill="rgb(219,56,2)" fg:x="3576" fg:w="10"/><text x="17.0324%" y="415.50"></text></g><g><title>X11_PumpEvents (8 samples, 0.04%)</title><rect x="16.7918%" y="389" width="0.0375%" height="15" fill="rgb(233,0,4)" fg:x="3578" fg:w="8"/><text x="17.0418%" y="399.50"></text></g><g><title>XCheckIfEvent (5 samples, 0.02%)</title><rect x="16.8059%" y="373" width="0.0235%" height="15" fill="rgb(235,30,7)" fg:x="3581" fg:w="5"/><text x="17.0559%" y="383.50"></text></g><g><title>SDL_Delay (9 samples, 0.04%)</title><rect x="16.8294%" y="453" width="0.0422%" height="15" fill="rgb(250,79,13)" fg:x="3586" fg:w="9"/><text x="17.0794%" y="463.50"></text></g><g><title>__GI___errno_location (9 samples, 0.04%)</title><rect x="16.9138%" y="437" width="0.0422%" height="15" fill="rgb(211,146,34)" fg:x="3604" fg:w="9"/><text x="17.1638%" y="447.50"></text></g><g><title>__GI___nanosleep (25 samples, 0.12%)</title><rect x="16.9561%" y="437" width="0.1173%" height="15" fill="rgb(228,22,38)" fg:x="3613" fg:w="25"/><text x="17.2061%" y="447.50"></text></g><g><title>__clock_nanosleep (20 samples, 0.09%)</title><rect x="16.9795%" y="421" width="0.0939%" height="15" fill="rgb(235,168,5)" fg:x="3618" fg:w="20"/><text x="17.2295%" y="431.50"></text></g><g><title>SDL_Delay_REAL (50 samples, 0.23%)</title><rect x="16.8716%" y="453" width="0.2347%" height="15" fill="rgb(221,155,16)" fg:x="3595" fg:w="50"/><text x="17.1216%" y="463.50"></text></g><g><title>__errno_location@plt (7 samples, 0.03%)</title><rect x="17.0734%" y="437" width="0.0329%" height="15" fill="rgb(215,215,53)" fg:x="3638" fg:w="7"/><text x="17.3234%" y="447.50"></text></g><g><title>&lt;sdl2::render::RendererContext&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="17.1063%" y="341" width="0.0188%" height="15" fill="rgb(223,4,10)" fg:x="3645" fg:w="4"/><text x="17.3563%" y="351.50"></text></g><g><title>GL_DestroyRenderer (4 samples, 0.02%)</title><rect x="17.1063%" y="325" width="0.0188%" height="15" fill="rgb(234,103,6)" fg:x="3645" fg:w="4"/><text x="17.3563%" y="335.50"></text></g><g><title>X11_GL_DeleteContext (3 samples, 0.01%)</title><rect x="17.1109%" y="309" width="0.0141%" height="15" fill="rgb(227,97,0)" fg:x="3646" fg:w="3"/><text x="17.3609%" y="319.50"></text></g><g><title>glXDestroyContext (3 samples, 0.01%)</title><rect x="17.1109%" y="293" width="0.0141%" height="15" fill="rgb(234,150,53)" fg:x="3646" fg:w="3"/><text x="17.3609%" y="303.50"></text></g><g><title>dri2_destroy_context (3 samples, 0.01%)</title><rect x="17.1109%" y="277" width="0.0141%" height="15" fill="rgb(228,201,54)" fg:x="3646" fg:w="3"/><text x="17.3609%" y="287.50"></text></g><g><title>dri_destroy_context (3 samples, 0.01%)</title><rect x="17.1109%" y="261" width="0.0141%" height="15" fill="rgb(222,22,37)" fg:x="3646" fg:w="3"/><text x="17.3609%" y="271.50"></text></g><g><title>st_destroy_context (3 samples, 0.01%)</title><rect x="17.1109%" y="245" width="0.0141%" height="15" fill="rgb(237,53,32)" fg:x="3646" fg:w="3"/><text x="17.3609%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;gb_rs::gb::GameBoy&gt; (10 samples, 0.05%)</title><rect x="17.1063%" y="453" width="0.0469%" height="15" fill="rgb(233,25,53)" fg:x="3645" fg:w="10"/><text x="17.3563%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;gb_rs::graphics::Graphics&gt;&gt; (10 samples, 0.05%)</title><rect x="17.1063%" y="437" width="0.0469%" height="15" fill="rgb(210,40,34)" fg:x="3645" fg:w="10"/><text x="17.3563%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;gb_rs::graphics::Graphics&gt; (10 samples, 0.05%)</title><rect x="17.1063%" y="421" width="0.0469%" height="15" fill="rgb(241,220,44)" fg:x="3645" fg:w="10"/><text x="17.3563%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;sdl2::render::TextureCreator&lt;sdl2::video::WindowContext&gt;&gt; (10 samples, 0.05%)</title><rect x="17.1063%" y="405" width="0.0469%" height="15" fill="rgb(235,28,35)" fg:x="3645" fg:w="10"/><text x="17.3563%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;sdl2::render::RendererContext&lt;sdl2::video::WindowContext&gt;&gt;&gt; (10 samples, 0.05%)</title><rect x="17.1063%" y="389" width="0.0469%" height="15" fill="rgb(210,56,17)" fg:x="3645" fg:w="10"/><text x="17.3563%" y="399.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.05%)</title><rect x="17.1063%" y="373" width="0.0469%" height="15" fill="rgb(224,130,29)" fg:x="3645" fg:w="10"/><text x="17.3563%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;sdl2::render::RendererContext&lt;sdl2::video::WindowContext&gt;&gt; (10 samples, 0.05%)</title><rect x="17.1063%" y="357" width="0.0469%" height="15" fill="rgb(235,212,8)" fg:x="3645" fg:w="10"/><text x="17.3563%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;sdl2::video::WindowContext&gt;&gt; (6 samples, 0.03%)</title><rect x="17.1250%" y="341" width="0.0282%" height="15" fill="rgb(223,33,50)" fg:x="3649" fg:w="6"/><text x="17.3750%" y="351.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.03%)</title><rect x="17.1250%" y="325" width="0.0282%" height="15" fill="rgb(219,149,13)" fg:x="3649" fg:w="6"/><text x="17.3750%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;sdl2::video::WindowContext&gt; (6 samples, 0.03%)</title><rect x="17.1250%" y="309" width="0.0282%" height="15" fill="rgb(250,156,29)" fg:x="3649" fg:w="6"/><text x="17.3750%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;sdl2::sdl::VideoSubsystem&gt; (6 samples, 0.03%)</title><rect x="17.1250%" y="293" width="0.0282%" height="15" fill="rgb(216,193,19)" fg:x="3649" fg:w="6"/><text x="17.3750%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;sdl2::sdl::SubsystemDrop&gt; (6 samples, 0.03%)</title><rect x="17.1250%" y="277" width="0.0282%" height="15" fill="rgb(216,135,14)" fg:x="3649" fg:w="6"/><text x="17.3750%" y="287.50"></text></g><g><title>&lt;sdl2::sdl::SubsystemDrop as core::ops::drop::Drop&gt;::drop (6 samples, 0.03%)</title><rect x="17.1250%" y="261" width="0.0282%" height="15" fill="rgb(241,47,5)" fg:x="3649" fg:w="6"/><text x="17.3750%" y="271.50"></text></g><g><title>SDL_QuitSubSystem_REAL (6 samples, 0.03%)</title><rect x="17.1250%" y="245" width="0.0282%" height="15" fill="rgb(233,42,35)" fg:x="3649" fg:w="6"/><text x="17.3750%" y="255.50"></text></g><g><title>SDL_VideoQuit_REAL.part.0 (6 samples, 0.03%)</title><rect x="17.1250%" y="229" width="0.0282%" height="15" fill="rgb(231,13,6)" fg:x="3649" fg:w="6"/><text x="17.3750%" y="239.50"></text></g><g><title>X11_DeleteDevice (6 samples, 0.03%)</title><rect x="17.1250%" y="213" width="0.0282%" height="15" fill="rgb(207,181,40)" fg:x="3649" fg:w="6"/><text x="17.3750%" y="223.50"></text></g><g><title>XCloseDisplay (6 samples, 0.03%)</title><rect x="17.1250%" y="197" width="0.0282%" height="15" fill="rgb(254,173,49)" fg:x="3649" fg:w="6"/><text x="17.3750%" y="207.50"></text></g><g><title>__glXCloseDisplay (6 samples, 0.03%)</title><rect x="17.1250%" y="181" width="0.0282%" height="15" fill="rgb(221,1,38)" fg:x="3649" fg:w="6"/><text x="17.3750%" y="191.50"></text></g><g><title>glx_display_free (6 samples, 0.03%)</title><rect x="17.1250%" y="165" width="0.0282%" height="15" fill="rgb(206,124,46)" fg:x="3649" fg:w="6"/><text x="17.3750%" y="175.50"></text></g><g><title>dri2DestroyScreen (6 samples, 0.03%)</title><rect x="17.1250%" y="149" width="0.0282%" height="15" fill="rgb(249,21,11)" fg:x="3649" fg:w="6"/><text x="17.3750%" y="159.50"></text></g><g><title>dri_destroy_screen (5 samples, 0.02%)</title><rect x="17.1297%" y="133" width="0.0235%" height="15" fill="rgb(222,201,40)" fg:x="3650" fg:w="5"/><text x="17.3797%" y="143.50"></text></g><g><title>iris_screen_destroy (5 samples, 0.02%)</title><rect x="17.1297%" y="117" width="0.0235%" height="15" fill="rgb(235,61,29)" fg:x="3650" fg:w="5"/><text x="17.3797%" y="127.50"></text></g><g><title>util_queue_destroy (5 samples, 0.02%)</title><rect x="17.1297%" y="101" width="0.0235%" height="15" fill="rgb(219,207,3)" fg:x="3650" fg:w="5"/><text x="17.3797%" y="111.50"></text></g><g><title>util_queue_kill_threads (5 samples, 0.02%)</title><rect x="17.1297%" y="85" width="0.0235%" height="15" fill="rgb(222,56,46)" fg:x="3650" fg:w="5"/><text x="17.3797%" y="95.50"></text></g><g><title>thrd_join (5 samples, 0.02%)</title><rect x="17.1297%" y="69" width="0.0235%" height="15" fill="rgb(239,76,54)" fg:x="3650" fg:w="5"/><text x="17.3797%" y="79.50"></text></g><g><title>__pthread_clockjoin_ex (5 samples, 0.02%)</title><rect x="17.1297%" y="53" width="0.0235%" height="15" fill="rgb(231,124,27)" fg:x="3650" fg:w="5"/><text x="17.3797%" y="63.50"></text></g><g><title>__futex_abstimed_wait_common (5 samples, 0.02%)</title><rect x="17.1297%" y="37" width="0.0235%" height="15" fill="rgb(249,195,6)" fg:x="3650" fg:w="5"/><text x="17.3797%" y="47.50"></text></g><g><title>core::time::Duration::as_millis (182 samples, 0.85%)</title><rect x="17.1532%" y="453" width="0.8541%" height="15" fill="rgb(237,174,47)" fg:x="3655" fg:w="182"/><text x="17.4032%" y="463.50"></text></g><g><title>gb_rs::clock::Clock::get_timestamp (46 samples, 0.22%)</title><rect x="18.0073%" y="453" width="0.2159%" height="15" fill="rgb(206,201,31)" fg:x="3837" fg:w="46"/><text x="18.2573%" y="463.50"></text></g><g><title>core::cmp::PartialOrd::le (88 samples, 0.41%)</title><rect x="21.4896%" y="437" width="0.4130%" height="15" fill="rgb(231,57,52)" fg:x="4579" fg:w="88"/><text x="21.7396%" y="447.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (77 samples, 0.36%)</title><rect x="21.5412%" y="421" width="0.3614%" height="15" fill="rgb(248,177,22)" fg:x="4590" fg:w="77"/><text x="21.7912%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (77 samples, 0.36%)</title><rect x="21.5412%" y="405" width="0.3614%" height="15" fill="rgb(215,211,37)" fg:x="4590" fg:w="77"/><text x="21.7912%" y="415.50"></text></g><g><title>core::num::&lt;impl u16&gt;::wrapping_add_signed (5 samples, 0.02%)</title><rect x="21.9026%" y="437" width="0.0235%" height="15" fill="rgb(241,128,51)" fg:x="4667" fg:w="5"/><text x="22.1526%" y="447.50"></text></g><g><title>core::num::&lt;impl u16&gt;::wrapping_add (5 samples, 0.02%)</title><rect x="21.9026%" y="421" width="0.0235%" height="15" fill="rgb(227,165,31)" fg:x="4667" fg:w="5"/><text x="22.1526%" y="431.50"></text></g><g><title>core::num::&lt;impl u8&gt;::overflowing_add (8 samples, 0.04%)</title><rect x="21.9260%" y="437" width="0.0375%" height="15" fill="rgb(228,167,24)" fg:x="4672" fg:w="8"/><text x="22.1760%" y="447.50"></text></g><g><title>core::num::&lt;impl u8&gt;::overflowing_sub (3 samples, 0.01%)</title><rect x="21.9636%" y="437" width="0.0141%" height="15" fill="rgb(228,143,12)" fg:x="4680" fg:w="3"/><text x="22.2136%" y="447.50"></text></g><g><title>gb_rs::clock::Clock::tick (259 samples, 1.22%)</title><rect x="21.9777%" y="437" width="1.2155%" height="15" fill="rgb(249,149,8)" fg:x="4683" fg:w="259"/><text x="22.2277%" y="447.50"></text></g><g><title>core::cmp::PartialOrd::le (404 samples, 1.90%)</title><rect x="23.3152%" y="421" width="1.8960%" height="15" fill="rgb(243,35,44)" fg:x="4968" fg:w="404"/><text x="23.5652%" y="431.50">c..</text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (291 samples, 1.37%)</title><rect x="23.8455%" y="405" width="1.3657%" height="15" fill="rgb(246,89,9)" fg:x="5081" fg:w="291"/><text x="24.0955%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (291 samples, 1.37%)</title><rect x="23.8455%" y="389" width="1.3657%" height="15" fill="rgb(233,213,13)" fg:x="5081" fg:w="291"/><text x="24.0955%" y="399.50"></text></g><g><title>gb_rs::cpu::CPU::display_registers (484 samples, 2.27%)</title><rect x="23.1932%" y="437" width="2.2714%" height="15" fill="rgb(233,141,41)" fg:x="4942" fg:w="484"/><text x="23.4432%" y="447.50">g..</text></g><g><title>log::max_level (54 samples, 0.25%)</title><rect x="25.2112%" y="421" width="0.2534%" height="15" fill="rgb(239,167,4)" fg:x="5372" fg:w="54"/><text x="25.4612%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (54 samples, 0.25%)</title><rect x="25.2112%" y="405" width="0.2534%" height="15" fill="rgb(209,217,16)" fg:x="5372" fg:w="54"/><text x="25.4612%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (54 samples, 0.25%)</title><rect x="25.2112%" y="389" width="0.2534%" height="15" fill="rgb(219,88,35)" fg:x="5372" fg:w="54"/><text x="25.4612%" y="399.50"></text></g><g><title>gb_rs::cpu::CPU::get_condition (16 samples, 0.08%)</title><rect x="25.4646%" y="437" width="0.0751%" height="15" fill="rgb(220,193,23)" fg:x="5426" fg:w="16"/><text x="25.7146%" y="447.50"></text></g><g><title>gb_rs::cpu::CPU::get_flag (16 samples, 0.08%)</title><rect x="25.4646%" y="421" width="0.0751%" height="15" fill="rgb(230,90,52)" fg:x="5426" fg:w="16"/><text x="25.7146%" y="431.50"></text></g><g><title>gb_rs::cpu::CPU::get_hl (10 samples, 0.05%)</title><rect x="25.5397%" y="437" width="0.0469%" height="15" fill="rgb(252,106,19)" fg:x="5442" fg:w="10"/><text x="25.7897%" y="447.50"></text></g><g><title>gb_rs::cpu::CPU::get_register16 (10 samples, 0.05%)</title><rect x="25.5397%" y="421" width="0.0469%" height="15" fill="rgb(206,74,20)" fg:x="5442" fg:w="10"/><text x="25.7897%" y="431.50"></text></g><g><title>gb_rs::utils::bytes2word (10 samples, 0.05%)</title><rect x="25.5397%" y="405" width="0.0469%" height="15" fill="rgb(230,138,44)" fg:x="5442" fg:w="10"/><text x="25.7897%" y="415.50"></text></g><g><title>&lt;u16 as gb_rs::utils::WordOP&gt;::set_high (10 samples, 0.05%)</title><rect x="25.5397%" y="389" width="0.0469%" height="15" fill="rgb(235,182,43)" fg:x="5442" fg:w="10"/><text x="25.7897%" y="399.50"></text></g><g><title>gb_rs::cpu::CPU::get_register (85 samples, 0.40%)</title><rect x="25.5866%" y="437" width="0.3989%" height="15" fill="rgb(242,16,51)" fg:x="5452" fg:w="85"/><text x="25.8366%" y="447.50"></text></g><g><title>gb_rs::cpu::CPU::get_register16 (24 samples, 0.11%)</title><rect x="25.9855%" y="437" width="0.1126%" height="15" fill="rgb(248,9,4)" fg:x="5537" fg:w="24"/><text x="26.2355%" y="447.50"></text></g><g><title>gb_rs::utils::bytes2word (12 samples, 0.06%)</title><rect x="26.0419%" y="421" width="0.0563%" height="15" fill="rgb(210,31,22)" fg:x="5549" fg:w="12"/><text x="26.2919%" y="431.50"></text></g><g><title>&lt;u16 as gb_rs::utils::WordOP&gt;::set_high (12 samples, 0.06%)</title><rect x="26.0419%" y="405" width="0.0563%" height="15" fill="rgb(239,54,39)" fg:x="5549" fg:w="12"/><text x="26.2919%" y="415.50"></text></g><g><title>gb_rs::cpu::CPU::half_carry_flag_add (16 samples, 0.08%)</title><rect x="26.0982%" y="437" width="0.0751%" height="15" fill="rgb(230,99,41)" fg:x="5561" fg:w="16"/><text x="26.3482%" y="447.50"></text></g><g><title>gb_rs::cpu::CPU::half_carry_flag_sub (4 samples, 0.02%)</title><rect x="26.1827%" y="437" width="0.0188%" height="15" fill="rgb(253,106,12)" fg:x="5579" fg:w="4"/><text x="26.4327%" y="447.50"></text></g><g><title>gb_rs::cpu::CPU::pop_pc_stack (19 samples, 0.09%)</title><rect x="26.2014%" y="437" width="0.0892%" height="15" fill="rgb(213,46,41)" fg:x="5583" fg:w="19"/><text x="26.4514%" y="447.50"></text></g><g><title>gb_rs::utils::bytes2word (3 samples, 0.01%)</title><rect x="26.2765%" y="421" width="0.0141%" height="15" fill="rgb(215,133,35)" fg:x="5599" fg:w="3"/><text x="26.5265%" y="431.50"></text></g><g><title>&lt;u16 as gb_rs::utils::WordOP&gt;::set_high (3 samples, 0.01%)</title><rect x="26.2765%" y="405" width="0.0141%" height="15" fill="rgb(213,28,5)" fg:x="5599" fg:w="3"/><text x="26.5265%" y="415.50"></text></g><g><title>gb_rs::cpu::CPU::push_pc_stack (23 samples, 0.11%)</title><rect x="26.2906%" y="437" width="0.1079%" height="15" fill="rgb(215,77,49)" fg:x="5602" fg:w="23"/><text x="26.5406%" y="447.50"></text></g><g><title>gb_rs::memory::Memory::write_byte (6 samples, 0.03%)</title><rect x="26.3704%" y="421" width="0.0282%" height="15" fill="rgb(248,100,22)" fg:x="5619" fg:w="6"/><text x="26.6204%" y="431.50"></text></g><g><title>gb_rs::memory::Memory::get_cartridge_type (4 samples, 0.02%)</title><rect x="26.3798%" y="405" width="0.0188%" height="15" fill="rgb(208,67,9)" fg:x="5621" fg:w="4"/><text x="26.6298%" y="415.50"></text></g><g><title>gb_rs::cpu::CPU::set_flag (5 samples, 0.02%)</title><rect x="26.3985%" y="437" width="0.0235%" height="15" fill="rgb(219,133,21)" fg:x="5625" fg:w="5"/><text x="26.6485%" y="447.50"></text></g><g><title>gb_rs::cpu::CPU::set_register (40 samples, 0.19%)</title><rect x="26.4267%" y="437" width="0.1877%" height="15" fill="rgb(246,46,29)" fg:x="5631" fg:w="40"/><text x="26.6767%" y="447.50"></text></g><g><title>gb_rs::cpu::CPU::set_register16 (7 samples, 0.03%)</title><rect x="26.6144%" y="437" width="0.0329%" height="15" fill="rgb(246,185,52)" fg:x="5671" fg:w="7"/><text x="26.8644%" y="447.50"></text></g><g><title>gb_rs::cpu::CPU::zero_flag (20 samples, 0.09%)</title><rect x="26.6473%" y="437" width="0.0939%" height="15" fill="rgb(252,136,11)" fg:x="5678" fg:w="20"/><text x="26.8973%" y="447.50"></text></g><g><title>&lt;u8 as gb_rs::utils::ByteOP&gt;::get_high_nibble (3 samples, 0.01%)</title><rect x="29.0079%" y="421" width="0.0141%" height="15" fill="rgb(219,138,53)" fg:x="6181" fg:w="3"/><text x="29.2579%" y="431.50"></text></g><g><title>core::cmp::PartialOrd::le (67 samples, 0.31%)</title><rect x="29.0220%" y="421" width="0.3144%" height="15" fill="rgb(211,51,23)" fg:x="6184" fg:w="67"/><text x="29.2720%" y="431.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (48 samples, 0.23%)</title><rect x="29.1111%" y="405" width="0.2253%" height="15" fill="rgb(247,221,28)" fg:x="6203" fg:w="48"/><text x="29.3611%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (48 samples, 0.23%)</title><rect x="29.1111%" y="389" width="0.2253%" height="15" fill="rgb(251,222,45)" fg:x="6203" fg:w="48"/><text x="29.3611%" y="399.50"></text></g><g><title>gb_rs::cpu::OpCode::matches (68 samples, 0.32%)</title><rect x="29.3364%" y="421" width="0.3191%" height="15" fill="rgb(217,162,53)" fg:x="6251" fg:w="68"/><text x="29.5864%" y="431.50"></text></g><g><title>&lt;u8 as gb_rs::utils::ByteOP&gt;::mask (68 samples, 0.32%)</title><rect x="29.3364%" y="405" width="0.3191%" height="15" fill="rgb(229,93,14)" fg:x="6251" fg:w="68"/><text x="29.5864%" y="415.50"></text></g><g><title>&lt;&amp;u8 as core::ops::bit::BitAnd&lt;u8&gt;&gt;::bitand (68 samples, 0.32%)</title><rect x="29.3364%" y="389" width="0.3191%" height="15" fill="rgb(209,67,49)" fg:x="6251" fg:w="68"/><text x="29.5864%" y="399.50"></text></g><g><title>&lt;u8 as core::ops::bit::BitAnd&gt;::bitand (68 samples, 0.32%)</title><rect x="29.3364%" y="373" width="0.3191%" height="15" fill="rgb(213,87,29)" fg:x="6251" fg:w="68"/><text x="29.5864%" y="383.50"></text></g><g><title>gb_rs::cpu::Register16::get_rr (3 samples, 0.01%)</title><rect x="29.6555%" y="421" width="0.0141%" height="15" fill="rgb(205,151,52)" fg:x="6319" fg:w="3"/><text x="29.9055%" y="431.50"></text></g><g><title>gb_rs::cpu::Register::get_r (31 samples, 0.15%)</title><rect x="29.6696%" y="421" width="0.1455%" height="15" fill="rgb(253,215,39)" fg:x="6322" fg:w="31"/><text x="29.9196%" y="431.50"></text></g><g><title>&lt;u8 as gb_rs::utils::ByteOP&gt;::mask (5 samples, 0.02%)</title><rect x="29.7916%" y="405" width="0.0235%" height="15" fill="rgb(221,220,41)" fg:x="6348" fg:w="5"/><text x="30.0416%" y="415.50"></text></g><g><title>&lt;&amp;u8 as core::ops::bit::BitAnd&lt;u8&gt;&gt;::bitand (5 samples, 0.02%)</title><rect x="29.7916%" y="389" width="0.0235%" height="15" fill="rgb(218,133,21)" fg:x="6348" fg:w="5"/><text x="30.0416%" y="399.50"></text></g><g><title>&lt;u8 as core::ops::bit::BitAnd&gt;::bitand (5 samples, 0.02%)</title><rect x="29.7916%" y="373" width="0.0235%" height="15" fill="rgb(221,193,43)" fg:x="6348" fg:w="5"/><text x="30.0416%" y="383.50"></text></g><g><title>gb_rs::cpu::Register::get_rr (26 samples, 0.12%)</title><rect x="29.8151%" y="421" width="0.1220%" height="15" fill="rgb(240,128,52)" fg:x="6353" fg:w="26"/><text x="30.0651%" y="431.50"></text></g><g><title>gb_rs::cpu::Register::get_r (21 samples, 0.10%)</title><rect x="29.8386%" y="405" width="0.0986%" height="15" fill="rgb(253,114,12)" fg:x="6358" fg:w="21"/><text x="30.0886%" y="415.50"></text></g><g><title>gb_rs::cpu::SizedInstruction::decode_cb (30 samples, 0.14%)</title><rect x="29.9371%" y="421" width="0.1408%" height="15" fill="rgb(215,223,47)" fg:x="6379" fg:w="30"/><text x="30.1871%" y="431.50"></text></g><g><title>gb_rs::memory::Memory::read_byte (6 samples, 0.03%)</title><rect x="30.0497%" y="405" width="0.0282%" height="15" fill="rgb(248,225,23)" fg:x="6403" fg:w="6"/><text x="30.2997%" y="415.50"></text></g><g><title>gb_rs::memory::Memory::read_byte (31 samples, 0.15%)</title><rect x="30.0779%" y="421" width="0.1455%" height="15" fill="rgb(250,108,0)" fg:x="6409" fg:w="31"/><text x="30.3279%" y="431.50"></text></g><g><title>gb_rs::memory::Memory::read_word (5 samples, 0.02%)</title><rect x="30.2234%" y="421" width="0.0235%" height="15" fill="rgb(228,208,7)" fg:x="6440" fg:w="5"/><text x="30.4734%" y="431.50"></text></g><g><title>gb_rs::utils::bytes2word (3 samples, 0.01%)</title><rect x="30.2328%" y="405" width="0.0141%" height="15" fill="rgb(244,45,10)" fg:x="6442" fg:w="3"/><text x="30.4828%" y="415.50"></text></g><g><title>&lt;u16 as gb_rs::utils::WordOP&gt;::set_high (3 samples, 0.01%)</title><rect x="30.2328%" y="389" width="0.0141%" height="15" fill="rgb(207,125,25)" fg:x="6442" fg:w="3"/><text x="30.4828%" y="399.50"></text></g><g><title>gb_rs::cpu::SizedInstruction::decode (749 samples, 3.52%)</title><rect x="26.7411%" y="437" width="3.5151%" height="15" fill="rgb(210,195,18)" fg:x="5698" fg:w="749"/><text x="26.9911%" y="447.50">gb_..</text></g><g><title>gb_rs::memory::Memory::read_byte (16 samples, 0.08%)</title><rect x="30.2562%" y="437" width="0.0751%" height="15" fill="rgb(249,80,12)" fg:x="6447" fg:w="16"/><text x="30.5062%" y="447.50"></text></g><g><title>gb_rs::memory::Memory::write_byte (36 samples, 0.17%)</title><rect x="30.3313%" y="437" width="0.1690%" height="15" fill="rgb(221,65,9)" fg:x="6463" fg:w="36"/><text x="30.5813%" y="447.50"></text></g><g><title>gb_rs::memory::Memory::get_cartridge_type (15 samples, 0.07%)</title><rect x="30.4299%" y="421" width="0.0704%" height="15" fill="rgb(235,49,36)" fg:x="6484" fg:w="15"/><text x="30.6799%" y="431.50"></text></g><g><title>gb_rs::utils::bytes2word (24 samples, 0.11%)</title><rect x="30.5003%" y="437" width="0.1126%" height="15" fill="rgb(225,32,20)" fg:x="6499" fg:w="24"/><text x="30.7503%" y="447.50"></text></g><g><title>&lt;u16 as gb_rs::utils::WordOP&gt;::set_high (4 samples, 0.02%)</title><rect x="30.5941%" y="421" width="0.0188%" height="15" fill="rgb(215,141,46)" fg:x="6519" fg:w="4"/><text x="30.8441%" y="431.50"></text></g><g><title>gb_rs::cpu::CPU::execute (2,645 samples, 12.41%)</title><rect x="18.2232%" y="453" width="12.4132%" height="15" fill="rgb(250,160,47)" fg:x="3883" fg:w="2645"/><text x="18.4732%" y="463.50">gb_rs::cpu::CPU::ex..</text></g><g><title>log::max_level (5 samples, 0.02%)</title><rect x="30.6129%" y="437" width="0.0235%" height="15" fill="rgb(216,222,40)" fg:x="6523" fg:w="5"/><text x="30.8629%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (5 samples, 0.02%)</title><rect x="30.6129%" y="421" width="0.0235%" height="15" fill="rgb(234,217,39)" fg:x="6523" fg:w="5"/><text x="30.8629%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (5 samples, 0.02%)</title><rect x="30.6129%" y="405" width="0.0235%" height="15" fill="rgb(207,178,40)" fg:x="6523" fg:w="5"/><text x="30.8629%" y="415.50"></text></g><g><title>gb_rs::memory::Memory::read_byte (3 samples, 0.01%)</title><rect x="31.0494%" y="437" width="0.0141%" height="15" fill="rgb(221,136,13)" fg:x="6616" fg:w="3"/><text x="31.2994%" y="447.50"></text></g><g><title>gb_rs::memory::Memory::write_byte (6 samples, 0.03%)</title><rect x="31.0635%" y="437" width="0.0282%" height="15" fill="rgb(249,199,10)" fg:x="6619" fg:w="6"/><text x="31.3135%" y="447.50"></text></g><g><title>gb_rs::cpu::CPU::handle_interrupts (98 samples, 0.46%)</title><rect x="30.6364%" y="453" width="0.4599%" height="15" fill="rgb(249,222,13)" fg:x="6528" fg:w="98"/><text x="30.8864%" y="463.50"></text></g><g><title>gb_rs::cpu::CPU::ime_step (70 samples, 0.33%)</title><rect x="31.0963%" y="453" width="0.3285%" height="15" fill="rgb(244,185,38)" fg:x="6626" fg:w="70"/><text x="31.3463%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (8 samples, 0.04%)</title><rect x="32.4385%" y="421" width="0.0375%" height="15" fill="rgb(236,202,9)" fg:x="6912" fg:w="8"/><text x="32.6885%" y="431.50"></text></g><g><title>&lt;u8 as gb_rs::utils::ByteOP&gt;::get_high_nibble (16 samples, 0.08%)</title><rect x="35.3341%" y="405" width="0.0751%" height="15" fill="rgb(250,229,37)" fg:x="7529" fg:w="16"/><text x="35.5841%" y="415.50"></text></g><g><title>core::cmp::PartialOrd::le (55 samples, 0.26%)</title><rect x="35.4092%" y="405" width="0.2581%" height="15" fill="rgb(206,174,23)" fg:x="7545" fg:w="55"/><text x="35.6592%" y="415.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (55 samples, 0.26%)</title><rect x="35.4092%" y="389" width="0.2581%" height="15" fill="rgb(211,33,43)" fg:x="7545" fg:w="55"/><text x="35.6592%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (55 samples, 0.26%)</title><rect x="35.4092%" y="373" width="0.2581%" height="15" fill="rgb(245,58,50)" fg:x="7545" fg:w="55"/><text x="35.6592%" y="383.50"></text></g><g><title>gb_rs::cpu::OpCode::matches (43 samples, 0.20%)</title><rect x="35.6674%" y="405" width="0.2018%" height="15" fill="rgb(244,68,36)" fg:x="7600" fg:w="43"/><text x="35.9174%" y="415.50"></text></g><g><title>&lt;u8 as gb_rs::utils::ByteOP&gt;::mask (43 samples, 0.20%)</title><rect x="35.6674%" y="389" width="0.2018%" height="15" fill="rgb(232,229,15)" fg:x="7600" fg:w="43"/><text x="35.9174%" y="399.50"></text></g><g><title>&lt;&amp;u8 as core::ops::bit::BitAnd&lt;u8&gt;&gt;::bitand (43 samples, 0.20%)</title><rect x="35.6674%" y="373" width="0.2018%" height="15" fill="rgb(254,30,23)" fg:x="7600" fg:w="43"/><text x="35.9174%" y="383.50"></text></g><g><title>&lt;u8 as core::ops::bit::BitAnd&gt;::bitand (43 samples, 0.20%)</title><rect x="35.6674%" y="357" width="0.2018%" height="15" fill="rgb(235,160,14)" fg:x="7600" fg:w="43"/><text x="35.9174%" y="367.50"></text></g><g><title>gb_rs::cpu::Register16::get_rr (9 samples, 0.04%)</title><rect x="35.8692%" y="405" width="0.0422%" height="15" fill="rgb(212,155,44)" fg:x="7643" fg:w="9"/><text x="36.1192%" y="415.50"></text></g><g><title>gb_rs::cpu::Register::get_r (41 samples, 0.19%)</title><rect x="35.9114%" y="405" width="0.1924%" height="15" fill="rgb(226,2,50)" fg:x="7652" fg:w="41"/><text x="36.1614%" y="415.50"></text></g><g><title>&lt;u8 as gb_rs::utils::ByteOP&gt;::mask (9 samples, 0.04%)</title><rect x="36.0616%" y="389" width="0.0422%" height="15" fill="rgb(234,177,6)" fg:x="7684" fg:w="9"/><text x="36.3116%" y="399.50"></text></g><g><title>&lt;&amp;u8 as core::ops::bit::BitAnd&lt;u8&gt;&gt;::bitand (9 samples, 0.04%)</title><rect x="36.0616%" y="373" width="0.0422%" height="15" fill="rgb(217,24,9)" fg:x="7684" fg:w="9"/><text x="36.3116%" y="383.50"></text></g><g><title>&lt;u8 as core::ops::bit::BitAnd&gt;::bitand (9 samples, 0.04%)</title><rect x="36.0616%" y="357" width="0.0422%" height="15" fill="rgb(220,13,46)" fg:x="7684" fg:w="9"/><text x="36.3116%" y="367.50"></text></g><g><title>gb_rs::cpu::Register::get_rr (18 samples, 0.08%)</title><rect x="36.1038%" y="405" width="0.0845%" height="15" fill="rgb(239,221,27)" fg:x="7693" fg:w="18"/><text x="36.3538%" y="415.50"></text></g><g><title>gb_rs::cpu::Register::get_r (10 samples, 0.05%)</title><rect x="36.1414%" y="389" width="0.0469%" height="15" fill="rgb(222,198,25)" fg:x="7701" fg:w="10"/><text x="36.3914%" y="399.50"></text></g><g><title>gb_rs::cpu::Register::get_r (4 samples, 0.02%)</title><rect x="36.2728%" y="389" width="0.0188%" height="15" fill="rgb(211,99,13)" fg:x="7729" fg:w="4"/><text x="36.5228%" y="399.50"></text></g><g><title>gb_rs::cpu::SizedInstruction::decode_cb (24 samples, 0.11%)</title><rect x="36.1883%" y="405" width="0.1126%" height="15" fill="rgb(232,111,31)" fg:x="7711" fg:w="24"/><text x="36.4383%" y="415.50"></text></g><g><title>gb_rs::memory::Memory::read_byte (42 samples, 0.20%)</title><rect x="36.3009%" y="405" width="0.1971%" height="15" fill="rgb(245,82,37)" fg:x="7735" fg:w="42"/><text x="36.5509%" y="415.50"></text></g><g><title>gb_rs::memory::Memory::read_word (6 samples, 0.03%)</title><rect x="36.4980%" y="405" width="0.0282%" height="15" fill="rgb(227,149,46)" fg:x="7777" fg:w="6"/><text x="36.7480%" y="415.50"></text></g><g><title>gb_rs::cpu::SizedInstruction::decode (865 samples, 4.06%)</title><rect x="32.4761%" y="421" width="4.0595%" height="15" fill="rgb(218,36,50)" fg:x="6920" fg:w="865"/><text x="32.7261%" y="431.50">gb_r..</text></g><g><title>gb_rs::gb::Debugger::check_pause (1,115 samples, 5.23%)</title><rect x="31.4248%" y="453" width="5.2328%" height="15" fill="rgb(226,80,48)" fg:x="6696" fg:w="1115"/><text x="31.6748%" y="463.50">gb_rs:..</text></g><g><title>gb_rs::gb::Debugger::check_breakpoints (1,045 samples, 4.90%)</title><rect x="31.7533%" y="437" width="4.9043%" height="15" fill="rgb(238,224,15)" fg:x="6766" fg:w="1045"/><text x="32.0033%" y="447.50">gb_rs:..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (26 samples, 0.12%)</title><rect x="36.5356%" y="421" width="0.1220%" height="15" fill="rgb(241,136,10)" fg:x="7785" fg:w="26"/><text x="36.7856%" y="431.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (26 samples, 0.12%)</title><rect x="36.5356%" y="405" width="0.1220%" height="15" fill="rgb(208,32,45)" fg:x="7785" fg:w="26"/><text x="36.7856%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (26 samples, 0.12%)</title><rect x="36.5356%" y="389" width="0.1220%" height="15" fill="rgb(207,135,9)" fg:x="7785" fg:w="26"/><text x="36.7856%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (26 samples, 0.12%)</title><rect x="36.5356%" y="373" width="0.1220%" height="15" fill="rgb(206,86,44)" fg:x="7785" fg:w="26"/><text x="36.7856%" y="383.50"></text></g><g><title>core::cmp::PartialEq::ne (90 samples, 0.42%)</title><rect x="38.1735%" y="437" width="0.4224%" height="15" fill="rgb(245,177,15)" fg:x="8134" fg:w="90"/><text x="38.4235%" y="447.50"></text></g><g><title>&lt;gb_rs::graphics::PPUMode as core::cmp::PartialEq&gt;::eq (79 samples, 0.37%)</title><rect x="38.2251%" y="421" width="0.3708%" height="15" fill="rgb(206,64,50)" fg:x="8145" fg:w="79"/><text x="38.4751%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;gb_rs::graphics::Pixel&gt;&gt; (3 samples, 0.01%)</title><rect x="38.5958%" y="421" width="0.0141%" height="15" fill="rgb(234,36,40)" fg:x="8224" fg:w="3"/><text x="38.8458%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;gb_rs::graphics::Pixel&gt;&gt; (3 samples, 0.01%)</title><rect x="38.5958%" y="405" width="0.0141%" height="15" fill="rgb(213,64,8)" fg:x="8224" fg:w="3"/><text x="38.8458%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="38.5958%" y="389" width="0.0141%" height="15" fill="rgb(210,75,36)" fg:x="8224" fg:w="3"/><text x="38.8458%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.01%)</title><rect x="38.5958%" y="373" width="0.0141%" height="15" fill="rgb(229,88,21)" fg:x="8224" fg:w="3"/><text x="38.8458%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.01%)</title><rect x="38.5958%" y="357" width="0.0141%" height="15" fill="rgb(252,204,47)" fg:x="8224" fg:w="3"/><text x="38.8458%" y="367.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (6 samples, 0.03%)</title><rect x="38.6146%" y="261" width="0.0282%" height="15" fill="rgb(208,77,27)" fg:x="8228" fg:w="6"/><text x="38.8646%" y="271.50"></text></g><g><title>malloc_consolidate (6 samples, 0.03%)</title><rect x="38.6146%" y="245" width="0.0282%" height="15" fill="rgb(221,76,26)" fg:x="8228" fg:w="6"/><text x="38.8646%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;gb_rs::graphics::BgFIFO&gt; (17 samples, 0.08%)</title><rect x="38.5958%" y="437" width="0.0798%" height="15" fill="rgb(225,139,18)" fg:x="8224" fg:w="17"/><text x="38.8458%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;gb_rs::graphics::TilePos,gb_rs::graphics::Tile&gt;&gt; (14 samples, 0.07%)</title><rect x="38.6099%" y="421" width="0.0657%" height="15" fill="rgb(230,137,11)" fg:x="8227" fg:w="14"/><text x="38.8599%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;gb_rs::graphics::TilePos,gb_rs::graphics::Tile,std::hash::random::RandomState&gt;&gt; (14 samples, 0.07%)</title><rect x="38.6099%" y="405" width="0.0657%" height="15" fill="rgb(212,28,1)" fg:x="8227" fg:w="14"/><text x="38.8599%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(gb_rs::graphics::TilePos,gb_rs::graphics::Tile)&gt;&gt; (14 samples, 0.07%)</title><rect x="38.6099%" y="389" width="0.0657%" height="15" fill="rgb(248,164,17)" fg:x="8227" fg:w="14"/><text x="38.8599%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.07%)</title><rect x="38.6099%" y="373" width="0.0657%" height="15" fill="rgb(222,171,42)" fg:x="8227" fg:w="14"/><text x="38.8599%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (14 samples, 0.07%)</title><rect x="38.6099%" y="357" width="0.0657%" height="15" fill="rgb(243,84,45)" fg:x="8227" fg:w="14"/><text x="38.8599%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (14 samples, 0.07%)</title><rect x="38.6099%" y="341" width="0.0657%" height="15" fill="rgb(252,49,23)" fg:x="8227" fg:w="14"/><text x="38.8599%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.07%)</title><rect x="38.6099%" y="325" width="0.0657%" height="15" fill="rgb(215,19,7)" fg:x="8227" fg:w="14"/><text x="38.8599%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.07%)</title><rect x="38.6099%" y="309" width="0.0657%" height="15" fill="rgb(238,81,41)" fg:x="8227" fg:w="14"/><text x="38.8599%" y="319.50"></text></g><g><title>__free (14 samples, 0.07%)</title><rect x="38.6099%" y="293" width="0.0657%" height="15" fill="rgb(210,199,37)" fg:x="8227" fg:w="14"/><text x="38.8599%" y="303.50"></text></g><g><title>_int_free (14 samples, 0.07%)</title><rect x="38.6099%" y="277" width="0.0657%" height="15" fill="rgb(244,192,49)" fg:x="8227" fg:w="14"/><text x="38.8599%" y="287.50"></text></g><g><title>systrim.constprop.0 (6 samples, 0.03%)</title><rect x="38.6475%" y="261" width="0.0282%" height="15" fill="rgb(226,211,11)" fg:x="8235" fg:w="6"/><text x="38.8975%" y="271.50"></text></g><g><title>__glibc_morecore (5 samples, 0.02%)</title><rect x="38.6521%" y="245" width="0.0235%" height="15" fill="rgb(236,162,54)" fg:x="8236" fg:w="5"/><text x="38.9021%" y="255.50"></text></g><g><title>__GI___sbrk (5 samples, 0.02%)</title><rect x="38.6521%" y="229" width="0.0235%" height="15" fill="rgb(220,229,9)" fg:x="8236" fg:w="5"/><text x="38.9021%" y="239.50"></text></g><g><title>__brk (3 samples, 0.01%)</title><rect x="38.6615%" y="213" width="0.0141%" height="15" fill="rgb(250,87,22)" fg:x="8238" fg:w="3"/><text x="38.9115%" y="223.50"></text></g><g><title>_mesa_make_texture_handles_non_resident (3 samples, 0.01%)</title><rect x="38.7601%" y="357" width="0.0141%" height="15" fill="rgb(239,43,17)" fg:x="8259" fg:w="3"/><text x="39.0101%" y="367.50"></text></g><g><title>mtx_lock (3 samples, 0.01%)</title><rect x="38.7601%" y="341" width="0.0141%" height="15" fill="rgb(231,177,25)" fg:x="8259" fg:w="3"/><text x="39.0101%" y="351.50"></text></g><g><title>GL_DestroyTexture (19 samples, 0.09%)</title><rect x="38.6944%" y="389" width="0.0892%" height="15" fill="rgb(219,179,1)" fg:x="8245" fg:w="19"/><text x="38.9444%" y="399.50"></text></g><g><title>delete_textures.part.0 (14 samples, 0.07%)</title><rect x="38.7179%" y="373" width="0.0657%" height="15" fill="rgb(238,219,53)" fg:x="8250" fg:w="14"/><text x="38.9679%" y="383.50"></text></g><g><title>SDL_DestroyTexture_REAL.part.0 (21 samples, 0.10%)</title><rect x="38.6944%" y="405" width="0.0986%" height="15" fill="rgb(232,167,36)" fg:x="8245" fg:w="21"/><text x="38.9444%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;sdl2::render::Texture&gt; (25 samples, 0.12%)</title><rect x="38.6850%" y="437" width="0.1173%" height="15" fill="rgb(244,19,51)" fg:x="8243" fg:w="25"/><text x="38.9350%" y="447.50"></text></g><g><title>SDL_DestroyTexture_REAL.part.0 (23 samples, 0.11%)</title><rect x="38.6944%" y="421" width="0.1079%" height="15" fill="rgb(224,6,22)" fg:x="8245" fg:w="23"/><text x="38.9444%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (49 samples, 0.23%)</title><rect x="43.6033%" y="341" width="0.2300%" height="15" fill="rgb(224,145,5)" fg:x="9291" fg:w="49"/><text x="43.8533%" y="351.50"></text></g><g><title>__memcpy_avx_unaligned_erms (49 samples, 0.23%)</title><rect x="43.6033%" y="325" width="0.2300%" height="15" fill="rgb(234,130,49)" fg:x="9291" fg:w="49"/><text x="43.8533%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::copy_slice (50 samples, 0.23%)</title><rect x="43.6033%" y="357" width="0.2347%" height="15" fill="rgb(254,6,2)" fg:x="9291" fg:w="50"/><text x="43.8533%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.01%)</title><rect x="43.8521%" y="277" width="0.0141%" height="15" fill="rgb(208,96,46)" fg:x="9344" fg:w="3"/><text x="44.1021%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.01%)</title><rect x="43.8521%" y="261" width="0.0141%" height="15" fill="rgb(239,3,39)" fg:x="9344" fg:w="3"/><text x="44.1021%" y="271.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.01%)</title><rect x="43.8521%" y="245" width="0.0141%" height="15" fill="rgb(233,210,1)" fg:x="9344" fg:w="3"/><text x="44.1021%" y="255.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::reserve (7 samples, 0.03%)</title><rect x="43.8380%" y="357" width="0.0329%" height="15" fill="rgb(244,137,37)" fg:x="9341" fg:w="7"/><text x="44.0880%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.02%)</title><rect x="43.8474%" y="341" width="0.0235%" height="15" fill="rgb(240,136,2)" fg:x="9343" fg:w="5"/><text x="44.0974%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.02%)</title><rect x="43.8521%" y="325" width="0.0188%" height="15" fill="rgb(239,18,37)" fg:x="9344" fg:w="4"/><text x="44.1021%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.02%)</title><rect x="43.8521%" y="309" width="0.0188%" height="15" fill="rgb(218,185,22)" fg:x="9344" fg:w="4"/><text x="44.1021%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.02%)</title><rect x="43.8521%" y="293" width="0.0188%" height="15" fill="rgb(225,218,4)" fg:x="9344" fg:w="4"/><text x="44.1021%" y="303.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as alloc::collections::vec_deque::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (62 samples, 0.29%)</title><rect x="43.5940%" y="373" width="0.2910%" height="15" fill="rgb(230,182,32)" fg:x="9289" fg:w="62"/><text x="43.8440%" y="383.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (63 samples, 0.30%)</title><rect x="43.5940%" y="389" width="0.2957%" height="15" fill="rgb(242,56,43)" fg:x="9289" fg:w="63"/><text x="43.8440%" y="399.50"></text></g><g><title>__memcpy_avx_unaligned_erms (9 samples, 0.04%)</title><rect x="44.1384%" y="373" width="0.0422%" height="15" fill="rgb(233,99,24)" fg:x="9405" fg:w="9"/><text x="44.3884%" y="383.50"></text></g><g><title>gb_rs::graphics::Tile::fetch_tile (66 samples, 0.31%)</title><rect x="43.8943%" y="389" width="0.3097%" height="15" fill="rgb(234,209,42)" fg:x="9353" fg:w="66"/><text x="44.1443%" y="399.50"></text></g><g><title>gb_rs::memory::Memory::read_byte (5 samples, 0.02%)</title><rect x="44.1806%" y="373" width="0.0235%" height="15" fill="rgb(227,7,12)" fg:x="9414" fg:w="5"/><text x="44.4306%" y="383.50"></text></g><g><title>gb_rs::memory::Memory::read_byte (6 samples, 0.03%)</title><rect x="44.2041%" y="389" width="0.0282%" height="15" fill="rgb(245,203,43)" fg:x="9419" fg:w="6"/><text x="44.4541%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7 samples, 0.03%)</title><rect x="44.2463%" y="261" width="0.0329%" height="15" fill="rgb(238,205,33)" fg:x="9428" fg:w="7"/><text x="44.4963%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (6 samples, 0.03%)</title><rect x="44.2510%" y="245" width="0.0282%" height="15" fill="rgb(231,56,7)" fg:x="9429" fg:w="6"/><text x="44.5010%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.01%)</title><rect x="44.3073%" y="245" width="0.0141%" height="15" fill="rgb(244,186,29)" fg:x="9441" fg:w="3"/><text x="44.5573%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (19 samples, 0.09%)</title><rect x="44.2463%" y="309" width="0.0892%" height="15" fill="rgb(234,111,31)" fg:x="9428" fg:w="19"/><text x="44.4963%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (19 samples, 0.09%)</title><rect x="44.2463%" y="293" width="0.0892%" height="15" fill="rgb(241,149,10)" fg:x="9428" fg:w="19"/><text x="44.4963%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (19 samples, 0.09%)</title><rect x="44.2463%" y="277" width="0.0892%" height="15" fill="rgb(249,206,44)" fg:x="9428" fg:w="19"/><text x="44.4963%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (12 samples, 0.06%)</title><rect x="44.2791%" y="261" width="0.0563%" height="15" fill="rgb(251,153,30)" fg:x="9435" fg:w="12"/><text x="44.5291%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.01%)</title><rect x="44.3214%" y="245" width="0.0141%" height="15" fill="rgb(239,152,38)" fg:x="9444" fg:w="3"/><text x="44.5714%" y="255.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.01%)</title><rect x="44.3355%" y="309" width="0.0141%" height="15" fill="rgb(249,139,47)" fg:x="9447" fg:w="3"/><text x="44.5855%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (7 samples, 0.03%)</title><rect x="44.4340%" y="181" width="0.0329%" height="15" fill="rgb(244,64,35)" fg:x="9468" fg:w="7"/><text x="44.6840%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (11 samples, 0.05%)</title><rect x="44.4199%" y="197" width="0.0516%" height="15" fill="rgb(216,46,15)" fg:x="9465" fg:w="11"/><text x="44.6699%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (28 samples, 0.13%)</title><rect x="44.3589%" y="245" width="0.1314%" height="15" fill="rgb(250,74,19)" fg:x="9452" fg:w="28"/><text x="44.6089%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (28 samples, 0.13%)</title><rect x="44.3589%" y="229" width="0.1314%" height="15" fill="rgb(249,42,33)" fg:x="9452" fg:w="28"/><text x="44.6089%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (28 samples, 0.13%)</title><rect x="44.3589%" y="213" width="0.1314%" height="15" fill="rgb(242,149,17)" fg:x="9452" fg:w="28"/><text x="44.6089%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (4 samples, 0.02%)</title><rect x="44.4716%" y="197" width="0.0188%" height="15" fill="rgb(244,29,21)" fg:x="9476" fg:w="4"/><text x="44.7216%" y="207.50"></text></g><g><title>hashbrown::map::make_hash (54 samples, 0.25%)</title><rect x="44.2416%" y="341" width="0.2534%" height="15" fill="rgb(220,130,37)" fg:x="9427" fg:w="54"/><text x="44.4916%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (54 samples, 0.25%)</title><rect x="44.2416%" y="325" width="0.2534%" height="15" fill="rgb(211,67,2)" fg:x="9427" fg:w="54"/><text x="44.4916%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (31 samples, 0.15%)</title><rect x="44.3495%" y="309" width="0.1455%" height="15" fill="rgb(235,68,52)" fg:x="9450" fg:w="31"/><text x="44.5995%" y="319.50"></text></g><g><title>&lt;gb_rs::graphics::TilePos as core::hash::Hash&gt;::hash (30 samples, 0.14%)</title><rect x="44.3542%" y="293" width="0.1408%" height="15" fill="rgb(246,142,3)" fg:x="9451" fg:w="30"/><text x="44.6042%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (30 samples, 0.14%)</title><rect x="44.3542%" y="277" width="0.1408%" height="15" fill="rgb(241,25,7)" fg:x="9451" fg:w="30"/><text x="44.6042%" y="287.50"></text></g><g><title>core::hash::Hasher::write_usize (30 samples, 0.14%)</title><rect x="44.3542%" y="261" width="0.1408%" height="15" fill="rgb(242,119,39)" fg:x="9451" fg:w="30"/><text x="44.6042%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.04%)</title><rect x="44.5279%" y="293" width="0.0422%" height="15" fill="rgb(241,98,45)" fg:x="9488" fg:w="9"/><text x="44.7779%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (8 samples, 0.04%)</title><rect x="44.5326%" y="277" width="0.0375%" height="15" fill="rgb(254,28,30)" fg:x="9489" fg:w="8"/><text x="44.7826%" y="287.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (22 samples, 0.10%)</title><rect x="44.5748%" y="277" width="0.1032%" height="15" fill="rgb(241,142,54)" fg:x="9498" fg:w="22"/><text x="44.8248%" y="287.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (22 samples, 0.10%)</title><rect x="44.5748%" y="261" width="0.1032%" height="15" fill="rgb(222,85,15)" fg:x="9498" fg:w="22"/><text x="44.8248%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (22 samples, 0.10%)</title><rect x="44.5748%" y="245" width="0.1032%" height="15" fill="rgb(210,85,47)" fg:x="9498" fg:w="22"/><text x="44.8248%" y="255.50"></text></g><g><title>&lt;gb_rs::graphics::TilePos as core::cmp::PartialEq&gt;::eq (22 samples, 0.10%)</title><rect x="44.5748%" y="229" width="0.1032%" height="15" fill="rgb(224,206,25)" fg:x="9498" fg:w="22"/><text x="44.8248%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (24 samples, 0.11%)</title><rect x="44.5748%" y="293" width="0.1126%" height="15" fill="rgb(243,201,19)" fg:x="9498" fg:w="24"/><text x="44.8248%" y="303.50"></text></g><g><title>hashbrown::raw::h2 (6 samples, 0.03%)</title><rect x="44.6874%" y="293" width="0.0282%" height="15" fill="rgb(236,59,4)" fg:x="9522" fg:w="6"/><text x="44.9374%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (3 samples, 0.01%)</title><rect x="44.7156%" y="293" width="0.0141%" height="15" fill="rgb(254,179,45)" fg:x="9528" fg:w="3"/><text x="44.9656%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (3 samples, 0.01%)</title><rect x="44.7156%" y="277" width="0.0141%" height="15" fill="rgb(226,14,10)" fg:x="9528" fg:w="3"/><text x="44.9656%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="44.7156%" y="261" width="0.0141%" height="15" fill="rgb(244,27,41)" fg:x="9528" fg:w="3"/><text x="44.9656%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (6 samples, 0.03%)</title><rect x="44.7297%" y="293" width="0.0282%" height="15" fill="rgb(235,35,32)" fg:x="9531" fg:w="6"/><text x="44.9797%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (6 samples, 0.03%)</title><rect x="44.7297%" y="277" width="0.0282%" height="15" fill="rgb(218,68,31)" fg:x="9531" fg:w="6"/><text x="44.9797%" y="287.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (115 samples, 0.54%)</title><rect x="44.2322%" y="389" width="0.5397%" height="15" fill="rgb(207,120,37)" fg:x="9425" fg:w="115"/><text x="44.4822%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (115 samples, 0.54%)</title><rect x="44.2322%" y="373" width="0.5397%" height="15" fill="rgb(227,98,0)" fg:x="9425" fg:w="115"/><text x="44.4822%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (115 samples, 0.54%)</title><rect x="44.2322%" y="357" width="0.5397%" height="15" fill="rgb(207,7,3)" fg:x="9425" fg:w="115"/><text x="44.4822%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (59 samples, 0.28%)</title><rect x="44.4950%" y="341" width="0.2769%" height="15" fill="rgb(206,98,19)" fg:x="9481" fg:w="59"/><text x="44.7450%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (59 samples, 0.28%)</title><rect x="44.4950%" y="325" width="0.2769%" height="15" fill="rgb(217,5,26)" fg:x="9481" fg:w="59"/><text x="44.7450%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (59 samples, 0.28%)</title><rect x="44.4950%" y="309" width="0.2769%" height="15" fill="rgb(235,190,38)" fg:x="9481" fg:w="59"/><text x="44.7450%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (3 samples, 0.01%)</title><rect x="44.7578%" y="293" width="0.0141%" height="15" fill="rgb(247,86,24)" fg:x="9537" fg:w="3"/><text x="45.0078%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.01%)</title><rect x="44.7578%" y="277" width="0.0141%" height="15" fill="rgb(205,101,16)" fg:x="9537" fg:w="3"/><text x="45.0078%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.01%)</title><rect x="44.7578%" y="261" width="0.0141%" height="15" fill="rgb(246,168,33)" fg:x="9537" fg:w="3"/><text x="45.0078%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.01%)</title><rect x="44.7719%" y="325" width="0.0141%" height="15" fill="rgb(231,114,1)" fg:x="9540" fg:w="3"/><text x="45.0219%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.01%)</title><rect x="44.7719%" y="309" width="0.0141%" height="15" fill="rgb(207,184,53)" fg:x="9540" fg:w="3"/><text x="45.0219%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.01%)</title><rect x="44.7719%" y="293" width="0.0141%" height="15" fill="rgb(224,95,51)" fg:x="9540" fg:w="3"/><text x="45.0219%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (7 samples, 0.03%)</title><rect x="44.7719%" y="357" width="0.0329%" height="15" fill="rgb(212,188,45)" fg:x="9540" fg:w="7"/><text x="45.0219%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.03%)</title><rect x="44.7719%" y="341" width="0.0329%" height="15" fill="rgb(223,154,38)" fg:x="9540" fg:w="7"/><text x="45.0219%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.01%)</title><rect x="44.7907%" y="325" width="0.0141%" height="15" fill="rgb(251,22,52)" fg:x="9544" fg:w="3"/><text x="45.0407%" y="335.50"></text></g><g><title>&lt;gb_rs::graphics::TilePos as core::hash::Hash&gt;::hash (3 samples, 0.01%)</title><rect x="44.7907%" y="309" width="0.0141%" height="15" fill="rgb(229,209,22)" fg:x="9544" fg:w="3"/><text x="45.0407%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (3 samples, 0.01%)</title><rect x="44.7907%" y="293" width="0.0141%" height="15" fill="rgb(234,138,34)" fg:x="9544" fg:w="3"/><text x="45.0407%" y="303.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.01%)</title><rect x="44.7907%" y="277" width="0.0141%" height="15" fill="rgb(212,95,11)" fg:x="9544" fg:w="3"/><text x="45.0407%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="44.7907%" y="261" width="0.0141%" height="15" fill="rgb(240,179,47)" fg:x="9544" fg:w="3"/><text x="45.0407%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="44.7907%" y="245" width="0.0141%" height="15" fill="rgb(240,163,11)" fg:x="9544" fg:w="3"/><text x="45.0407%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="44.7907%" y="229" width="0.0141%" height="15" fill="rgb(236,37,12)" fg:x="9544" fg:w="3"/><text x="45.0407%" y="239.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.02%)</title><rect x="44.8142%" y="165" width="0.0188%" height="15" fill="rgb(232,164,16)" fg:x="9549" fg:w="4"/><text x="45.0642%" y="175.50"></text></g><g><title>_int_malloc (4 samples, 0.02%)</title><rect x="44.8142%" y="149" width="0.0188%" height="15" fill="rgb(244,205,15)" fg:x="9549" fg:w="4"/><text x="45.0642%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (6 samples, 0.03%)</title><rect x="44.8095%" y="341" width="0.0282%" height="15" fill="rgb(223,117,47)" fg:x="9548" fg:w="6"/><text x="45.0595%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.03%)</title><rect x="44.8095%" y="325" width="0.0282%" height="15" fill="rgb(244,107,35)" fg:x="9548" fg:w="6"/><text x="45.0595%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (6 samples, 0.03%)</title><rect x="44.8095%" y="309" width="0.0282%" height="15" fill="rgb(205,140,8)" fg:x="9548" fg:w="6"/><text x="45.0595%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (6 samples, 0.03%)</title><rect x="44.8095%" y="293" width="0.0282%" height="15" fill="rgb(228,84,46)" fg:x="9548" fg:w="6"/><text x="45.0595%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (6 samples, 0.03%)</title><rect x="44.8095%" y="277" width="0.0282%" height="15" fill="rgb(254,188,9)" fg:x="9548" fg:w="6"/><text x="45.0595%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (6 samples, 0.03%)</title><rect x="44.8095%" y="261" width="0.0282%" height="15" fill="rgb(206,112,54)" fg:x="9548" fg:w="6"/><text x="45.0595%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (5 samples, 0.02%)</title><rect x="44.8142%" y="245" width="0.0235%" height="15" fill="rgb(216,84,49)" fg:x="9549" fg:w="5"/><text x="45.0642%" y="255.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (5 samples, 0.02%)</title><rect x="44.8142%" y="229" width="0.0235%" height="15" fill="rgb(214,194,35)" fg:x="9549" fg:w="5"/><text x="45.0642%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.02%)</title><rect x="44.8142%" y="213" width="0.0235%" height="15" fill="rgb(249,28,3)" fg:x="9549" fg:w="5"/><text x="45.0642%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.02%)</title><rect x="44.8142%" y="197" width="0.0235%" height="15" fill="rgb(222,56,52)" fg:x="9549" fg:w="5"/><text x="45.0642%" y="207.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.02%)</title><rect x="44.8142%" y="181" width="0.0235%" height="15" fill="rgb(245,217,50)" fg:x="9549" fg:w="5"/><text x="45.0642%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (9 samples, 0.04%)</title><rect x="44.8095%" y="357" width="0.0422%" height="15" fill="rgb(213,201,24)" fg:x="9548" fg:w="9"/><text x="45.0595%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (3 samples, 0.01%)</title><rect x="44.8376%" y="341" width="0.0141%" height="15" fill="rgb(248,116,28)" fg:x="9554" fg:w="3"/><text x="45.0876%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (27 samples, 0.13%)</title><rect x="44.8517%" y="341" width="0.1267%" height="15" fill="rgb(219,72,43)" fg:x="9557" fg:w="27"/><text x="45.1017%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (27 samples, 0.13%)</title><rect x="44.8517%" y="325" width="0.1267%" height="15" fill="rgb(209,138,14)" fg:x="9557" fg:w="27"/><text x="45.1017%" y="335.50"></text></g><g><title>core::ptr::write (27 samples, 0.13%)</title><rect x="44.8517%" y="309" width="0.1267%" height="15" fill="rgb(222,18,33)" fg:x="9557" fg:w="27"/><text x="45.1017%" y="319.50"></text></g><g><title>__memcpy_avx_unaligned_erms (10 samples, 0.05%)</title><rect x="44.9315%" y="293" width="0.0469%" height="15" fill="rgb(213,199,7)" fg:x="9574" fg:w="10"/><text x="45.1815%" y="303.50"></text></g><g><title>gb_rs::graphics::BgFIFO::fetch (305 samples, 1.43%)</title><rect x="43.5517%" y="405" width="1.4314%" height="15" fill="rgb(250,110,10)" fg:x="9280" fg:w="305"/><text x="43.8017%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (45 samples, 0.21%)</title><rect x="44.7719%" y="389" width="0.2112%" height="15" fill="rgb(248,123,6)" fg:x="9540" fg:w="45"/><text x="45.0219%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (45 samples, 0.21%)</title><rect x="44.7719%" y="373" width="0.2112%" height="15" fill="rgb(206,91,31)" fg:x="9540" fg:w="45"/><text x="45.0219%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (28 samples, 0.13%)</title><rect x="44.8517%" y="357" width="0.1314%" height="15" fill="rgb(211,154,13)" fg:x="9557" fg:w="28"/><text x="45.1017%" y="367.50"></text></g><g><title>&lt;gb_rs::graphics::BgFIFO as gb_rs::graphics::FIFO&gt;::next_line (318 samples, 1.49%)</title><rect x="43.4954%" y="421" width="1.4924%" height="15" fill="rgb(225,148,7)" fg:x="9268" fg:w="318"/><text x="43.7454%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::ptr (38 samples, 0.18%)</title><rect x="47.2546%" y="373" width="0.1783%" height="15" fill="rgb(220,160,43)" fg:x="10069" fg:w="38"/><text x="47.5046%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (38 samples, 0.18%)</title><rect x="47.2546%" y="357" width="0.1783%" height="15" fill="rgb(213,52,39)" fg:x="10069" fg:w="38"/><text x="47.5046%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (5 samples, 0.02%)</title><rect x="47.4329%" y="373" width="0.0235%" height="15" fill="rgb(243,137,7)" fg:x="10107" fg:w="5"/><text x="47.6829%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (82 samples, 0.38%)</title><rect x="47.2546%" y="389" width="0.3848%" height="15" fill="rgb(230,79,13)" fg:x="10069" fg:w="82"/><text x="47.5046%" y="399.50"></text></g><g><title>core::ptr::read (39 samples, 0.18%)</title><rect x="47.4564%" y="373" width="0.1830%" height="15" fill="rgb(247,105,23)" fg:x="10112" fg:w="39"/><text x="47.7064%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_empty (40 samples, 0.19%)</title><rect x="47.6394%" y="389" width="0.1877%" height="15" fill="rgb(223,179,41)" fg:x="10151" fg:w="40"/><text x="47.8894%" y="399.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (99 samples, 0.46%)</title><rect x="47.8271%" y="357" width="0.4646%" height="15" fill="rgb(218,9,34)" fg:x="10191" fg:w="99"/><text x="48.0771%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (397 samples, 1.86%)</title><rect x="46.5084%" y="405" width="1.8631%" height="15" fill="rgb(222,106,8)" fg:x="9910" fg:w="397"/><text x="46.7584%" y="415.50">a..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (116 samples, 0.54%)</title><rect x="47.8271%" y="389" width="0.5444%" height="15" fill="rgb(211,220,0)" fg:x="10191" fg:w="116"/><text x="48.0771%" y="399.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (116 samples, 0.54%)</title><rect x="47.8271%" y="373" width="0.5444%" height="15" fill="rgb(229,52,16)" fg:x="10191" fg:w="116"/><text x="48.0771%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (17 samples, 0.08%)</title><rect x="48.2917%" y="357" width="0.0798%" height="15" fill="rgb(212,155,18)" fg:x="10290" fg:w="17"/><text x="48.5417%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (81 samples, 0.38%)</title><rect x="48.3715%" y="405" width="0.3801%" height="15" fill="rgb(242,21,14)" fg:x="10307" fg:w="81"/><text x="48.6215%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (241 samples, 1.13%)</title><rect x="50.0516%" y="341" width="1.1310%" height="15" fill="rgb(222,19,48)" fg:x="10665" fg:w="241"/><text x="50.3016%" y="351.50"></text></g><g><title>__memcpy_avx_unaligned_erms (234 samples, 1.10%)</title><rect x="50.0845%" y="325" width="1.0982%" height="15" fill="rgb(232,45,27)" fg:x="10672" fg:w="234"/><text x="50.3345%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (19 samples, 0.09%)</title><rect x="51.1827%" y="341" width="0.0892%" height="15" fill="rgb(249,103,42)" fg:x="10906" fg:w="19"/><text x="51.4327%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::copy_slice (289 samples, 1.36%)</title><rect x="50.0000%" y="357" width="1.3563%" height="15" fill="rgb(246,81,33)" fg:x="10654" fg:w="289"/><text x="50.2500%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (18 samples, 0.08%)</title><rect x="51.2718%" y="341" width="0.0845%" height="15" fill="rgb(252,33,42)" fg:x="10925" fg:w="18"/><text x="51.5218%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (18 samples, 0.08%)</title><rect x="51.2718%" y="325" width="0.0845%" height="15" fill="rgb(209,212,41)" fg:x="10925" fg:w="18"/><text x="51.5218%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (18 samples, 0.08%)</title><rect x="51.2718%" y="309" width="0.0845%" height="15" fill="rgb(207,154,6)" fg:x="10925" fg:w="18"/><text x="51.5218%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::reserve (24 samples, 0.11%)</title><rect x="51.3563%" y="357" width="0.1126%" height="15" fill="rgb(223,64,47)" fg:x="10943" fg:w="24"/><text x="51.6063%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (12 samples, 0.06%)</title><rect x="51.4689%" y="325" width="0.0563%" height="15" fill="rgb(211,161,38)" fg:x="10967" fg:w="12"/><text x="51.7189%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (13 samples, 0.06%)</title><rect x="51.4689%" y="357" width="0.0610%" height="15" fill="rgb(219,138,40)" fg:x="10967" fg:w="13"/><text x="51.7189%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (13 samples, 0.06%)</title><rect x="51.4689%" y="341" width="0.0610%" height="15" fill="rgb(241,228,46)" fg:x="10967" fg:w="13"/><text x="51.7189%" y="351.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as alloc::collections::vec_deque::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (373 samples, 1.75%)</title><rect x="49.8968%" y="373" width="1.7505%" height="15" fill="rgb(223,209,38)" fg:x="10632" fg:w="373"/><text x="50.1468%" y="383.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (25 samples, 0.12%)</title><rect x="51.5299%" y="357" width="0.1173%" height="15" fill="rgb(236,164,45)" fg:x="10980" fg:w="25"/><text x="51.7799%" y="367.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::make_slice (25 samples, 0.12%)</title><rect x="51.5299%" y="341" width="0.1173%" height="15" fill="rgb(231,15,5)" fg:x="10980" fg:w="25"/><text x="51.7799%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr (25 samples, 0.12%)</title><rect x="51.5299%" y="325" width="0.1173%" height="15" fill="rgb(252,35,15)" fg:x="10980" fg:w="25"/><text x="51.7799%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (25 samples, 0.12%)</title><rect x="51.5299%" y="309" width="0.1173%" height="15" fill="rgb(248,181,18)" fg:x="10980" fg:w="25"/><text x="51.7799%" y="319.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (376 samples, 1.76%)</title><rect x="49.8968%" y="389" width="1.7646%" height="15" fill="rgb(233,39,42)" fg:x="10632" fg:w="376"/><text x="50.1468%" y="399.50"></text></g><g><title>core::slice::iter::&lt;impl core::iter::traits::collect::IntoIterator for &amp;[T]&gt;::into_iter (3 samples, 0.01%)</title><rect x="51.6473%" y="373" width="0.0141%" height="15" fill="rgb(238,110,33)" fg:x="11005" fg:w="3"/><text x="51.8973%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (3 samples, 0.01%)</title><rect x="51.6473%" y="357" width="0.0141%" height="15" fill="rgb(233,195,10)" fg:x="11005" fg:w="3"/><text x="51.8973%" y="367.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (3 samples, 0.01%)</title><rect x="51.6473%" y="341" width="0.0141%" height="15" fill="rgb(254,105,3)" fg:x="11005" fg:w="3"/><text x="51.8973%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (3 samples, 0.01%)</title><rect x="51.6473%" y="325" width="0.0141%" height="15" fill="rgb(221,225,9)" fg:x="11005" fg:w="3"/><text x="51.8973%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::len (12 samples, 0.06%)</title><rect x="51.6613%" y="389" width="0.0563%" height="15" fill="rgb(224,227,45)" fg:x="11008" fg:w="12"/><text x="51.9113%" y="399.50"></text></g><g><title>gb_rs::graphics::PixelPos::to_tile (21 samples, 0.10%)</title><rect x="51.7177%" y="389" width="0.0986%" height="15" fill="rgb(229,198,43)" fg:x="11020" fg:w="21"/><text x="51.9677%" y="399.50"></text></g><g><title>__memcpy_avx_unaligned_erms (81 samples, 0.38%)</title><rect x="54.5054%" y="373" width="0.3801%" height="15" fill="rgb(206,209,35)" fg:x="11614" fg:w="81"/><text x="54.7554%" y="383.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3 samples, 0.01%)</title><rect x="54.8855%" y="373" width="0.0141%" height="15" fill="rgb(245,195,53)" fg:x="11695" fg:w="3"/><text x="55.1355%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3 samples, 0.01%)</title><rect x="54.8855%" y="357" width="0.0141%" height="15" fill="rgb(240,92,26)" fg:x="11695" fg:w="3"/><text x="55.1355%" y="367.50"></text></g><g><title>gb_rs::graphics::Tile::fetch_tile (686 samples, 3.22%)</title><rect x="51.8162%" y="389" width="3.2194%" height="15" fill="rgb(207,40,23)" fg:x="11041" fg:w="686"/><text x="52.0662%" y="399.50">gb_..</text></g><g><title>gb_rs::memory::Memory::read_byte (29 samples, 0.14%)</title><rect x="54.8996%" y="373" width="0.1361%" height="15" fill="rgb(223,111,35)" fg:x="11698" fg:w="29"/><text x="55.1496%" y="383.50"></text></g><g><title>gb_rs::graphics::Tile::get_range (13 samples, 0.06%)</title><rect x="55.0357%" y="389" width="0.0610%" height="15" fill="rgb(229,147,28)" fg:x="11727" fg:w="13"/><text x="55.2857%" y="399.50"></text></g><g><title>core::array::&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (6 samples, 0.03%)</title><rect x="55.0685%" y="373" width="0.0282%" height="15" fill="rgb(211,29,28)" fg:x="11734" fg:w="6"/><text x="55.3185%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6 samples, 0.03%)</title><rect x="55.0685%" y="357" width="0.0282%" height="15" fill="rgb(228,72,33)" fg:x="11734" fg:w="6"/><text x="55.3185%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.03%)</title><rect x="55.0685%" y="341" width="0.0282%" height="15" fill="rgb(205,214,31)" fg:x="11734" fg:w="6"/><text x="55.3185%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (6 samples, 0.03%)</title><rect x="55.0685%" y="325" width="0.0282%" height="15" fill="rgb(224,111,15)" fg:x="11734" fg:w="6"/><text x="55.3185%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (6 samples, 0.03%)</title><rect x="55.0685%" y="309" width="0.0282%" height="15" fill="rgb(253,21,26)" fg:x="11734" fg:w="6"/><text x="55.3185%" y="319.50"></text></g><g><title>gb_rs::memory::Memory::read_byte (123 samples, 0.58%)</title><rect x="55.0967%" y="389" width="0.5772%" height="15" fill="rgb(245,139,43)" fg:x="11740" fg:w="123"/><text x="55.3467%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (26 samples, 0.12%)</title><rect x="56.1385%" y="245" width="0.1220%" height="15" fill="rgb(252,170,7)" fg:x="11962" fg:w="26"/><text x="56.3885%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (52 samples, 0.24%)</title><rect x="56.0775%" y="261" width="0.2440%" height="15" fill="rgb(231,118,14)" fg:x="11949" fg:w="52"/><text x="56.3275%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (13 samples, 0.06%)</title><rect x="56.2606%" y="245" width="0.0610%" height="15" fill="rgb(238,83,0)" fg:x="11988" fg:w="13"/><text x="56.5106%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (93 samples, 0.44%)</title><rect x="56.4905%" y="245" width="0.4365%" height="15" fill="rgb(221,39,39)" fg:x="12037" fg:w="93"/><text x="56.7405%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (272 samples, 1.28%)</title><rect x="55.9039%" y="309" width="1.2765%" height="15" fill="rgb(222,119,46)" fg:x="11912" fg:w="272"/><text x="56.1539%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (272 samples, 1.28%)</title><rect x="55.9039%" y="293" width="1.2765%" height="15" fill="rgb(222,165,49)" fg:x="11912" fg:w="272"/><text x="56.1539%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (272 samples, 1.28%)</title><rect x="55.9039%" y="277" width="1.2765%" height="15" fill="rgb(219,113,52)" fg:x="11912" fg:w="272"/><text x="56.1539%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (183 samples, 0.86%)</title><rect x="56.3216%" y="261" width="0.8588%" height="15" fill="rgb(214,7,15)" fg:x="12001" fg:w="183"/><text x="56.5716%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (54 samples, 0.25%)</title><rect x="56.9270%" y="245" width="0.2534%" height="15" fill="rgb(235,32,4)" fg:x="12130" fg:w="54"/><text x="57.1770%" y="255.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (44 samples, 0.21%)</title><rect x="57.1804%" y="309" width="0.2065%" height="15" fill="rgb(238,90,54)" fg:x="12184" fg:w="44"/><text x="57.4304%" y="319.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (29 samples, 0.14%)</title><rect x="57.2508%" y="293" width="0.1361%" height="15" fill="rgb(213,208,19)" fg:x="12199" fg:w="29"/><text x="57.5008%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (29 samples, 0.14%)</title><rect x="57.2508%" y="277" width="0.1361%" height="15" fill="rgb(233,156,4)" fg:x="12199" fg:w="29"/><text x="57.5008%" y="287.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (29 samples, 0.14%)</title><rect x="57.2508%" y="261" width="0.1361%" height="15" fill="rgb(207,194,5)" fg:x="12199" fg:w="29"/><text x="57.5008%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (25 samples, 0.12%)</title><rect x="58.4757%" y="181" width="0.1173%" height="15" fill="rgb(206,111,30)" fg:x="12460" fg:w="25"/><text x="58.7257%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (105 samples, 0.49%)</title><rect x="58.2082%" y="197" width="0.4928%" height="15" fill="rgb(243,70,54)" fg:x="12403" fg:w="105"/><text x="58.4582%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (23 samples, 0.11%)</title><rect x="58.5930%" y="181" width="0.1079%" height="15" fill="rgb(242,28,8)" fg:x="12485" fg:w="23"/><text x="58.8430%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (338 samples, 1.59%)</title><rect x="57.5324%" y="245" width="1.5863%" height="15" fill="rgb(219,106,18)" fg:x="12259" fg:w="338"/><text x="57.7824%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (338 samples, 1.59%)</title><rect x="57.5324%" y="229" width="1.5863%" height="15" fill="rgb(244,222,10)" fg:x="12259" fg:w="338"/><text x="57.7824%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (338 samples, 1.59%)</title><rect x="57.5324%" y="213" width="1.5863%" height="15" fill="rgb(236,179,52)" fg:x="12259" fg:w="338"/><text x="57.7824%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (89 samples, 0.42%)</title><rect x="58.7010%" y="197" width="0.4177%" height="15" fill="rgb(213,23,39)" fg:x="12508" fg:w="89"/><text x="58.9510%" y="207.50"></text></g><g><title>hashbrown::map::make_hash (708 samples, 3.32%)</title><rect x="55.8288%" y="341" width="3.3227%" height="15" fill="rgb(238,48,10)" fg:x="11896" fg:w="708"/><text x="56.0788%" y="351.50">has..</text></g><g><title>core::hash::BuildHasher::hash_one (705 samples, 3.31%)</title><rect x="55.8429%" y="325" width="3.3086%" height="15" fill="rgb(251,196,23)" fg:x="11899" fg:w="705"/><text x="56.0929%" y="335.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (376 samples, 1.76%)</title><rect x="57.3869%" y="309" width="1.7646%" height="15" fill="rgb(250,152,24)" fg:x="12228" fg:w="376"/><text x="57.6369%" y="319.50"></text></g><g><title>&lt;gb_rs::graphics::TilePos as core::hash::Hash&gt;::hash (361 samples, 1.69%)</title><rect x="57.4573%" y="293" width="1.6942%" height="15" fill="rgb(209,150,17)" fg:x="12243" fg:w="361"/><text x="57.7073%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (361 samples, 1.69%)</title><rect x="57.4573%" y="277" width="1.6942%" height="15" fill="rgb(234,202,34)" fg:x="12243" fg:w="361"/><text x="57.7073%" y="287.50"></text></g><g><title>core::hash::Hasher::write_usize (361 samples, 1.69%)</title><rect x="57.4573%" y="261" width="1.6942%" height="15" fill="rgb(253,148,53)" fg:x="12243" fg:w="361"/><text x="57.7073%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (7 samples, 0.03%)</title><rect x="59.1186%" y="245" width="0.0329%" height="15" fill="rgb(218,129,16)" fg:x="12597" fg:w="7"/><text x="59.3686%" y="255.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (28 samples, 0.13%)</title><rect x="59.5879%" y="277" width="0.1314%" height="15" fill="rgb(216,85,19)" fg:x="12697" fg:w="28"/><text x="59.8379%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (63 samples, 0.30%)</title><rect x="59.5786%" y="293" width="0.2957%" height="15" fill="rgb(235,228,7)" fg:x="12695" fg:w="63"/><text x="59.8286%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (33 samples, 0.15%)</title><rect x="59.7194%" y="277" width="0.1549%" height="15" fill="rgb(245,175,0)" fg:x="12725" fg:w="33"/><text x="59.9694%" y="287.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (7 samples, 0.03%)</title><rect x="59.8742%" y="293" width="0.0329%" height="15" fill="rgb(208,168,36)" fg:x="12758" fg:w="7"/><text x="60.1242%" y="303.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (165 samples, 0.77%)</title><rect x="59.9071%" y="277" width="0.7744%" height="15" fill="rgb(246,171,24)" fg:x="12765" fg:w="165"/><text x="60.1571%" y="287.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (165 samples, 0.77%)</title><rect x="59.9071%" y="261" width="0.7744%" height="15" fill="rgb(215,142,24)" fg:x="12765" fg:w="165"/><text x="60.1571%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (165 samples, 0.77%)</title><rect x="59.9071%" y="245" width="0.7744%" height="15" fill="rgb(250,187,7)" fg:x="12765" fg:w="165"/><text x="60.1571%" y="255.50"></text></g><g><title>&lt;gb_rs::graphics::TilePos as core::cmp::PartialEq&gt;::eq (165 samples, 0.77%)</title><rect x="59.9071%" y="229" width="0.7744%" height="15" fill="rgb(228,66,33)" fg:x="12765" fg:w="165"/><text x="60.1571%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (193 samples, 0.91%)</title><rect x="59.9071%" y="293" width="0.9058%" height="15" fill="rgb(234,215,21)" fg:x="12765" fg:w="193"/><text x="60.1571%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (28 samples, 0.13%)</title><rect x="60.6814%" y="277" width="0.1314%" height="15" fill="rgb(222,191,20)" fg:x="12930" fg:w="28"/><text x="60.9314%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (28 samples, 0.13%)</title><rect x="60.6814%" y="261" width="0.1314%" height="15" fill="rgb(245,79,54)" fg:x="12930" fg:w="28"/><text x="60.9314%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (28 samples, 0.13%)</title><rect x="60.6814%" y="245" width="0.1314%" height="15" fill="rgb(240,10,37)" fg:x="12930" fg:w="28"/><text x="60.9314%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (21 samples, 0.10%)</title><rect x="60.7143%" y="229" width="0.0986%" height="15" fill="rgb(214,192,32)" fg:x="12937" fg:w="21"/><text x="60.9643%" y="239.50"></text></g><g><title>hashbrown::raw::h2 (48 samples, 0.23%)</title><rect x="60.8128%" y="293" width="0.2253%" height="15" fill="rgb(209,36,54)" fg:x="12958" fg:w="48"/><text x="61.0628%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (31 samples, 0.15%)</title><rect x="61.0381%" y="293" width="0.1455%" height="15" fill="rgb(220,10,11)" fg:x="13006" fg:w="31"/><text x="61.2881%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (31 samples, 0.15%)</title><rect x="61.0381%" y="277" width="0.1455%" height="15" fill="rgb(221,106,17)" fg:x="13006" fg:w="31"/><text x="61.2881%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (31 samples, 0.15%)</title><rect x="61.0381%" y="261" width="0.1455%" height="15" fill="rgb(251,142,44)" fg:x="13006" fg:w="31"/><text x="61.2881%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (56 samples, 0.26%)</title><rect x="61.1836%" y="293" width="0.2628%" height="15" fill="rgb(238,13,15)" fg:x="13037" fg:w="56"/><text x="61.4336%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (56 samples, 0.26%)</title><rect x="61.1836%" y="277" width="0.2628%" height="15" fill="rgb(208,107,27)" fg:x="13037" fg:w="56"/><text x="61.4336%" y="287.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,265 samples, 5.94%)</title><rect x="55.6739%" y="389" width="5.9367%" height="15" fill="rgb(205,136,37)" fg:x="11863" fg:w="1265"/><text x="55.9239%" y="399.50">std::col..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,265 samples, 5.94%)</title><rect x="55.6739%" y="373" width="5.9367%" height="15" fill="rgb(250,205,27)" fg:x="11863" fg:w="1265"/><text x="55.9239%" y="383.50">hashbrow..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,265 samples, 5.94%)</title><rect x="55.6739%" y="357" width="5.9367%" height="15" fill="rgb(210,80,43)" fg:x="11863" fg:w="1265"/><text x="55.9239%" y="367.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (524 samples, 2.46%)</title><rect x="59.1515%" y="341" width="2.4592%" height="15" fill="rgb(247,160,36)" fg:x="12604" fg:w="524"/><text x="59.4015%" y="351.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (524 samples, 2.46%)</title><rect x="59.1515%" y="325" width="2.4592%" height="15" fill="rgb(234,13,49)" fg:x="12604" fg:w="524"/><text x="59.4015%" y="335.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (524 samples, 2.46%)</title><rect x="59.1515%" y="309" width="2.4592%" height="15" fill="rgb(234,122,0)" fg:x="12604" fg:w="524"/><text x="59.4015%" y="319.50">ha..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (35 samples, 0.16%)</title><rect x="61.4464%" y="293" width="0.1643%" height="15" fill="rgb(207,146,38)" fg:x="13093" fg:w="35"/><text x="61.6964%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (35 samples, 0.16%)</title><rect x="61.4464%" y="277" width="0.1643%" height="15" fill="rgb(207,177,25)" fg:x="13093" fg:w="35"/><text x="61.6964%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (35 samples, 0.16%)</title><rect x="61.4464%" y="261" width="0.1643%" height="15" fill="rgb(211,178,42)" fg:x="13093" fg:w="35"/><text x="61.6964%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 0.03%)</title><rect x="61.6623%" y="277" width="0.0282%" height="15" fill="rgb(230,69,54)" fg:x="13139" fg:w="6"/><text x="61.9123%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.02%)</title><rect x="61.6717%" y="261" width="0.0188%" height="15" fill="rgb(214,135,41)" fg:x="13141" fg:w="4"/><text x="61.9217%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (9 samples, 0.04%)</title><rect x="61.7092%" y="261" width="0.0422%" height="15" fill="rgb(237,67,25)" fg:x="13149" fg:w="9"/><text x="61.9592%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (26 samples, 0.12%)</title><rect x="61.6435%" y="325" width="0.1220%" height="15" fill="rgb(222,189,50)" fg:x="13135" fg:w="26"/><text x="61.8935%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (26 samples, 0.12%)</title><rect x="61.6435%" y="309" width="0.1220%" height="15" fill="rgb(245,148,34)" fg:x="13135" fg:w="26"/><text x="61.8935%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (26 samples, 0.12%)</title><rect x="61.6435%" y="293" width="0.1220%" height="15" fill="rgb(222,29,6)" fg:x="13135" fg:w="26"/><text x="61.8935%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (16 samples, 0.08%)</title><rect x="61.6904%" y="277" width="0.0751%" height="15" fill="rgb(221,189,43)" fg:x="13145" fg:w="16"/><text x="61.9404%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.01%)</title><rect x="61.7515%" y="261" width="0.0141%" height="15" fill="rgb(207,36,27)" fg:x="13158" fg:w="3"/><text x="62.0015%" y="271.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (9 samples, 0.04%)</title><rect x="61.7655%" y="325" width="0.0422%" height="15" fill="rgb(217,90,24)" fg:x="13161" fg:w="9"/><text x="62.0155%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.01%)</title><rect x="61.8969%" y="197" width="0.0141%" height="15" fill="rgb(224,66,35)" fg:x="13189" fg:w="3"/><text x="62.1469%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (15 samples, 0.07%)</title><rect x="61.8735%" y="213" width="0.0704%" height="15" fill="rgb(221,13,50)" fg:x="13184" fg:w="15"/><text x="62.1235%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (7 samples, 0.03%)</title><rect x="61.9110%" y="197" width="0.0329%" height="15" fill="rgb(236,68,49)" fg:x="13192" fg:w="7"/><text x="62.1610%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (39 samples, 0.18%)</title><rect x="61.8219%" y="261" width="0.1830%" height="15" fill="rgb(229,146,28)" fg:x="13173" fg:w="39"/><text x="62.0719%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (39 samples, 0.18%)</title><rect x="61.8219%" y="245" width="0.1830%" height="15" fill="rgb(225,31,38)" fg:x="13173" fg:w="39"/><text x="62.0719%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (39 samples, 0.18%)</title><rect x="61.8219%" y="229" width="0.1830%" height="15" fill="rgb(250,208,3)" fg:x="13173" fg:w="39"/><text x="62.0719%" y="239.50"></text></g><g><title>core::hash::sip::u8to64_le (13 samples, 0.06%)</title><rect x="61.9439%" y="213" width="0.0610%" height="15" fill="rgb(246,54,23)" fg:x="13199" fg:w="13"/><text x="62.1939%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (80 samples, 0.38%)</title><rect x="61.6341%" y="357" width="0.3754%" height="15" fill="rgb(243,76,11)" fg:x="13133" fg:w="80"/><text x="61.8841%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (78 samples, 0.37%)</title><rect x="61.6435%" y="341" width="0.3661%" height="15" fill="rgb(245,21,50)" fg:x="13135" fg:w="78"/><text x="61.8935%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (43 samples, 0.20%)</title><rect x="61.8078%" y="325" width="0.2018%" height="15" fill="rgb(228,9,43)" fg:x="13170" fg:w="43"/><text x="62.0578%" y="335.50"></text></g><g><title>&lt;gb_rs::graphics::TilePos as core::hash::Hash&gt;::hash (43 samples, 0.20%)</title><rect x="61.8078%" y="309" width="0.2018%" height="15" fill="rgb(208,100,47)" fg:x="13170" fg:w="43"/><text x="62.0578%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (43 samples, 0.20%)</title><rect x="61.8078%" y="293" width="0.2018%" height="15" fill="rgb(232,26,8)" fg:x="13170" fg:w="43"/><text x="62.0578%" y="303.50"></text></g><g><title>core::hash::Hasher::write_usize (43 samples, 0.20%)</title><rect x="61.8078%" y="277" width="0.2018%" height="15" fill="rgb(216,166,38)" fg:x="13170" fg:w="43"/><text x="62.0578%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::FullBucketsIndices as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="62.0518%" y="277" width="0.0141%" height="15" fill="rgb(251,202,51)" fg:x="13222" fg:w="3"/><text x="62.3018%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (933 samples, 4.38%)</title><rect x="62.0659%" y="277" width="4.3786%" height="15" fill="rgb(254,216,34)" fg:x="13225" fg:w="933"/><text x="62.3159%" y="287.50">core:..</text></g><g><title>__memcpy_avx_unaligned_erms (933 samples, 4.38%)</title><rect x="62.0659%" y="261" width="4.3786%" height="15" fill="rgb(251,32,27)" fg:x="13225" fg:w="933"/><text x="62.3159%" y="271.50">__mem..</text></g><g><title>core::mem::swap (7 samples, 0.03%)</title><rect x="66.4445%" y="277" width="0.0329%" height="15" fill="rgb(208,127,28)" fg:x="14158" fg:w="7"/><text x="66.6945%" y="287.50"></text></g><g><title>core::mem::swap_simple (7 samples, 0.03%)</title><rect x="66.4445%" y="261" width="0.0329%" height="15" fill="rgb(224,137,22)" fg:x="14158" fg:w="7"/><text x="66.6945%" y="271.50"></text></g><g><title>core::ptr::read (7 samples, 0.03%)</title><rect x="66.4445%" y="245" width="0.0329%" height="15" fill="rgb(254,70,32)" fg:x="14158" fg:w="7"/><text x="66.6945%" y="255.50"></text></g><g><title>__free (9 samples, 0.04%)</title><rect x="66.4774%" y="181" width="0.0422%" height="15" fill="rgb(229,75,37)" fg:x="14165" fg:w="9"/><text x="66.7274%" y="191.50"></text></g><g><title>_int_free (5 samples, 0.02%)</title><rect x="66.4962%" y="165" width="0.0235%" height="15" fill="rgb(252,64,23)" fg:x="14169" fg:w="5"/><text x="66.7462%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (11 samples, 0.05%)</title><rect x="66.4774%" y="277" width="0.0516%" height="15" fill="rgb(232,162,48)" fg:x="14165" fg:w="11"/><text x="66.7274%" y="287.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.05%)</title><rect x="66.4774%" y="261" width="0.0516%" height="15" fill="rgb(246,160,12)" fg:x="14165" fg:w="11"/><text x="66.7274%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::{{closure}} (11 samples, 0.05%)</title><rect x="66.4774%" y="245" width="0.0516%" height="15" fill="rgb(247,166,0)" fg:x="14165" fg:w="11"/><text x="66.7274%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (11 samples, 0.05%)</title><rect x="66.4774%" y="229" width="0.0516%" height="15" fill="rgb(249,219,21)" fg:x="14165" fg:w="11"/><text x="66.7274%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.05%)</title><rect x="66.4774%" y="213" width="0.0516%" height="15" fill="rgb(205,209,3)" fg:x="14165" fg:w="11"/><text x="66.7274%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.05%)</title><rect x="66.4774%" y="197" width="0.0516%" height="15" fill="rgb(243,44,1)" fg:x="14165" fg:w="11"/><text x="66.7274%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6 samples, 0.03%)</title><rect x="66.5900%" y="149" width="0.0282%" height="15" fill="rgb(206,159,16)" fg:x="14189" fg:w="6"/><text x="66.8400%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7 samples, 0.03%)</title><rect x="66.5900%" y="165" width="0.0329%" height="15" fill="rgb(244,77,30)" fg:x="14189" fg:w="7"/><text x="66.8400%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (9 samples, 0.04%)</title><rect x="66.6323%" y="149" width="0.0422%" height="15" fill="rgb(218,69,12)" fg:x="14198" fg:w="9"/><text x="66.8823%" y="159.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (34 samples, 0.16%)</title><rect x="66.5525%" y="213" width="0.1596%" height="15" fill="rgb(212,87,7)" fg:x="14181" fg:w="34"/><text x="66.8025%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (34 samples, 0.16%)</title><rect x="66.5525%" y="197" width="0.1596%" height="15" fill="rgb(245,114,25)" fg:x="14181" fg:w="34"/><text x="66.8025%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (34 samples, 0.16%)</title><rect x="66.5525%" y="181" width="0.1596%" height="15" fill="rgb(210,61,42)" fg:x="14181" fg:w="34"/><text x="66.8025%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (19 samples, 0.09%)</title><rect x="66.6229%" y="165" width="0.0892%" height="15" fill="rgb(211,52,33)" fg:x="14196" fg:w="19"/><text x="66.8729%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (8 samples, 0.04%)</title><rect x="66.6745%" y="149" width="0.0375%" height="15" fill="rgb(234,58,33)" fg:x="14207" fg:w="8"/><text x="66.9245%" y="159.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (7 samples, 0.03%)</title><rect x="66.7120%" y="213" width="0.0329%" height="15" fill="rgb(220,115,36)" fg:x="14215" fg:w="7"/><text x="66.9620%" y="223.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (4 samples, 0.02%)</title><rect x="66.7261%" y="197" width="0.0188%" height="15" fill="rgb(243,153,54)" fg:x="14218" fg:w="4"/><text x="66.9761%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (4 samples, 0.02%)</title><rect x="66.7261%" y="181" width="0.0188%" height="15" fill="rgb(251,47,18)" fg:x="14218" fg:w="4"/><text x="66.9761%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (4 samples, 0.02%)</title><rect x="66.7261%" y="165" width="0.0188%" height="15" fill="rgb(242,102,42)" fg:x="14218" fg:w="4"/><text x="66.9761%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.02%)</title><rect x="67.0405%" y="85" width="0.0188%" height="15" fill="rgb(234,31,38)" fg:x="14285" fg:w="4"/><text x="67.2905%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (17 samples, 0.08%)</title><rect x="67.0030%" y="101" width="0.0798%" height="15" fill="rgb(221,117,51)" fg:x="14277" fg:w="17"/><text x="67.2530%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5 samples, 0.02%)</title><rect x="67.0593%" y="85" width="0.0235%" height="15" fill="rgb(212,20,18)" fg:x="14289" fg:w="5"/><text x="67.3093%" y="95.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (46 samples, 0.22%)</title><rect x="66.9279%" y="149" width="0.2159%" height="15" fill="rgb(245,133,36)" fg:x="14261" fg:w="46"/><text x="67.1779%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (46 samples, 0.22%)</title><rect x="66.9279%" y="133" width="0.2159%" height="15" fill="rgb(212,6,19)" fg:x="14261" fg:w="46"/><text x="67.1779%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (46 samples, 0.22%)</title><rect x="66.9279%" y="117" width="0.2159%" height="15" fill="rgb(218,1,36)" fg:x="14261" fg:w="46"/><text x="67.1779%" y="127.50"></text></g><g><title>core::hash::sip::u8to64_le (13 samples, 0.06%)</title><rect x="67.0828%" y="101" width="0.0610%" height="15" fill="rgb(246,84,54)" fg:x="14294" fg:w="13"/><text x="67.3328%" y="111.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (134 samples, 0.63%)</title><rect x="66.5290%" y="261" width="0.6289%" height="15" fill="rgb(242,110,6)" fg:x="14176" fg:w="134"/><text x="66.7790%" y="271.50"></text></g><g><title>hashbrown::map::make_hash (134 samples, 0.63%)</title><rect x="66.5290%" y="245" width="0.6289%" height="15" fill="rgb(214,47,5)" fg:x="14176" fg:w="134"/><text x="66.7790%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (134 samples, 0.63%)</title><rect x="66.5290%" y="229" width="0.6289%" height="15" fill="rgb(218,159,25)" fg:x="14176" fg:w="134"/><text x="66.7790%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (88 samples, 0.41%)</title><rect x="66.7449%" y="213" width="0.4130%" height="15" fill="rgb(215,211,28)" fg:x="14222" fg:w="88"/><text x="66.9949%" y="223.50"></text></g><g><title>&lt;gb_rs::graphics::TilePos as core::hash::Hash&gt;::hash (52 samples, 0.24%)</title><rect x="66.9138%" y="197" width="0.2440%" height="15" fill="rgb(238,59,32)" fg:x="14258" fg:w="52"/><text x="67.1638%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (52 samples, 0.24%)</title><rect x="66.9138%" y="181" width="0.2440%" height="15" fill="rgb(226,82,3)" fg:x="14258" fg:w="52"/><text x="67.1638%" y="191.50"></text></g><g><title>core::hash::Hasher::write_usize (52 samples, 0.24%)</title><rect x="66.9138%" y="165" width="0.2440%" height="15" fill="rgb(240,164,32)" fg:x="14258" fg:w="52"/><text x="67.1638%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (3 samples, 0.01%)</title><rect x="67.1438%" y="149" width="0.0141%" height="15" fill="rgb(232,46,7)" fg:x="14307" fg:w="3"/><text x="67.3938%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (137 samples, 0.64%)</title><rect x="66.5290%" y="277" width="0.6430%" height="15" fill="rgb(229,129,53)" fg:x="14176" fg:w="137"/><text x="66.7790%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.01%)</title><rect x="67.1813%" y="229" width="0.0141%" height="15" fill="rgb(234,188,29)" fg:x="14315" fg:w="3"/><text x="67.4313%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (11 samples, 0.05%)</title><rect x="67.1813%" y="245" width="0.0516%" height="15" fill="rgb(246,141,4)" fg:x="14315" fg:w="11"/><text x="67.4313%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (8 samples, 0.04%)</title><rect x="67.1954%" y="229" width="0.0375%" height="15" fill="rgb(229,23,39)" fg:x="14318" fg:w="8"/><text x="67.4454%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (8 samples, 0.04%)</title><rect x="67.1954%" y="213" width="0.0375%" height="15" fill="rgb(206,12,3)" fg:x="14318" fg:w="8"/><text x="67.4454%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (15 samples, 0.07%)</title><rect x="67.2330%" y="245" width="0.0704%" height="15" fill="rgb(252,226,20)" fg:x="14326" fg:w="15"/><text x="67.4830%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (13 samples, 0.06%)</title><rect x="67.2424%" y="229" width="0.0610%" height="15" fill="rgb(216,123,35)" fg:x="14328" fg:w="13"/><text x="67.4924%" y="239.50"></text></g><g><title>hashbrown::raw::is_full (13 samples, 0.06%)</title><rect x="67.2424%" y="213" width="0.0610%" height="15" fill="rgb(212,68,40)" fg:x="14328" fg:w="13"/><text x="67.4924%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (3 samples, 0.01%)</title><rect x="67.3034%" y="245" width="0.0141%" height="15" fill="rgb(254,125,32)" fg:x="14341" fg:w="3"/><text x="67.5534%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (56 samples, 0.26%)</title><rect x="67.1813%" y="261" width="0.2628%" height="15" fill="rgb(253,97,22)" fg:x="14315" fg:w="56"/><text x="67.4313%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (27 samples, 0.13%)</title><rect x="67.3174%" y="245" width="0.1267%" height="15" fill="rgb(241,101,14)" fg:x="14344" fg:w="27"/><text x="67.5674%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (27 samples, 0.13%)</title><rect x="67.3174%" y="229" width="0.1267%" height="15" fill="rgb(238,103,29)" fg:x="14344" fg:w="27"/><text x="67.5674%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (27 samples, 0.13%)</title><rect x="67.3174%" y="213" width="0.1267%" height="15" fill="rgb(233,195,47)" fg:x="14344" fg:w="27"/><text x="67.5674%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (61 samples, 0.29%)</title><rect x="67.1813%" y="277" width="0.2863%" height="15" fill="rgb(246,218,30)" fg:x="14315" fg:w="61"/><text x="67.4313%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (5 samples, 0.02%)</title><rect x="67.4442%" y="261" width="0.0235%" height="15" fill="rgb(219,145,47)" fg:x="14371" fg:w="5"/><text x="67.6942%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (5 samples, 0.02%)</title><rect x="67.4442%" y="245" width="0.0235%" height="15" fill="rgb(243,12,26)" fg:x="14371" fg:w="5"/><text x="67.6942%" y="255.50"></text></g><g><title>sysmalloc (14 samples, 0.07%)</title><rect x="67.5756%" y="133" width="0.0657%" height="15" fill="rgb(214,87,16)" fg:x="14399" fg:w="14"/><text x="67.8256%" y="143.50"></text></g><g><title>__glibc_morecore (4 samples, 0.02%)</title><rect x="67.6225%" y="117" width="0.0188%" height="15" fill="rgb(208,99,42)" fg:x="14409" fg:w="4"/><text x="67.8725%" y="127.50"></text></g><g><title>__GI___libc_malloc (38 samples, 0.18%)</title><rect x="67.4770%" y="165" width="0.1783%" height="15" fill="rgb(253,99,2)" fg:x="14378" fg:w="38"/><text x="67.7270%" y="175.50"></text></g><g><title>_int_malloc (29 samples, 0.14%)</title><rect x="67.5192%" y="149" width="0.1361%" height="15" fill="rgb(220,168,23)" fg:x="14387" fg:w="29"/><text x="67.7692%" y="159.50"></text></g><g><title>unlink_chunk.constprop.0 (3 samples, 0.01%)</title><rect x="67.6413%" y="133" width="0.0141%" height="15" fill="rgb(242,38,24)" fg:x="14413" fg:w="3"/><text x="67.8913%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1,204 samples, 5.65%)</title><rect x="62.0237%" y="341" width="5.6505%" height="15" fill="rgb(225,182,9)" fg:x="13216" fg:w="1204"/><text x="62.2737%" y="351.50">hashbro..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,204 samples, 5.65%)</title><rect x="62.0237%" y="325" width="5.6505%" height="15" fill="rgb(243,178,37)" fg:x="13216" fg:w="1204"/><text x="62.2737%" y="335.50">hashbro..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1,204 samples, 5.65%)</title><rect x="62.0237%" y="309" width="5.6505%" height="15" fill="rgb(232,139,19)" fg:x="13216" fg:w="1204"/><text x="62.2737%" y="319.50">hashbro..</text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1,203 samples, 5.65%)</title><rect x="62.0283%" y="293" width="5.6458%" height="15" fill="rgb(225,201,24)" fg:x="13217" fg:w="1203"/><text x="62.2783%" y="303.50">hashbro..</text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (44 samples, 0.21%)</title><rect x="67.4676%" y="277" width="0.2065%" height="15" fill="rgb(221,47,46)" fg:x="14376" fg:w="44"/><text x="67.7176%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (44 samples, 0.21%)</title><rect x="67.4676%" y="261" width="0.2065%" height="15" fill="rgb(249,23,13)" fg:x="14376" fg:w="44"/><text x="67.7176%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (43 samples, 0.20%)</title><rect x="67.4723%" y="245" width="0.2018%" height="15" fill="rgb(219,9,5)" fg:x="14377" fg:w="43"/><text x="67.7223%" y="255.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (43 samples, 0.20%)</title><rect x="67.4723%" y="229" width="0.2018%" height="15" fill="rgb(254,171,16)" fg:x="14377" fg:w="43"/><text x="67.7223%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (43 samples, 0.20%)</title><rect x="67.4723%" y="213" width="0.2018%" height="15" fill="rgb(230,171,20)" fg:x="14377" fg:w="43"/><text x="67.7223%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (43 samples, 0.20%)</title><rect x="67.4723%" y="197" width="0.2018%" height="15" fill="rgb(210,71,41)" fg:x="14377" fg:w="43"/><text x="67.7223%" y="207.50"></text></g><g><title>alloc::alloc::alloc (43 samples, 0.20%)</title><rect x="67.4723%" y="181" width="0.2018%" height="15" fill="rgb(206,173,20)" fg:x="14377" fg:w="43"/><text x="67.7223%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="67.6788%" y="325" width="0.0188%" height="15" fill="rgb(233,88,34)" fg:x="14421" fg:w="4"/><text x="67.9288%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (4 samples, 0.02%)</title><rect x="67.6788%" y="309" width="0.0188%" height="15" fill="rgb(223,209,46)" fg:x="14421" fg:w="4"/><text x="67.9288%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (6 samples, 0.03%)</title><rect x="67.7023%" y="325" width="0.0282%" height="15" fill="rgb(250,43,18)" fg:x="14426" fg:w="6"/><text x="67.9523%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (4 samples, 0.02%)</title><rect x="67.7117%" y="309" width="0.0188%" height="15" fill="rgb(208,13,10)" fg:x="14428" fg:w="4"/><text x="67.9617%" y="319.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (3 samples, 0.01%)</title><rect x="67.7164%" y="293" width="0.0141%" height="15" fill="rgb(212,200,36)" fg:x="14429" fg:w="3"/><text x="67.9664%" y="303.50"></text></g><g><title>hashbrown::raw::h2 (8 samples, 0.04%)</title><rect x="67.7398%" y="325" width="0.0375%" height="15" fill="rgb(225,90,30)" fg:x="14434" fg:w="8"/><text x="67.9898%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (4 samples, 0.02%)</title><rect x="67.7774%" y="325" width="0.0188%" height="15" fill="rgb(236,182,39)" fg:x="14442" fg:w="4"/><text x="68.0274%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (4 samples, 0.02%)</title><rect x="67.7774%" y="309" width="0.0188%" height="15" fill="rgb(212,144,35)" fg:x="14442" fg:w="4"/><text x="68.0274%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.02%)</title><rect x="67.7774%" y="293" width="0.0188%" height="15" fill="rgb(228,63,44)" fg:x="14442" fg:w="4"/><text x="68.0274%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1,237 samples, 5.81%)</title><rect x="62.0190%" y="357" width="5.8053%" height="15" fill="rgb(228,109,6)" fg:x="13215" fg:w="1237"/><text x="62.2690%" y="367.50">hashbro..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (32 samples, 0.15%)</title><rect x="67.6741%" y="341" width="0.1502%" height="15" fill="rgb(238,117,24)" fg:x="14420" fg:w="32"/><text x="67.9241%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (6 samples, 0.03%)</title><rect x="67.7961%" y="325" width="0.0282%" height="15" fill="rgb(242,26,26)" fg:x="14446" fg:w="6"/><text x="68.0461%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (6 samples, 0.03%)</title><rect x="67.7961%" y="309" width="0.0282%" height="15" fill="rgb(221,92,48)" fg:x="14446" fg:w="6"/><text x="68.0461%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (276 samples, 1.30%)</title><rect x="67.8243%" y="341" width="1.2953%" height="15" fill="rgb(209,209,32)" fg:x="14452" fg:w="276"/><text x="68.0743%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (276 samples, 1.30%)</title><rect x="67.8243%" y="325" width="1.2953%" height="15" fill="rgb(221,70,22)" fg:x="14452" fg:w="276"/><text x="68.0743%" y="335.50"></text></g><g><title>core::ptr::write (276 samples, 1.30%)</title><rect x="67.8243%" y="309" width="1.2953%" height="15" fill="rgb(248,145,5)" fg:x="14452" fg:w="276"/><text x="68.0743%" y="319.50"></text></g><g><title>__memcpy_avx_unaligned_erms (139 samples, 0.65%)</title><rect x="68.4672%" y="293" width="0.6523%" height="15" fill="rgb(226,116,26)" fg:x="14589" fg:w="139"/><text x="68.7172%" y="303.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;bool&gt; for usize&gt;::from (3 samples, 0.01%)</title><rect x="69.1337%" y="325" width="0.0141%" height="15" fill="rgb(244,5,17)" fg:x="14731" fg:w="3"/><text x="69.3837%" y="335.50"></text></g><g><title>gb_rs::graphics::BgFIFO::fetch (4,349 samples, 20.41%)</title><rect x="48.7516%" y="405" width="20.4102%" height="15" fill="rgb(252,159,33)" fg:x="10388" fg:w="4349"/><text x="49.0016%" y="415.50">gb_rs::graphics::BgFIFO::fetch</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1,609 samples, 7.55%)</title><rect x="61.6107%" y="389" width="7.5512%" height="15" fill="rgb(206,71,0)" fg:x="13128" fg:w="1609"/><text x="61.8607%" y="399.50">std::colle..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,607 samples, 7.54%)</title><rect x="61.6200%" y="373" width="7.5418%" height="15" fill="rgb(233,118,54)" fg:x="13130" fg:w="1607"/><text x="61.8700%" y="383.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (285 samples, 1.34%)</title><rect x="67.8243%" y="357" width="1.3375%" height="15" fill="rgb(234,83,48)" fg:x="14452" fg:w="285"/><text x="68.0743%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (8 samples, 0.04%)</title><rect x="69.1243%" y="341" width="0.0375%" height="15" fill="rgb(228,3,54)" fg:x="14729" fg:w="8"/><text x="69.3743%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (3 samples, 0.01%)</title><rect x="69.1477%" y="325" width="0.0141%" height="15" fill="rgb(226,155,13)" fg:x="14734" fg:w="3"/><text x="69.3977%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (3 samples, 0.01%)</title><rect x="69.1477%" y="309" width="0.0141%" height="15" fill="rgb(241,28,37)" fg:x="14734" fg:w="3"/><text x="69.3977%" y="319.50"></text></g><g><title>&lt;gb_rs::graphics::BgFIFO as gb_rs::graphics::FIFO&gt;::pop (5,172 samples, 24.27%)</title><rect x="44.9878%" y="421" width="24.2726%" height="15" fill="rgb(233,93,10)" fg:x="9586" fg:w="5172"/><text x="45.2378%" y="431.50">&lt;gb_rs::graphics::BgFIFO as gb_rs::grap..</text></g><g><title>gb_rs::graphics::BgFIFO::in_window (21 samples, 0.10%)</title><rect x="69.1618%" y="405" width="0.0986%" height="15" fill="rgb(225,113,19)" fg:x="14737" fg:w="21"/><text x="69.4118%" y="415.50"></text></g><g><title>gb_rs::graphics::BgFIFO::get_viewport (21 samples, 0.10%)</title><rect x="69.1618%" y="389" width="0.0986%" height="15" fill="rgb(241,2,18)" fg:x="14737" fg:w="21"/><text x="69.4118%" y="399.50"></text></g><g><title>gb_rs::memory::Memory::read_byte (21 samples, 0.10%)</title><rect x="69.1618%" y="373" width="0.0986%" height="15" fill="rgb(228,207,21)" fg:x="14737" fg:w="21"/><text x="69.4118%" y="383.50"></text></g><g><title>__memcpy_avx_unaligned_erms (181 samples, 0.85%)</title><rect x="70.9358%" y="373" width="0.8494%" height="15" fill="rgb(213,211,35)" fg:x="15115" fg:w="181"/><text x="71.1858%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::reserve (4 samples, 0.02%)</title><rect x="71.7852%" y="373" width="0.0188%" height="15" fill="rgb(209,83,10)" fg:x="15296" fg:w="4"/><text x="72.0352%" y="383.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as alloc::collections::vec_deque::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (326 samples, 1.53%)</title><rect x="70.9311%" y="389" width="1.5299%" height="15" fill="rgb(209,164,1)" fg:x="15114" fg:w="326"/><text x="71.1811%" y="399.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::write_iter_wrapping (138 samples, 0.65%)</title><rect x="71.8134%" y="373" width="0.6476%" height="15" fill="rgb(213,184,43)" fg:x="15302" fg:w="138"/><text x="72.0634%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::write_iter (138 samples, 0.65%)</title><rect x="71.8134%" y="357" width="0.6476%" height="15" fill="rgb(231,61,34)" fg:x="15302" fg:w="138"/><text x="72.0634%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (138 samples, 0.65%)</title><rect x="71.8134%" y="341" width="0.6476%" height="15" fill="rgb(235,75,3)" fg:x="15302" fg:w="138"/><text x="72.0634%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (138 samples, 0.65%)</title><rect x="71.8134%" y="325" width="0.6476%" height="15" fill="rgb(220,106,47)" fg:x="15302" fg:w="138"/><text x="72.0634%" y="335.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (138 samples, 0.65%)</title><rect x="71.8134%" y="309" width="0.6476%" height="15" fill="rgb(210,196,33)" fg:x="15302" fg:w="138"/><text x="72.0634%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (138 samples, 0.65%)</title><rect x="71.8134%" y="293" width="0.6476%" height="15" fill="rgb(229,154,42)" fg:x="15302" fg:w="138"/><text x="72.0634%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (138 samples, 0.65%)</title><rect x="71.8134%" y="277" width="0.6476%" height="15" fill="rgb(228,114,26)" fg:x="15302" fg:w="138"/><text x="72.0634%" y="287.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::{{closure}} (137 samples, 0.64%)</title><rect x="71.8181%" y="261" width="0.6430%" height="15" fill="rgb(208,144,1)" fg:x="15303" fg:w="137"/><text x="72.0681%" y="271.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold::{{closure}} (137 samples, 0.64%)</title><rect x="71.8181%" y="245" width="0.6430%" height="15" fill="rgb(239,112,37)" fg:x="15303" fg:w="137"/><text x="72.0681%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (137 samples, 0.64%)</title><rect x="71.8181%" y="229" width="0.6430%" height="15" fill="rgb(210,96,50)" fg:x="15303" fg:w="137"/><text x="72.0681%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (137 samples, 0.64%)</title><rect x="71.8181%" y="213" width="0.6430%" height="15" fill="rgb(222,178,2)" fg:x="15303" fg:w="137"/><text x="72.0681%" y="223.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::write_iter::{{closure}} (137 samples, 0.64%)</title><rect x="71.8181%" y="197" width="0.6430%" height="15" fill="rgb(226,74,18)" fg:x="15303" fg:w="137"/><text x="72.0681%" y="207.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (137 samples, 0.64%)</title><rect x="71.8181%" y="181" width="0.6430%" height="15" fill="rgb(225,67,54)" fg:x="15303" fg:w="137"/><text x="72.0681%" y="191.50"></text></g><g><title>core::ptr::write (137 samples, 0.64%)</title><rect x="71.8181%" y="165" width="0.6430%" height="15" fill="rgb(251,92,32)" fg:x="15303" fg:w="137"/><text x="72.0681%" y="175.50"></text></g><g><title>__memcpy_avx_unaligned_erms (136 samples, 0.64%)</title><rect x="71.8228%" y="149" width="0.6383%" height="15" fill="rgb(228,149,22)" fg:x="15304" fg:w="136"/><text x="72.0728%" y="159.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (327 samples, 1.53%)</title><rect x="70.9311%" y="405" width="1.5346%" height="15" fill="rgb(243,54,13)" fg:x="15114" fg:w="327"/><text x="71.1811%" y="415.50"></text></g><g><title>__memcpy_avx_unaligned_erms (114 samples, 0.54%)</title><rect x="72.4657%" y="405" width="0.5350%" height="15" fill="rgb(243,180,28)" fg:x="15441" fg:w="114"/><text x="72.7157%" y="415.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (8 samples, 0.04%)</title><rect x="73.0054%" y="405" width="0.0375%" height="15" fill="rgb(208,167,24)" fg:x="15556" fg:w="8"/><text x="73.2554%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (8 samples, 0.04%)</title><rect x="73.0054%" y="389" width="0.0375%" height="15" fill="rgb(245,73,45)" fg:x="15556" fg:w="8"/><text x="73.2554%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (7 samples, 0.03%)</title><rect x="73.0101%" y="373" width="0.0329%" height="15" fill="rgb(237,203,48)" fg:x="15557" fg:w="7"/><text x="73.2601%" y="383.50"></text></g><g><title>__memcpy_avx_unaligned_erms (41 samples, 0.19%)</title><rect x="73.7845%" y="389" width="0.1924%" height="15" fill="rgb(211,197,16)" fg:x="15722" fg:w="41"/><text x="74.0345%" y="399.50"></text></g><g><title>gb_rs::graphics::Tile::fetch_tile (207 samples, 0.97%)</title><rect x="73.0524%" y="405" width="0.9715%" height="15" fill="rgb(243,99,51)" fg:x="15566" fg:w="207"/><text x="73.3024%" y="415.50"></text></g><g><title>gb_rs::memory::Memory::read_byte (8 samples, 0.04%)</title><rect x="73.9863%" y="389" width="0.0375%" height="15" fill="rgb(215,123,29)" fg:x="15765" fg:w="8"/><text x="74.2363%" y="399.50"></text></g><g><title>core::ptr::read (12 samples, 0.06%)</title><rect x="74.0238%" y="325" width="0.0563%" height="15" fill="rgb(239,186,37)" fg:x="15773" fg:w="12"/><text x="74.2738%" y="335.50"></text></g><g><title>gb_rs::graphics::Tile::flip_x (15 samples, 0.07%)</title><rect x="74.0238%" y="405" width="0.0704%" height="15" fill="rgb(252,136,39)" fg:x="15773" fg:w="15"/><text x="74.2738%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse (15 samples, 0.07%)</title><rect x="74.0238%" y="389" width="0.0704%" height="15" fill="rgb(223,213,32)" fg:x="15773" fg:w="15"/><text x="74.2738%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse::revswap (15 samples, 0.07%)</title><rect x="74.0238%" y="373" width="0.0704%" height="15" fill="rgb(233,115,5)" fg:x="15773" fg:w="15"/><text x="74.2738%" y="383.50"></text></g><g><title>core::mem::swap (15 samples, 0.07%)</title><rect x="74.0238%" y="357" width="0.0704%" height="15" fill="rgb(207,226,44)" fg:x="15773" fg:w="15"/><text x="74.2738%" y="367.50"></text></g><g><title>core::mem::swap_simple (15 samples, 0.07%)</title><rect x="74.0238%" y="341" width="0.0704%" height="15" fill="rgb(208,126,0)" fg:x="15773" fg:w="15"/><text x="74.2738%" y="351.50"></text></g><g><title>core::ptr::write (3 samples, 0.01%)</title><rect x="74.0802%" y="325" width="0.0141%" height="15" fill="rgb(244,66,21)" fg:x="15785" fg:w="3"/><text x="74.3302%" y="335.50"></text></g><g><title>gb_rs::memory::Memory::read_byte (31 samples, 0.15%)</title><rect x="74.1083%" y="405" width="0.1455%" height="15" fill="rgb(222,97,12)" fg:x="15791" fg:w="31"/><text x="74.3583%" y="415.50"></text></g><g><title>gb_rs::utils::get_flag (3 samples, 0.01%)</title><rect x="74.2538%" y="405" width="0.0141%" height="15" fill="rgb(219,213,19)" fg:x="15822" fg:w="3"/><text x="74.5038%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::clear (3 samples, 0.01%)</title><rect x="74.2679%" y="405" width="0.0141%" height="15" fill="rgb(252,169,30)" fg:x="15825" fg:w="3"/><text x="74.5179%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::clear (3 samples, 0.01%)</title><rect x="74.2679%" y="389" width="0.0141%" height="15" fill="rgb(206,32,51)" fg:x="15825" fg:w="3"/><text x="74.5179%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clear (3 samples, 0.01%)</title><rect x="74.2679%" y="373" width="0.0141%" height="15" fill="rgb(250,172,42)" fg:x="15825" fg:w="3"/><text x="74.5179%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;&amp;mut hashbrown::raw::RawTable&lt;(usize,gb_rs::graphics::Object)&gt;,hashbrown::raw::RawTable&lt;(usize,gb_rs::graphics::Object)&gt;::clear::{{closure}}&gt;&gt; (3 samples, 0.01%)</title><rect x="74.2679%" y="357" width="0.0141%" height="15" fill="rgb(209,34,43)" fg:x="15825" fg:w="3"/><text x="74.5179%" y="367.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="74.2679%" y="341" width="0.0141%" height="15" fill="rgb(223,11,35)" fg:x="15825" fg:w="3"/><text x="74.5179%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clear::{{closure}} (3 samples, 0.01%)</title><rect x="74.2679%" y="325" width="0.0141%" height="15" fill="rgb(251,219,26)" fg:x="15825" fg:w="3"/><text x="74.5179%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clear_no_drop (3 samples, 0.01%)</title><rect x="74.2679%" y="309" width="0.0141%" height="15" fill="rgb(231,119,3)" fg:x="15825" fg:w="3"/><text x="74.5179%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::clear_no_drop (3 samples, 0.01%)</title><rect x="74.2679%" y="293" width="0.0141%" height="15" fill="rgb(216,97,11)" fg:x="15825" fg:w="3"/><text x="74.5179%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (3 samples, 0.01%)</title><rect x="74.2679%" y="277" width="0.0141%" height="15" fill="rgb(223,59,9)" fg:x="15825" fg:w="3"/><text x="74.5179%" y="287.50"></text></g><g><title>core::intrinsics::write_bytes (3 samples, 0.01%)</title><rect x="74.2679%" y="261" width="0.0141%" height="15" fill="rgb(233,93,31)" fg:x="15825" fg:w="3"/><text x="74.5179%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.02%)</title><rect x="74.3101%" y="293" width="0.0188%" height="15" fill="rgb(239,81,33)" fg:x="15834" fg:w="4"/><text x="74.5601%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (8 samples, 0.04%)</title><rect x="74.3101%" y="341" width="0.0375%" height="15" fill="rgb(213,120,34)" fg:x="15834" fg:w="8"/><text x="74.5601%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (8 samples, 0.04%)</title><rect x="74.3101%" y="325" width="0.0375%" height="15" fill="rgb(243,49,53)" fg:x="15834" fg:w="8"/><text x="74.5601%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (8 samples, 0.04%)</title><rect x="74.3101%" y="309" width="0.0375%" height="15" fill="rgb(247,216,33)" fg:x="15834" fg:w="8"/><text x="74.5601%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.02%)</title><rect x="74.3289%" y="293" width="0.0188%" height="15" fill="rgb(226,26,14)" fg:x="15838" fg:w="4"/><text x="74.5789%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (13 samples, 0.06%)</title><rect x="74.3054%" y="373" width="0.0610%" height="15" fill="rgb(215,49,53)" fg:x="15833" fg:w="13"/><text x="74.5554%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (13 samples, 0.06%)</title><rect x="74.3054%" y="357" width="0.0610%" height="15" fill="rgb(245,162,40)" fg:x="15833" fg:w="13"/><text x="74.5554%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.02%)</title><rect x="74.3477%" y="341" width="0.0188%" height="15" fill="rgb(229,68,17)" fg:x="15842" fg:w="4"/><text x="74.5977%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (4 samples, 0.02%)</title><rect x="74.3477%" y="325" width="0.0188%" height="15" fill="rgb(213,182,10)" fg:x="15842" fg:w="4"/><text x="74.5977%" y="335.50"></text></g><g><title>core::hash::Hasher::write_usize (4 samples, 0.02%)</title><rect x="74.3477%" y="309" width="0.0188%" height="15" fill="rgb(245,125,30)" fg:x="15842" fg:w="4"/><text x="74.5977%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="74.3477%" y="293" width="0.0188%" height="15" fill="rgb(232,202,2)" fg:x="15842" fg:w="4"/><text x="74.5977%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="74.3477%" y="277" width="0.0188%" height="15" fill="rgb(237,140,51)" fg:x="15842" fg:w="4"/><text x="74.5977%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="74.3477%" y="261" width="0.0188%" height="15" fill="rgb(236,157,25)" fg:x="15842" fg:w="4"/><text x="74.5977%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (3 samples, 0.01%)</title><rect x="74.3664%" y="357" width="0.0141%" height="15" fill="rgb(219,209,0)" fg:x="15846" fg:w="3"/><text x="74.6164%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.01%)</title><rect x="74.3664%" y="341" width="0.0141%" height="15" fill="rgb(240,116,54)" fg:x="15846" fg:w="3"/><text x="74.6164%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (3 samples, 0.01%)</title><rect x="74.3664%" y="325" width="0.0141%" height="15" fill="rgb(216,10,36)" fg:x="15846" fg:w="3"/><text x="74.6164%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (3 samples, 0.01%)</title><rect x="74.3664%" y="309" width="0.0141%" height="15" fill="rgb(222,72,44)" fg:x="15846" fg:w="3"/><text x="74.6164%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (3 samples, 0.01%)</title><rect x="74.3664%" y="293" width="0.0141%" height="15" fill="rgb(232,159,9)" fg:x="15846" fg:w="3"/><text x="74.6164%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (3 samples, 0.01%)</title><rect x="74.3664%" y="277" width="0.0141%" height="15" fill="rgb(210,39,32)" fg:x="15846" fg:w="3"/><text x="74.6164%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (3 samples, 0.01%)</title><rect x="74.3664%" y="261" width="0.0141%" height="15" fill="rgb(216,194,45)" fg:x="15846" fg:w="3"/><text x="74.6164%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (10 samples, 0.05%)</title><rect x="74.3664%" y="373" width="0.0469%" height="15" fill="rgb(218,18,35)" fg:x="15846" fg:w="10"/><text x="74.6164%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (7 samples, 0.03%)</title><rect x="74.3805%" y="357" width="0.0329%" height="15" fill="rgb(207,83,51)" fg:x="15849" fg:w="7"/><text x="74.6305%" y="367.50"></text></g><g><title>&lt;gb_rs::graphics::ObjFIFO as gb_rs::graphics::FIFO&gt;::next_line (1,104 samples, 5.18%)</title><rect x="69.2604%" y="421" width="5.1812%" height="15" fill="rgb(225,63,43)" fg:x="14758" fg:w="1104"/><text x="69.5104%" y="431.50">&lt;gb_rs..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (34 samples, 0.16%)</title><rect x="74.2820%" y="405" width="0.1596%" height="15" fill="rgb(207,57,36)" fg:x="15828" fg:w="34"/><text x="74.5320%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (33 samples, 0.15%)</title><rect x="74.2867%" y="389" width="0.1549%" height="15" fill="rgb(216,99,33)" fg:x="15829" fg:w="33"/><text x="74.5367%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (6 samples, 0.03%)</title><rect x="74.4134%" y="373" width="0.0282%" height="15" fill="rgb(225,42,16)" fg:x="15856" fg:w="6"/><text x="74.6634%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (6 samples, 0.03%)</title><rect x="74.4134%" y="357" width="0.0282%" height="15" fill="rgb(220,201,45)" fg:x="15856" fg:w="6"/><text x="74.6634%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::ptr (20 samples, 0.09%)</title><rect x="75.4083%" y="373" width="0.0939%" height="15" fill="rgb(225,33,4)" fg:x="16068" fg:w="20"/><text x="75.6583%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (20 samples, 0.09%)</title><rect x="75.4083%" y="357" width="0.0939%" height="15" fill="rgb(224,33,50)" fg:x="16068" fg:w="20"/><text x="75.6583%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (7 samples, 0.03%)</title><rect x="75.5022%" y="373" width="0.0329%" height="15" fill="rgb(246,198,51)" fg:x="16088" fg:w="7"/><text x="75.7522%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (80 samples, 0.38%)</title><rect x="75.4083%" y="389" width="0.3754%" height="15" fill="rgb(205,22,4)" fg:x="16068" fg:w="80"/><text x="75.6583%" y="399.50"></text></g><g><title>core::ptr::read (53 samples, 0.25%)</title><rect x="75.5350%" y="373" width="0.2487%" height="15" fill="rgb(206,3,8)" fg:x="16095" fg:w="53"/><text x="75.7850%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_empty (75 samples, 0.35%)</title><rect x="75.7837%" y="389" width="0.3520%" height="15" fill="rgb(251,23,15)" fg:x="16148" fg:w="75"/><text x="76.0337%" y="399.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (146 samples, 0.69%)</title><rect x="76.1357%" y="357" width="0.6852%" height="15" fill="rgb(252,88,28)" fg:x="16223" fg:w="146"/><text x="76.3857%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (518 samples, 2.43%)</title><rect x="74.4415%" y="405" width="2.4310%" height="15" fill="rgb(212,127,14)" fg:x="15862" fg:w="518"/><text x="74.6915%" y="415.50">al..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (157 samples, 0.74%)</title><rect x="76.1357%" y="389" width="0.7368%" height="15" fill="rgb(247,145,37)" fg:x="16223" fg:w="157"/><text x="76.3857%" y="399.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (157 samples, 0.74%)</title><rect x="76.1357%" y="373" width="0.7368%" height="15" fill="rgb(209,117,53)" fg:x="16223" fg:w="157"/><text x="76.3857%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (11 samples, 0.05%)</title><rect x="76.8209%" y="357" width="0.0516%" height="15" fill="rgb(212,90,42)" fg:x="16369" fg:w="11"/><text x="77.0709%" y="367.50"></text></g><g><title>&lt;gb_rs::graphics::ObjFIFO as gb_rs::graphics::FIFO&gt;::pop (532 samples, 2.50%)</title><rect x="74.4415%" y="421" width="2.4967%" height="15" fill="rgb(218,164,37)" fg:x="15862" fg:w="532"/><text x="74.6915%" y="431.50">&lt;g..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (14 samples, 0.07%)</title><rect x="76.8725%" y="405" width="0.0657%" height="15" fill="rgb(246,65,34)" fg:x="16380" fg:w="14"/><text x="77.1225%" y="415.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (12 samples, 0.06%)</title><rect x="76.9382%" y="421" width="0.0563%" height="15" fill="rgb(231,100,33)" fg:x="16394" fg:w="12"/><text x="77.1882%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (12 samples, 0.06%)</title><rect x="76.9382%" y="405" width="0.0563%" height="15" fill="rgb(228,126,14)" fg:x="16394" fg:w="12"/><text x="77.1882%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.01%)</title><rect x="77.8018%" y="245" width="0.0141%" height="15" fill="rgb(215,173,21)" fg:x="16578" fg:w="3"/><text x="78.0518%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.02%)</title><rect x="77.8018%" y="261" width="0.0235%" height="15" fill="rgb(210,6,40)" fg:x="16578" fg:w="5"/><text x="78.0518%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (12 samples, 0.06%)</title><rect x="77.8346%" y="245" width="0.0563%" height="15" fill="rgb(212,48,18)" fg:x="16585" fg:w="12"/><text x="78.0846%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (28 samples, 0.13%)</title><rect x="77.7877%" y="309" width="0.1314%" height="15" fill="rgb(230,214,11)" fg:x="16575" fg:w="28"/><text x="78.0377%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (28 samples, 0.13%)</title><rect x="77.7877%" y="293" width="0.1314%" height="15" fill="rgb(254,105,39)" fg:x="16575" fg:w="28"/><text x="78.0377%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (28 samples, 0.13%)</title><rect x="77.7877%" y="277" width="0.1314%" height="15" fill="rgb(245,158,5)" fg:x="16575" fg:w="28"/><text x="78.0377%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (20 samples, 0.09%)</title><rect x="77.8252%" y="261" width="0.0939%" height="15" fill="rgb(249,208,11)" fg:x="16583" fg:w="20"/><text x="78.0752%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (6 samples, 0.03%)</title><rect x="77.8909%" y="245" width="0.0282%" height="15" fill="rgb(210,39,28)" fg:x="16597" fg:w="6"/><text x="78.1409%" y="255.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (14 samples, 0.07%)</title><rect x="77.9191%" y="309" width="0.0657%" height="15" fill="rgb(211,56,53)" fg:x="16603" fg:w="14"/><text x="78.1691%" y="319.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (12 samples, 0.06%)</title><rect x="77.9285%" y="293" width="0.0563%" height="15" fill="rgb(226,201,30)" fg:x="16605" fg:w="12"/><text x="78.1785%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (12 samples, 0.06%)</title><rect x="77.9285%" y="277" width="0.0563%" height="15" fill="rgb(239,101,34)" fg:x="16605" fg:w="12"/><text x="78.1785%" y="287.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (12 samples, 0.06%)</title><rect x="77.9285%" y="261" width="0.0563%" height="15" fill="rgb(226,209,5)" fg:x="16605" fg:w="12"/><text x="78.1785%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (9 samples, 0.04%)</title><rect x="78.0130%" y="213" width="0.0422%" height="15" fill="rgb(250,105,47)" fg:x="16623" fg:w="9"/><text x="78.2630%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (16 samples, 0.08%)</title><rect x="77.9848%" y="261" width="0.0751%" height="15" fill="rgb(230,72,3)" fg:x="16617" fg:w="16"/><text x="78.2348%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (16 samples, 0.08%)</title><rect x="77.9848%" y="245" width="0.0751%" height="15" fill="rgb(232,218,39)" fg:x="16617" fg:w="16"/><text x="78.2348%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (16 samples, 0.08%)</title><rect x="77.9848%" y="229" width="0.0751%" height="15" fill="rgb(248,166,6)" fg:x="16617" fg:w="16"/><text x="78.2348%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (61 samples, 0.29%)</title><rect x="77.7830%" y="341" width="0.2863%" height="15" fill="rgb(247,89,20)" fg:x="16574" fg:w="61"/><text x="78.0330%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (60 samples, 0.28%)</title><rect x="77.7877%" y="325" width="0.2816%" height="15" fill="rgb(248,130,54)" fg:x="16575" fg:w="60"/><text x="78.0377%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (18 samples, 0.08%)</title><rect x="77.9848%" y="309" width="0.0845%" height="15" fill="rgb(234,196,4)" fg:x="16617" fg:w="18"/><text x="78.2348%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (18 samples, 0.08%)</title><rect x="77.9848%" y="293" width="0.0845%" height="15" fill="rgb(250,143,31)" fg:x="16617" fg:w="18"/><text x="78.2348%" y="303.50"></text></g><g><title>core::hash::Hasher::write_usize (18 samples, 0.08%)</title><rect x="77.9848%" y="277" width="0.0845%" height="15" fill="rgb(211,110,34)" fg:x="16617" fg:w="18"/><text x="78.2348%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.06%)</title><rect x="78.0787%" y="293" width="0.0563%" height="15" fill="rgb(215,124,48)" fg:x="16637" fg:w="12"/><text x="78.3287%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (10 samples, 0.05%)</title><rect x="78.0880%" y="277" width="0.0469%" height="15" fill="rgb(216,46,13)" fg:x="16639" fg:w="10"/><text x="78.3380%" y="287.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (12 samples, 0.06%)</title><rect x="78.1350%" y="277" width="0.0563%" height="15" fill="rgb(205,184,25)" fg:x="16649" fg:w="12"/><text x="78.3850%" y="287.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (12 samples, 0.06%)</title><rect x="78.1350%" y="261" width="0.0563%" height="15" fill="rgb(228,1,10)" fg:x="16649" fg:w="12"/><text x="78.3850%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (12 samples, 0.06%)</title><rect x="78.1350%" y="245" width="0.0563%" height="15" fill="rgb(213,116,27)" fg:x="16649" fg:w="12"/><text x="78.3850%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (12 samples, 0.06%)</title><rect x="78.1350%" y="229" width="0.0563%" height="15" fill="rgb(241,95,50)" fg:x="16649" fg:w="12"/><text x="78.3850%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (13 samples, 0.06%)</title><rect x="78.1350%" y="293" width="0.0610%" height="15" fill="rgb(238,48,32)" fg:x="16649" fg:w="13"/><text x="78.3850%" y="303.50"></text></g><g><title>hashbrown::raw::h2 (5 samples, 0.02%)</title><rect x="78.1960%" y="293" width="0.0235%" height="15" fill="rgb(235,113,49)" fg:x="16662" fg:w="5"/><text x="78.4460%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (5 samples, 0.02%)</title><rect x="78.2194%" y="293" width="0.0235%" height="15" fill="rgb(205,127,43)" fg:x="16667" fg:w="5"/><text x="78.4694%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (5 samples, 0.02%)</title><rect x="78.2194%" y="277" width="0.0235%" height="15" fill="rgb(250,162,2)" fg:x="16667" fg:w="5"/><text x="78.4694%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.02%)</title><rect x="78.2194%" y="261" width="0.0235%" height="15" fill="rgb(220,13,41)" fg:x="16667" fg:w="5"/><text x="78.4694%" y="271.50"></text></g><g><title>gb_rs::graphics::ObjFIFO::get_obj_attr (107 samples, 0.50%)</title><rect x="77.7595%" y="405" width="0.5022%" height="15" fill="rgb(249,221,25)" fg:x="16569" fg:w="107"/><text x="78.0095%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (107 samples, 0.50%)</title><rect x="77.7595%" y="389" width="0.5022%" height="15" fill="rgb(215,208,19)" fg:x="16569" fg:w="107"/><text x="78.0095%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (107 samples, 0.50%)</title><rect x="77.7595%" y="373" width="0.5022%" height="15" fill="rgb(236,175,2)" fg:x="16569" fg:w="107"/><text x="78.0095%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (107 samples, 0.50%)</title><rect x="77.7595%" y="357" width="0.5022%" height="15" fill="rgb(241,52,2)" fg:x="16569" fg:w="107"/><text x="78.0095%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (41 samples, 0.19%)</title><rect x="78.0693%" y="341" width="0.1924%" height="15" fill="rgb(248,140,14)" fg:x="16635" fg:w="41"/><text x="78.3193%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (41 samples, 0.19%)</title><rect x="78.0693%" y="325" width="0.1924%" height="15" fill="rgb(253,22,42)" fg:x="16635" fg:w="41"/><text x="78.3193%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (41 samples, 0.19%)</title><rect x="78.0693%" y="309" width="0.1924%" height="15" fill="rgb(234,61,47)" fg:x="16635" fg:w="41"/><text x="78.3193%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4 samples, 0.02%)</title><rect x="78.2429%" y="293" width="0.0188%" height="15" fill="rgb(208,226,15)" fg:x="16672" fg:w="4"/><text x="78.4929%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.02%)</title><rect x="78.2429%" y="277" width="0.0188%" height="15" fill="rgb(217,221,4)" fg:x="16672" fg:w="4"/><text x="78.4929%" y="287.50"></text></g><g><title>gb_rs::graphics::Graphics::mix (271 samples, 1.27%)</title><rect x="76.9946%" y="421" width="1.2718%" height="15" fill="rgb(212,174,34)" fg:x="16406" fg:w="271"/><text x="77.2446%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6 samples, 0.03%)</title><rect x="80.7349%" y="245" width="0.0282%" height="15" fill="rgb(253,83,4)" fg:x="17203" fg:w="6"/><text x="80.9849%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (15 samples, 0.07%)</title><rect x="80.7115%" y="261" width="0.0704%" height="15" fill="rgb(250,195,49)" fg:x="17198" fg:w="15"/><text x="80.9615%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.02%)</title><rect x="80.7631%" y="245" width="0.0188%" height="15" fill="rgb(241,192,25)" fg:x="17209" fg:w="4"/><text x="81.0131%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.02%)</title><rect x="80.7913%" y="245" width="0.0188%" height="15" fill="rgb(208,124,10)" fg:x="17215" fg:w="4"/><text x="81.0413%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (23 samples, 0.11%)</title><rect x="80.7068%" y="309" width="0.1079%" height="15" fill="rgb(222,33,0)" fg:x="17197" fg:w="23"/><text x="80.9568%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (23 samples, 0.11%)</title><rect x="80.7068%" y="293" width="0.1079%" height="15" fill="rgb(234,209,28)" fg:x="17197" fg:w="23"/><text x="80.9568%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (23 samples, 0.11%)</title><rect x="80.7068%" y="277" width="0.1079%" height="15" fill="rgb(224,11,23)" fg:x="17197" fg:w="23"/><text x="80.9568%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (7 samples, 0.03%)</title><rect x="80.7819%" y="261" width="0.0329%" height="15" fill="rgb(232,99,1)" fg:x="17213" fg:w="7"/><text x="81.0319%" y="271.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.01%)</title><rect x="80.8147%" y="309" width="0.0141%" height="15" fill="rgb(237,95,45)" fg:x="17220" fg:w="3"/><text x="81.0647%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.02%)</title><rect x="80.9039%" y="197" width="0.0188%" height="15" fill="rgb(208,109,11)" fg:x="17239" fg:w="4"/><text x="81.1539%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (9 samples, 0.04%)</title><rect x="80.8992%" y="213" width="0.0422%" height="15" fill="rgb(216,190,48)" fg:x="17238" fg:w="9"/><text x="81.1492%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.02%)</title><rect x="80.9227%" y="197" width="0.0188%" height="15" fill="rgb(251,171,36)" fg:x="17243" fg:w="4"/><text x="81.1727%" y="207.50"></text></g><g><title>core::hash::sip::u8to64_le (4 samples, 0.02%)</title><rect x="80.9414%" y="213" width="0.0188%" height="15" fill="rgb(230,62,22)" fg:x="17247" fg:w="4"/><text x="81.1914%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (28 samples, 0.13%)</title><rect x="80.8335%" y="261" width="0.1314%" height="15" fill="rgb(225,114,35)" fg:x="17224" fg:w="28"/><text x="81.0835%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (28 samples, 0.13%)</title><rect x="80.8335%" y="245" width="0.1314%" height="15" fill="rgb(215,118,42)" fg:x="17224" fg:w="28"/><text x="81.0835%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (28 samples, 0.13%)</title><rect x="80.8335%" y="229" width="0.1314%" height="15" fill="rgb(243,119,21)" fg:x="17224" fg:w="28"/><text x="81.0835%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (58 samples, 0.27%)</title><rect x="80.6974%" y="341" width="0.2722%" height="15" fill="rgb(252,177,53)" fg:x="17195" fg:w="58"/><text x="80.9474%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (57 samples, 0.27%)</title><rect x="80.7021%" y="325" width="0.2675%" height="15" fill="rgb(237,209,29)" fg:x="17196" fg:w="57"/><text x="80.9521%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (30 samples, 0.14%)</title><rect x="80.8288%" y="309" width="0.1408%" height="15" fill="rgb(212,65,23)" fg:x="17223" fg:w="30"/><text x="81.0788%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (29 samples, 0.14%)</title><rect x="80.8335%" y="293" width="0.1361%" height="15" fill="rgb(230,222,46)" fg:x="17224" fg:w="29"/><text x="81.0835%" y="303.50"></text></g><g><title>core::hash::Hasher::write_usize (29 samples, 0.14%)</title><rect x="80.8335%" y="277" width="0.1361%" height="15" fill="rgb(215,135,32)" fg:x="17224" fg:w="29"/><text x="81.0835%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.04%)</title><rect x="80.9696%" y="293" width="0.0375%" height="15" fill="rgb(246,101,22)" fg:x="17253" fg:w="8"/><text x="81.2196%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (8 samples, 0.04%)</title><rect x="80.9696%" y="277" width="0.0375%" height="15" fill="rgb(206,107,13)" fg:x="17253" fg:w="8"/><text x="81.2196%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (4 samples, 0.02%)</title><rect x="81.0071%" y="293" width="0.0188%" height="15" fill="rgb(250,100,44)" fg:x="17261" fg:w="4"/><text x="81.2571%" y="303.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (4 samples, 0.02%)</title><rect x="81.0071%" y="277" width="0.0188%" height="15" fill="rgb(231,147,38)" fg:x="17261" fg:w="4"/><text x="81.2571%" y="287.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (4 samples, 0.02%)</title><rect x="81.0071%" y="261" width="0.0188%" height="15" fill="rgb(229,8,40)" fg:x="17261" fg:w="4"/><text x="81.2571%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.02%)</title><rect x="81.0071%" y="245" width="0.0188%" height="15" fill="rgb(221,135,30)" fg:x="17261" fg:w="4"/><text x="81.2571%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (4 samples, 0.02%)</title><rect x="81.0071%" y="229" width="0.0188%" height="15" fill="rgb(249,193,18)" fg:x="17261" fg:w="4"/><text x="81.2571%" y="239.50"></text></g><g><title>gb_rs::graphics::ObjFIFO::get_obj_attr (72 samples, 0.34%)</title><rect x="80.6974%" y="405" width="0.3379%" height="15" fill="rgb(209,133,39)" fg:x="17195" fg:w="72"/><text x="80.9474%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (72 samples, 0.34%)</title><rect x="80.6974%" y="389" width="0.3379%" height="15" fill="rgb(232,100,14)" fg:x="17195" fg:w="72"/><text x="80.9474%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (72 samples, 0.34%)</title><rect x="80.6974%" y="373" width="0.3379%" height="15" fill="rgb(224,185,1)" fg:x="17195" fg:w="72"/><text x="80.9474%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (72 samples, 0.34%)</title><rect x="80.6974%" y="357" width="0.3379%" height="15" fill="rgb(223,139,8)" fg:x="17195" fg:w="72"/><text x="80.9474%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (14 samples, 0.07%)</title><rect x="80.9696%" y="341" width="0.0657%" height="15" fill="rgb(232,213,38)" fg:x="17253" fg:w="14"/><text x="81.2196%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (14 samples, 0.07%)</title><rect x="80.9696%" y="325" width="0.0657%" height="15" fill="rgb(207,94,22)" fg:x="17253" fg:w="14"/><text x="81.2196%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (14 samples, 0.07%)</title><rect x="80.9696%" y="309" width="0.0657%" height="15" fill="rgb(219,183,54)" fg:x="17253" fg:w="14"/><text x="81.2196%" y="319.50"></text></g><g><title>gb_rs::memory::Memory::read_byte (12 samples, 0.06%)</title><rect x="81.0353%" y="405" width="0.0563%" height="15" fill="rgb(216,185,54)" fg:x="17267" fg:w="12"/><text x="81.2853%" y="415.50"></text></g><g><title>gb_rs::graphics::Graphics::draw_scanline (9,010 samples, 42.28%)</title><rect x="38.8117%" y="437" width="42.2846%" height="15" fill="rgb(254,217,39)" fg:x="8270" fg:w="9010"/><text x="39.0617%" y="447.50">gb_rs::graphics::Graphics::draw_scanline</text></g><g><title>gb_rs::graphics::Graphics::pixel_to_color (603 samples, 2.83%)</title><rect x="78.2664%" y="421" width="2.8299%" height="15" fill="rgb(240,178,23)" fg:x="16677" fg:w="603"/><text x="78.5164%" y="431.50">gb..</text></g><g><title>gb_rs::graphics::Graphics::get_mode (120 samples, 0.56%)</title><rect x="81.0963%" y="437" width="0.5632%" height="15" fill="rgb(218,11,47)" fg:x="17280" fg:w="120"/><text x="81.3463%" y="447.50"></text></g><g><title>gb_rs::graphics::Graphics::set_lyc (3 samples, 0.01%)</title><rect x="81.6595%" y="437" width="0.0141%" height="15" fill="rgb(218,51,51)" fg:x="17400" fg:w="3"/><text x="81.9095%" y="447.50"></text></g><g><title>gb_rs::memory::Memory::read_byte (7 samples, 0.03%)</title><rect x="81.6829%" y="421" width="0.0329%" height="15" fill="rgb(238,126,27)" fg:x="17405" fg:w="7"/><text x="81.9329%" y="431.50"></text></g><g><title>gb_rs::graphics::Graphics::set_ppu (12 samples, 0.06%)</title><rect x="81.6735%" y="437" width="0.0563%" height="15" fill="rgb(249,202,22)" fg:x="17403" fg:w="12"/><text x="81.9235%" y="447.50"></text></g><g><title>gb_rs::memory::Memory::write_byte (3 samples, 0.01%)</title><rect x="81.7158%" y="421" width="0.0141%" height="15" fill="rgb(254,195,49)" fg:x="17412" fg:w="3"/><text x="81.9658%" y="431.50"></text></g><g><title>SDL_floor_REAL (3 samples, 0.01%)</title><rect x="81.7580%" y="373" width="0.0141%" height="15" fill="rgb(208,123,14)" fg:x="17421" fg:w="3"/><text x="82.0080%" y="383.50"></text></g><g><title>sdl2::render::Canvas&lt;T&gt;::copy (12 samples, 0.06%)</title><rect x="81.7299%" y="437" width="0.0563%" height="15" fill="rgb(224,200,8)" fg:x="17415" fg:w="12"/><text x="81.9799%" y="447.50"></text></g><g><title>SDL_RenderCopy_REAL (9 samples, 0.04%)</title><rect x="81.7439%" y="421" width="0.0422%" height="15" fill="rgb(217,61,36)" fg:x="17418" fg:w="9"/><text x="81.9939%" y="431.50"></text></g><g><title>PrepQueueCmdDraw (8 samples, 0.04%)</title><rect x="81.7486%" y="405" width="0.0375%" height="15" fill="rgb(206,35,45)" fg:x="17419" fg:w="8"/><text x="81.9986%" y="415.50"></text></g><g><title>QueueCmdSetViewport (7 samples, 0.03%)</title><rect x="81.7533%" y="389" width="0.0329%" height="15" fill="rgb(217,65,33)" fg:x="17420" fg:w="7"/><text x="82.0033%" y="399.50"></text></g><g><title>GL_RenderPresent (3 samples, 0.01%)</title><rect x="81.7862%" y="405" width="0.0141%" height="15" fill="rgb(222,158,48)" fg:x="17427" fg:w="3"/><text x="82.0362%" y="415.50"></text></g><g><title>GL_ActivateRenderer (3 samples, 0.01%)</title><rect x="81.7862%" y="389" width="0.0141%" height="15" fill="rgb(254,2,54)" fg:x="17427" fg:w="3"/><text x="82.0362%" y="399.50"></text></g><g><title>SDL_TLSGet_REAL (3 samples, 0.01%)</title><rect x="81.7862%" y="373" width="0.0141%" height="15" fill="rgb(250,143,38)" fg:x="17427" fg:w="3"/><text x="82.0362%" y="383.50"></text></g><g><title>SetDrawState (4 samples, 0.02%)</title><rect x="81.8284%" y="389" width="0.0188%" height="15" fill="rgb(248,25,0)" fg:x="17436" fg:w="4"/><text x="82.0784%" y="399.50"></text></g><g><title>_mesa_reference_texobj_ (5 samples, 0.02%)</title><rect x="81.8941%" y="325" width="0.0235%" height="15" fill="rgb(206,152,27)" fg:x="17450" fg:w="5"/><text x="82.1441%" y="335.50"></text></g><g><title>_mesa_delete_texture_object (3 samples, 0.01%)</title><rect x="81.9035%" y="309" width="0.0141%" height="15" fill="rgb(240,77,30)" fg:x="17452" fg:w="3"/><text x="82.1535%" y="319.50"></text></g><g><title>_mesa_update_state (13 samples, 0.06%)</title><rect x="81.8660%" y="373" width="0.0610%" height="15" fill="rgb(231,5,3)" fg:x="17444" fg:w="13"/><text x="82.1160%" y="383.50"></text></g><g><title>_mesa_update_state_locked (13 samples, 0.06%)</title><rect x="81.8660%" y="357" width="0.0610%" height="15" fill="rgb(207,226,32)" fg:x="17444" fg:w="13"/><text x="82.1160%" y="367.50"></text></g><g><title>_mesa_update_texture_state (11 samples, 0.05%)</title><rect x="81.8754%" y="341" width="0.0516%" height="15" fill="rgb(222,207,47)" fg:x="17446" fg:w="11"/><text x="82.1254%" y="351.50"></text></g><g><title>_mesa_DrawArrays (16 samples, 0.08%)</title><rect x="81.8613%" y="389" width="0.0751%" height="15" fill="rgb(229,115,45)" fg:x="17443" fg:w="16"/><text x="82.1113%" y="399.50"></text></g><g><title>_mesa_VertexPointer (4 samples, 0.02%)</title><rect x="81.9457%" y="389" width="0.0188%" height="15" fill="rgb(224,191,6)" fg:x="17461" fg:w="4"/><text x="82.1957%" y="399.50"></text></g><g><title>cso_set_vertex_buffers_and_elements (7 samples, 0.03%)</title><rect x="81.9927%" y="325" width="0.0329%" height="15" fill="rgb(230,227,24)" fg:x="17471" fg:w="7"/><text x="82.2427%" y="335.50"></text></g><g><title>u_vbuf_set_vertex_buffers (6 samples, 0.03%)</title><rect x="81.9974%" y="309" width="0.0282%" height="15" fill="rgb(228,80,19)" fg:x="17472" fg:w="6"/><text x="82.2474%" y="319.50"></text></g><g><title>st_update_array_with_popcnt (12 samples, 0.06%)</title><rect x="81.9739%" y="341" width="0.0563%" height="15" fill="rgb(247,229,0)" fg:x="17467" fg:w="12"/><text x="82.2239%" y="351.50"></text></g><g><title>st_update_framebuffer_state (9 samples, 0.04%)</title><rect x="82.0396%" y="341" width="0.0422%" height="15" fill="rgb(237,194,15)" fg:x="17481" fg:w="9"/><text x="82.2896%" y="351.50"></text></g><g><title>__calloc (3 samples, 0.01%)</title><rect x="82.1241%" y="261" width="0.0141%" height="15" fill="rgb(219,203,20)" fg:x="17499" fg:w="3"/><text x="82.3741%" y="271.50"></text></g><g><title>__popcountdi2 (3 samples, 0.01%)</title><rect x="82.1382%" y="261" width="0.0141%" height="15" fill="rgb(234,128,8)" fg:x="17502" fg:w="3"/><text x="82.3882%" y="271.50"></text></g><g><title>fill_surface_states.isra.0 (3 samples, 0.01%)</title><rect x="82.1569%" y="261" width="0.0141%" height="15" fill="rgb(248,202,8)" fg:x="17506" fg:w="3"/><text x="82.4069%" y="271.50"></text></g><g><title>isl_gfx9_surf_fill_state_s (3 samples, 0.01%)</title><rect x="82.1569%" y="245" width="0.0141%" height="15" fill="rgb(206,104,37)" fg:x="17506" fg:w="3"/><text x="82.4069%" y="255.50"></text></g><g><title>st_get_texture_sampler_view_from_stobj (16 samples, 0.08%)</title><rect x="82.1006%" y="309" width="0.0751%" height="15" fill="rgb(223,8,27)" fg:x="17494" fg:w="16"/><text x="82.3506%" y="319.50"></text></g><g><title>tc_create_sampler_view (13 samples, 0.06%)</title><rect x="82.1147%" y="293" width="0.0610%" height="15" fill="rgb(216,217,28)" fg:x="17497" fg:w="13"/><text x="82.3647%" y="303.50"></text></g><g><title>iris_create_sampler_view (13 samples, 0.06%)</title><rect x="82.1147%" y="277" width="0.0610%" height="15" fill="rgb(249,199,1)" fg:x="17497" fg:w="13"/><text x="82.3647%" y="287.50"></text></g><g><title>st_draw_gallium (49 samples, 0.23%)</title><rect x="81.9645%" y="373" width="0.2300%" height="15" fill="rgb(240,85,17)" fg:x="17465" fg:w="49"/><text x="82.2145%" y="383.50"></text></g><g><title>prepare_draw.constprop.0 (49 samples, 0.23%)</title><rect x="81.9645%" y="357" width="0.2300%" height="15" fill="rgb(206,108,45)" fg:x="17465" fg:w="49"/><text x="82.2145%" y="367.50"></text></g><g><title>update_textures (22 samples, 0.10%)</title><rect x="82.0912%" y="341" width="0.1032%" height="15" fill="rgb(245,210,41)" fg:x="17492" fg:w="22"/><text x="82.3412%" y="351.50"></text></g><g><title>st_get_sampler_views (22 samples, 0.10%)</title><rect x="82.0912%" y="325" width="0.1032%" height="15" fill="rgb(206,13,37)" fg:x="17492" fg:w="22"/><text x="82.3412%" y="335.50"></text></g><g><title>st_update_single_texture (4 samples, 0.02%)</title><rect x="82.1757%" y="309" width="0.0188%" height="15" fill="rgb(250,61,18)" fg:x="17510" fg:w="4"/><text x="82.4257%" y="319.50"></text></g><g><title>st_finalize_texture (3 samples, 0.01%)</title><rect x="82.1804%" y="293" width="0.0141%" height="15" fill="rgb(235,172,48)" fg:x="17511" fg:w="3"/><text x="82.4304%" y="303.50"></text></g><g><title>u_vbuf_set_driver_vertex_buffers (3 samples, 0.01%)</title><rect x="82.2179%" y="357" width="0.0141%" height="15" fill="rgb(249,201,17)" fg:x="17519" fg:w="3"/><text x="82.4679%" y="367.50"></text></g><g><title>tc_set_vertex_buffers (3 samples, 0.01%)</title><rect x="82.2179%" y="341" width="0.0141%" height="15" fill="rgb(219,208,6)" fg:x="17519" fg:w="3"/><text x="82.4679%" y="351.50"></text></g><g><title>GL_RunCommandQueue (93 samples, 0.44%)</title><rect x="81.8003%" y="405" width="0.4365%" height="15" fill="rgb(248,31,23)" fg:x="17430" fg:w="93"/><text x="82.0503%" y="415.50"></text></g><g><title>_mesa_draw_arrays.part.0 (58 samples, 0.27%)</title><rect x="81.9645%" y="389" width="0.2722%" height="15" fill="rgb(245,15,42)" fg:x="17465" fg:w="58"/><text x="82.2145%" y="399.50"></text></g><g><title>u_vbuf_draw_vbo (9 samples, 0.04%)</title><rect x="82.1945%" y="373" width="0.0422%" height="15" fill="rgb(222,217,39)" fg:x="17514" fg:w="9"/><text x="82.4445%" y="383.50"></text></g><g><title>CheckFork (3 samples, 0.01%)</title><rect x="82.2649%" y="373" width="0.0141%" height="15" fill="rgb(210,219,27)" fg:x="17529" fg:w="3"/><text x="82.5149%" y="383.50"></text></g><g><title>___pthread_mutex_lock (3 samples, 0.01%)</title><rect x="82.2977%" y="357" width="0.0141%" height="15" fill="rgb(252,166,36)" fg:x="17536" fg:w="3"/><text x="82.5477%" y="367.50"></text></g><g><title>_glapi_get_current@plt (3 samples, 0.01%)</title><rect x="82.3118%" y="357" width="0.0141%" height="15" fill="rgb(245,132,34)" fg:x="17539" fg:w="3"/><text x="82.5618%" y="367.50"></text></g><g><title>__glDispatchCheckMultithreaded (11 samples, 0.05%)</title><rect x="82.2790%" y="373" width="0.0516%" height="15" fill="rgb(236,54,3)" fg:x="17532" fg:w="11"/><text x="82.5290%" y="383.50"></text></g><g><title>__glXInitialize (3 samples, 0.01%)</title><rect x="82.3353%" y="373" width="0.0141%" height="15" fill="rgb(241,173,43)" fg:x="17544" fg:w="3"/><text x="82.5853%" y="383.50"></text></g><g><title>__glXVendorFromDrawable (6 samples, 0.03%)</title><rect x="82.3494%" y="373" width="0.0282%" height="15" fill="rgb(215,190,9)" fg:x="17547" fg:w="6"/><text x="82.5994%" y="383.50"></text></g><g><title>__glXLookupDisplay (5 samples, 0.02%)</title><rect x="82.3540%" y="357" width="0.0235%" height="15" fill="rgb(242,101,16)" fg:x="17548" fg:w="5"/><text x="82.6040%" y="367.50"></text></g><g><title>poll_for_next_event.part.0 (4 samples, 0.02%)</title><rect x="82.4104%" y="277" width="0.0188%" height="15" fill="rgb(223,190,21)" fg:x="17560" fg:w="4"/><text x="82.6604%" y="287.50"></text></g><g><title>poll_for_event (7 samples, 0.03%)</title><rect x="82.4104%" y="293" width="0.0329%" height="15" fill="rgb(215,228,25)" fg:x="17560" fg:w="7"/><text x="82.6604%" y="303.50"></text></g><g><title>_XEventsQueued (12 samples, 0.06%)</title><rect x="82.3963%" y="325" width="0.0563%" height="15" fill="rgb(225,36,22)" fg:x="17557" fg:w="12"/><text x="82.6463%" y="335.50"></text></g><g><title>poll_for_response (9 samples, 0.04%)</title><rect x="82.4104%" y="309" width="0.0422%" height="15" fill="rgb(251,106,46)" fg:x="17560" fg:w="9"/><text x="82.6604%" y="319.50"></text></g><g><title>_XGetRequest (22 samples, 0.10%)</title><rect x="82.3916%" y="341" width="0.1032%" height="15" fill="rgb(208,90,1)" fg:x="17556" fg:w="22"/><text x="82.6416%" y="351.50"></text></g><g><title>_XFlush (8 samples, 0.04%)</title><rect x="82.4573%" y="325" width="0.0375%" height="15" fill="rgb(243,10,4)" fg:x="17570" fg:w="8"/><text x="82.7073%" y="335.50"></text></g><g><title>xcb_take_socket (7 samples, 0.03%)</title><rect x="82.4620%" y="309" width="0.0329%" height="15" fill="rgb(212,137,27)" fg:x="17571" fg:w="7"/><text x="82.7120%" y="319.50"></text></g><g><title>_xcb_out_flush_to (7 samples, 0.03%)</title><rect x="82.4620%" y="293" width="0.0329%" height="15" fill="rgb(231,220,49)" fg:x="17571" fg:w="7"/><text x="82.7120%" y="303.50"></text></g><g><title>_xcb_conn_wait (6 samples, 0.03%)</title><rect x="82.4667%" y="277" width="0.0282%" height="15" fill="rgb(237,96,20)" fg:x="17572" fg:w="6"/><text x="82.7167%" y="287.50"></text></g><g><title>_XSend (7 samples, 0.03%)</title><rect x="82.5042%" y="325" width="0.0329%" height="15" fill="rgb(239,229,30)" fg:x="17580" fg:w="7"/><text x="82.7542%" y="335.50"></text></g><g><title>xcb_writev (5 samples, 0.02%)</title><rect x="82.5136%" y="309" width="0.0235%" height="15" fill="rgb(219,65,33)" fg:x="17582" fg:w="5"/><text x="82.7636%" y="319.50"></text></g><g><title>dri2GetGlxDrawableFromXDrawableId (3 samples, 0.01%)</title><rect x="82.5605%" y="277" width="0.0141%" height="15" fill="rgb(243,134,7)" fg:x="17592" fg:w="3"/><text x="82.8105%" y="287.50"></text></g><g><title>__glxHashLookup (3 samples, 0.01%)</title><rect x="82.5605%" y="261" width="0.0141%" height="15" fill="rgb(216,177,54)" fg:x="17592" fg:w="3"/><text x="82.8105%" y="271.50"></text></g><g><title>HashFind (3 samples, 0.01%)</title><rect x="82.5605%" y="245" width="0.0141%" height="15" fill="rgb(211,160,20)" fg:x="17592" fg:w="3"/><text x="82.8105%" y="255.50"></text></g><g><title>_XEnq (7 samples, 0.03%)</title><rect x="82.5512%" y="309" width="0.0329%" height="15" fill="rgb(239,85,39)" fg:x="17590" fg:w="7"/><text x="82.8012%" y="319.50"></text></g><g><title>DRI2WireToEvent (6 samples, 0.03%)</title><rect x="82.5558%" y="293" width="0.0282%" height="15" fill="rgb(232,125,22)" fg:x="17591" fg:w="6"/><text x="82.8058%" y="303.50"></text></g><g><title>handle_response (8 samples, 0.04%)</title><rect x="82.5512%" y="325" width="0.0375%" height="15" fill="rgb(244,57,34)" fg:x="17590" fg:w="8"/><text x="82.8012%" y="335.50"></text></g><g><title>poll_for_response (6 samples, 0.03%)</title><rect x="82.5887%" y="325" width="0.0282%" height="15" fill="rgb(214,203,32)" fg:x="17598" fg:w="6"/><text x="82.8387%" y="335.50"></text></g><g><title>poll_for_event (6 samples, 0.03%)</title><rect x="82.5887%" y="309" width="0.0282%" height="15" fill="rgb(207,58,43)" fg:x="17598" fg:w="6"/><text x="82.8387%" y="319.50"></text></g><g><title>poll_for_next_event.part.0 (5 samples, 0.02%)</title><rect x="82.5934%" y="293" width="0.0235%" height="15" fill="rgb(215,193,15)" fg:x="17599" fg:w="5"/><text x="82.8434%" y="303.50"></text></g><g><title>_xcb_in_read (3 samples, 0.01%)</title><rect x="82.6028%" y="277" width="0.0141%" height="15" fill="rgb(232,15,44)" fg:x="17601" fg:w="3"/><text x="82.8528%" y="287.50"></text></g><g><title>pthread_cond_broadcast@plt (3 samples, 0.01%)</title><rect x="82.6169%" y="325" width="0.0141%" height="15" fill="rgb(212,3,48)" fg:x="17604" fg:w="3"/><text x="82.8669%" y="335.50"></text></g><g><title>___pthread_mutex_lock (3 samples, 0.01%)</title><rect x="82.6450%" y="277" width="0.0141%" height="15" fill="rgb(218,128,7)" fg:x="17610" fg:w="3"/><text x="82.8950%" y="287.50"></text></g><g><title>__libc_poll (7 samples, 0.03%)</title><rect x="82.6591%" y="277" width="0.0329%" height="15" fill="rgb(226,216,39)" fg:x="17613" fg:w="7"/><text x="82.9091%" y="287.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.01%)</title><rect x="82.7013%" y="261" width="0.0141%" height="15" fill="rgb(243,47,51)" fg:x="17622" fg:w="3"/><text x="82.9513%" y="271.50"></text></g><g><title>_xcb_conn_wait (19 samples, 0.09%)</title><rect x="82.6403%" y="293" width="0.0892%" height="15" fill="rgb(241,183,40)" fg:x="17609" fg:w="19"/><text x="82.8903%" y="303.50"></text></g><g><title>_xcb_in_read (8 samples, 0.04%)</title><rect x="82.6919%" y="277" width="0.0375%" height="15" fill="rgb(231,217,32)" fg:x="17620" fg:w="8"/><text x="82.9419%" y="287.50"></text></g><g><title>_XReply (50 samples, 0.23%)</title><rect x="82.4995%" y="341" width="0.2347%" height="15" fill="rgb(229,61,38)" fg:x="17579" fg:w="50"/><text x="82.7495%" y="351.50"></text></g><g><title>xcb_wait_for_reply64 (22 samples, 0.10%)</title><rect x="82.6309%" y="325" width="0.1032%" height="15" fill="rgb(225,210,5)" fg:x="17607" fg:w="22"/><text x="82.8809%" y="335.50"></text></g><g><title>wait_for_reply (21 samples, 0.10%)</title><rect x="82.6356%" y="309" width="0.0986%" height="15" fill="rgb(231,79,45)" fg:x="17608" fg:w="21"/><text x="82.8856%" y="319.50"></text></g><g><title>XSync (74 samples, 0.35%)</title><rect x="82.3916%" y="357" width="0.3473%" height="15" fill="rgb(224,100,7)" fg:x="17556" fg:w="74"/><text x="82.6416%" y="367.50"></text></g><g><title>iris_fence_reference (3 samples, 0.01%)</title><rect x="82.7576%" y="341" width="0.0141%" height="15" fill="rgb(241,198,18)" fg:x="17634" fg:w="3"/><text x="83.0076%" y="351.50"></text></g><g><title>tc_call_bind_sampler_states (4 samples, 0.02%)</title><rect x="82.8046%" y="277" width="0.0188%" height="15" fill="rgb(252,97,53)" fg:x="17644" fg:w="4"/><text x="83.0546%" y="287.50"></text></g><g><title>iris_bind_sampler_states (4 samples, 0.02%)</title><rect x="82.8046%" y="261" width="0.0188%" height="15" fill="rgb(220,88,7)" fg:x="17644" fg:w="4"/><text x="83.0546%" y="271.50"></text></g><g><title>blorp_alloc_vertex_buffer.isra.0 (6 samples, 0.03%)</title><rect x="82.8984%" y="181" width="0.0282%" height="15" fill="rgb(213,176,14)" fg:x="17664" fg:w="6"/><text x="83.1484%" y="191.50"></text></g><g><title>stream_state (5 samples, 0.02%)</title><rect x="82.9031%" y="165" width="0.0235%" height="15" fill="rgb(246,73,7)" fg:x="17665" fg:w="5"/><text x="83.1531%" y="175.50"></text></g><g><title>blorp_emit_pipeline (6 samples, 0.03%)</title><rect x="82.9266%" y="181" width="0.0282%" height="15" fill="rgb(245,64,36)" fg:x="17670" fg:w="6"/><text x="83.1766%" y="191.50"></text></g><g><title>blorp_emit_surface_state.constprop.0 (4 samples, 0.02%)</title><rect x="82.9595%" y="165" width="0.0188%" height="15" fill="rgb(245,80,10)" fg:x="17677" fg:w="4"/><text x="83.2095%" y="175.50"></text></g><g><title>blorp_setup_binding_table (7 samples, 0.03%)</title><rect x="82.9548%" y="181" width="0.0329%" height="15" fill="rgb(232,107,50)" fg:x="17676" fg:w="7"/><text x="83.2048%" y="191.50"></text></g><g><title>iris_blorp_exec (28 samples, 0.13%)</title><rect x="82.8609%" y="213" width="0.1314%" height="15" fill="rgb(253,3,0)" fg:x="17656" fg:w="28"/><text x="83.1109%" y="223.50"></text></g><g><title>blorp_exec (27 samples, 0.13%)</title><rect x="82.8656%" y="197" width="0.1267%" height="15" fill="rgb(212,99,53)" fg:x="17657" fg:w="27"/><text x="83.1156%" y="207.50"></text></g><g><title>hash_table_search (4 samples, 0.02%)</title><rect x="83.0158%" y="181" width="0.0188%" height="15" fill="rgb(249,111,54)" fg:x="17689" fg:w="4"/><text x="83.2658%" y="191.50"></text></g><g><title>keybox_equals (4 samples, 0.02%)</title><rect x="83.0158%" y="165" width="0.0188%" height="15" fill="rgb(249,55,30)" fg:x="17689" fg:w="4"/><text x="83.2658%" y="175.50"></text></g><g><title>__memcmp_avx2_movbe (3 samples, 0.01%)</title><rect x="83.0205%" y="149" width="0.0141%" height="15" fill="rgb(237,47,42)" fg:x="17690" fg:w="3"/><text x="83.2705%" y="159.50"></text></g><g><title>iris_find_cached_shader (8 samples, 0.04%)</title><rect x="83.0017%" y="197" width="0.0375%" height="15" fill="rgb(211,20,18)" fg:x="17686" fg:w="8"/><text x="83.2517%" y="207.50"></text></g><g><title>blorp_blit (47 samples, 0.22%)</title><rect x="82.8234%" y="245" width="0.2206%" height="15" fill="rgb(231,203,46)" fg:x="17648" fg:w="47"/><text x="83.0734%" y="255.50"></text></g><g><title>do_blorp_blit (46 samples, 0.22%)</title><rect x="82.8280%" y="229" width="0.2159%" height="15" fill="rgb(237,142,3)" fg:x="17649" fg:w="46"/><text x="83.0780%" y="239.50"></text></g><g><title>iris_blorp_lookup_shader (11 samples, 0.05%)</title><rect x="82.9923%" y="213" width="0.0516%" height="15" fill="rgb(241,107,1)" fg:x="17684" fg:w="11"/><text x="83.2423%" y="223.50"></text></g><g><title>hash_table_search (3 samples, 0.01%)</title><rect x="83.0768%" y="213" width="0.0141%" height="15" fill="rgb(229,83,13)" fg:x="17702" fg:w="3"/><text x="83.3268%" y="223.50"></text></g><g><title>iris_resource_prepare_render (6 samples, 0.03%)</title><rect x="83.0674%" y="245" width="0.0282%" height="15" fill="rgb(241,91,40)" fg:x="17700" fg:w="6"/><text x="83.3174%" y="255.50"></text></g><g><title>iris_resource_prepare_access.part.0 (6 samples, 0.03%)</title><rect x="83.0674%" y="229" width="0.0282%" height="15" fill="rgb(225,3,45)" fg:x="17700" fg:w="6"/><text x="83.3174%" y="239.50"></text></g><g><title>iris_blit (61 samples, 0.29%)</title><rect x="82.8234%" y="261" width="0.2863%" height="15" fill="rgb(244,223,14)" fg:x="17648" fg:w="61"/><text x="83.0734%" y="271.50"></text></g><g><title>tc_call_blit (62 samples, 0.29%)</title><rect x="82.8234%" y="277" width="0.2910%" height="15" fill="rgb(224,124,37)" fg:x="17648" fg:w="62"/><text x="83.0734%" y="287.50"></text></g><g><title>iris_postdraw_update_resolve_tracking (3 samples, 0.01%)</title><rect x="83.1331%" y="245" width="0.0141%" height="15" fill="rgb(251,171,30)" fg:x="17714" fg:w="3"/><text x="83.3831%" y="255.50"></text></g><g><title>iris_emit_buffer_barrier_for (7 samples, 0.03%)</title><rect x="83.1706%" y="229" width="0.0329%" height="15" fill="rgb(236,46,54)" fg:x="17722" fg:w="7"/><text x="83.4206%" y="239.50"></text></g><g><title>iris_emit_raw_pipe_control (4 samples, 0.02%)</title><rect x="83.1847%" y="213" width="0.0188%" height="15" fill="rgb(245,213,5)" fg:x="17725" fg:w="4"/><text x="83.4347%" y="223.50"></text></g><g><title>iris_predraw_resolve_inputs (14 samples, 0.07%)</title><rect x="83.1613%" y="245" width="0.0657%" height="15" fill="rgb(230,144,27)" fg:x="17720" fg:w="14"/><text x="83.4113%" y="255.50"></text></g><g><title>iris_resource_prepare_texture (3 samples, 0.01%)</title><rect x="83.2129%" y="229" width="0.0141%" height="15" fill="rgb(220,86,6)" fg:x="17731" fg:w="3"/><text x="83.4629%" y="239.50"></text></g><g><title>iris_update_compiled_shaders (5 samples, 0.02%)</title><rect x="83.2270%" y="245" width="0.0235%" height="15" fill="rgb(240,20,13)" fg:x="17734" fg:w="5"/><text x="83.4770%" y="255.50"></text></g><g><title>iris_emit_sbe (5 samples, 0.02%)</title><rect x="83.3865%" y="229" width="0.0235%" height="15" fill="rgb(217,89,34)" fg:x="17768" fg:w="5"/><text x="83.6365%" y="239.50"></text></g><g><title>iris_populate_binding_table (10 samples, 0.05%)</title><rect x="83.4100%" y="229" width="0.0469%" height="15" fill="rgb(229,13,5)" fg:x="17773" fg:w="10"/><text x="83.6600%" y="239.50"></text></g><g><title>iris_use_pinned_bo (3 samples, 0.01%)</title><rect x="83.4569%" y="229" width="0.0141%" height="15" fill="rgb(244,67,35)" fg:x="17783" fg:w="3"/><text x="83.7069%" y="239.50"></text></g><g><title>tc_call_draw_single (81 samples, 0.38%)</title><rect x="83.1143%" y="277" width="0.3801%" height="15" fill="rgb(221,40,2)" fg:x="17710" fg:w="81"/><text x="83.3643%" y="287.50"></text></g><g><title>iris_draw_vbo (80 samples, 0.38%)</title><rect x="83.1190%" y="261" width="0.3754%" height="15" fill="rgb(237,157,21)" fg:x="17711" fg:w="80"/><text x="83.3690%" y="271.50"></text></g><g><title>iris_upload_render_state (52 samples, 0.24%)</title><rect x="83.2504%" y="245" width="0.2440%" height="15" fill="rgb(222,94,11)" fg:x="17739" fg:w="52"/><text x="83.5004%" y="255.50"></text></g><g><title>iris_sampler_view_destroy (6 samples, 0.03%)</title><rect x="83.5132%" y="245" width="0.0282%" height="15" fill="rgb(249,113,6)" fg:x="17795" fg:w="6"/><text x="83.7632%" y="255.50"></text></g><g><title>iris_resource_destroy (3 samples, 0.01%)</title><rect x="83.5273%" y="229" width="0.0141%" height="15" fill="rgb(238,137,36)" fg:x="17798" fg:w="3"/><text x="83.7773%" y="239.50"></text></g><g><title>tc_call_set_sampler_views (11 samples, 0.05%)</title><rect x="83.4945%" y="277" width="0.0516%" height="15" fill="rgb(210,102,26)" fg:x="17791" fg:w="11"/><text x="83.7445%" y="287.50"></text></g><g><title>iris_set_sampler_views (11 samples, 0.05%)</title><rect x="83.4945%" y="261" width="0.0516%" height="15" fill="rgb(218,30,30)" fg:x="17791" fg:w="11"/><text x="83.7445%" y="271.50"></text></g><g><title>_tc_sync.constprop.0 (166 samples, 0.78%)</title><rect x="82.7905%" y="309" width="0.7791%" height="15" fill="rgb(214,67,26)" fg:x="17641" fg:w="166"/><text x="83.0405%" y="319.50"></text></g><g><title>tc_batch_execute (165 samples, 0.77%)</title><rect x="82.7952%" y="293" width="0.7744%" height="15" fill="rgb(251,9,53)" fg:x="17642" fg:w="165"/><text x="83.0452%" y="303.50"></text></g><g><title>tc_call_texture_unmap (4 samples, 0.02%)</title><rect x="83.5508%" y="277" width="0.0188%" height="15" fill="rgb(228,204,25)" fg:x="17803" fg:w="4"/><text x="83.8008%" y="287.50"></text></g><g><title>u_transfer_helper_transfer_unmap (3 samples, 0.01%)</title><rect x="83.5555%" y="261" width="0.0141%" height="15" fill="rgb(207,153,8)" fg:x="17804" fg:w="3"/><text x="83.8055%" y="271.50"></text></g><g><title>__calloc (3 samples, 0.01%)</title><rect x="83.6587%" y="261" width="0.0141%" height="15" fill="rgb(242,9,16)" fg:x="17826" fg:w="3"/><text x="83.9087%" y="271.50"></text></g><g><title>iris_batch_update_syncobjs (12 samples, 0.06%)</title><rect x="83.6822%" y="261" width="0.0563%" height="15" fill="rgb(217,211,10)" fg:x="17831" fg:w="12"/><text x="83.9322%" y="271.50"></text></g><g><title>i915_batch_submit (30 samples, 0.14%)</title><rect x="83.6118%" y="277" width="0.1408%" height="15" fill="rgb(219,228,52)" fg:x="17816" fg:w="30"/><text x="83.8618%" y="287.50"></text></g><g><title>iris_bo_unreference.part.0 (3 samples, 0.01%)</title><rect x="83.7385%" y="261" width="0.0141%" height="15" fill="rgb(231,92,29)" fg:x="17843" fg:w="3"/><text x="83.9885%" y="271.50"></text></g><g><title>iris_bo_alloc (3 samples, 0.01%)</title><rect x="83.7620%" y="245" width="0.0141%" height="15" fill="rgb(232,8,23)" fg:x="17848" fg:w="3"/><text x="84.0120%" y="255.50"></text></g><g><title>create_batch (6 samples, 0.03%)</title><rect x="83.7620%" y="261" width="0.0282%" height="15" fill="rgb(216,211,34)" fg:x="17848" fg:w="6"/><text x="84.0120%" y="271.50"></text></g><g><title>iris_bo_map (3 samples, 0.01%)</title><rect x="83.7760%" y="245" width="0.0141%" height="15" fill="rgb(236,151,0)" fg:x="17851" fg:w="3"/><text x="84.0260%" y="255.50"></text></g><g><title>iris_batch_reset (10 samples, 0.05%)</title><rect x="83.7526%" y="277" width="0.0469%" height="15" fill="rgb(209,168,3)" fg:x="17846" fg:w="10"/><text x="84.0026%" y="287.50"></text></g><g><title>iris_fine_fence_new (13 samples, 0.06%)</title><rect x="83.7995%" y="277" width="0.0610%" height="15" fill="rgb(208,129,28)" fg:x="17856" fg:w="13"/><text x="84.0495%" y="287.50"></text></g><g><title>iris_emit_raw_pipe_control (8 samples, 0.04%)</title><rect x="83.8230%" y="261" width="0.0375%" height="15" fill="rgb(229,78,22)" fg:x="17861" fg:w="8"/><text x="84.0730%" y="271.50"></text></g><g><title>_iris_batch_flush (56 samples, 0.26%)</title><rect x="83.6024%" y="293" width="0.2628%" height="15" fill="rgb(228,187,13)" fg:x="17814" fg:w="56"/><text x="83.8524%" y="303.50"></text></g><g><title>iris_flush_dirty_dmabufs (4 samples, 0.02%)</title><rect x="83.8699%" y="293" width="0.0188%" height="15" fill="rgb(240,119,24)" fg:x="17871" fg:w="4"/><text x="84.1199%" y="303.50"></text></g><g><title>_mesa_set_next_entry (4 samples, 0.02%)</title><rect x="83.8699%" y="277" width="0.0188%" height="15" fill="rgb(209,194,42)" fg:x="17871" fg:w="4"/><text x="84.1199%" y="287.50"></text></g><g><title>tc_flush (237 samples, 1.11%)</title><rect x="82.7858%" y="325" width="1.1123%" height="15" fill="rgb(247,200,46)" fg:x="17640" fg:w="237"/><text x="83.0358%" y="335.50"></text></g><g><title>iris_fence_flush (70 samples, 0.33%)</title><rect x="83.5696%" y="309" width="0.3285%" height="15" fill="rgb(218,76,16)" fg:x="17807" fg:w="70"/><text x="83.8196%" y="319.50"></text></g><g><title>st_context_flush (242 samples, 1.14%)</title><rect x="82.7717%" y="341" width="1.1357%" height="15" fill="rgb(225,21,48)" fg:x="17637" fg:w="242"/><text x="83.0217%" y="351.50"></text></g><g><title>dri_flush (252 samples, 1.18%)</title><rect x="82.7389%" y="357" width="1.1827%" height="15" fill="rgb(239,223,50)" fg:x="17630" fg:w="252"/><text x="82.9889%" y="367.50"></text></g><g><title>xcb_send_request (8 samples, 0.04%)</title><rect x="83.9309%" y="341" width="0.0375%" height="15" fill="rgb(244,45,21)" fg:x="17884" fg:w="8"/><text x="84.1809%" y="351.50"></text></g><g><title>xcb_send_request_with_fds64 (7 samples, 0.03%)</title><rect x="83.9356%" y="325" width="0.0329%" height="15" fill="rgb(232,33,43)" fg:x="17885" fg:w="7"/><text x="84.1856%" y="335.50"></text></g><g><title>xcb_get_extension_data (3 samples, 0.01%)</title><rect x="83.9544%" y="309" width="0.0141%" height="15" fill="rgb(209,8,3)" fg:x="17889" fg:w="3"/><text x="84.2044%" y="319.50"></text></g><g><title>xcb_dri2_swap_buffers_unchecked (9 samples, 0.04%)</title><rect x="83.9309%" y="357" width="0.0422%" height="15" fill="rgb(214,25,53)" fg:x="17884" fg:w="9"/><text x="84.1809%" y="367.50"></text></g><g><title>sdl2::render::Canvas&lt;T&gt;::present (469 samples, 2.20%)</title><rect x="81.7862%" y="437" width="2.2011%" height="15" fill="rgb(254,186,54)" fg:x="17427" fg:w="469"/><text x="82.0362%" y="447.50">s..</text></g><g><title>SDL_RenderPresent_REAL (469 samples, 2.20%)</title><rect x="81.7862%" y="421" width="2.2011%" height="15" fill="rgb(208,174,49)" fg:x="17427" fg:w="469"/><text x="82.0362%" y="431.50">S..</text></g><g><title>X11_GL_SwapWindow (372 samples, 1.75%)</title><rect x="82.2414%" y="405" width="1.7458%" height="15" fill="rgb(233,191,51)" fg:x="17524" fg:w="372"/><text x="82.4914%" y="415.50"></text></g><g><title>glXSwapBuffers (371 samples, 1.74%)</title><rect x="82.2461%" y="389" width="1.7411%" height="15" fill="rgb(222,134,10)" fg:x="17525" fg:w="371"/><text x="82.4961%" y="399.50"></text></g><g><title>dri2SwapBuffers (342 samples, 1.61%)</title><rect x="82.3822%" y="373" width="1.6050%" height="15" fill="rgb(230,226,20)" fg:x="17554" fg:w="342"/><text x="82.6322%" y="383.50"></text></g><g><title>xcb_wait_for_reply (3 samples, 0.01%)</title><rect x="83.9732%" y="357" width="0.0141%" height="15" fill="rgb(251,111,25)" fg:x="17893" fg:w="3"/><text x="84.2232%" y="367.50"></text></g><g><title>SDL_CalculateBlit (5 samples, 0.02%)</title><rect x="83.9919%" y="373" width="0.0235%" height="15" fill="rgb(224,40,46)" fg:x="17897" fg:w="5"/><text x="84.2419%" y="383.50"></text></g><g><title>SDL_CalculateBlitN (5 samples, 0.02%)</title><rect x="83.9919%" y="357" width="0.0235%" height="15" fill="rgb(236,108,47)" fg:x="17897" fg:w="5"/><text x="84.2419%" y="367.50"></text></g><g><title>SDL_InitFormat (6 samples, 0.03%)</title><rect x="84.0154%" y="373" width="0.0282%" height="15" fill="rgb(234,93,0)" fg:x="17902" fg:w="6"/><text x="84.2654%" y="383.50"></text></g><g><title>SDL_SoftBlit (179 samples, 0.84%)</title><rect x="84.0529%" y="373" width="0.8401%" height="15" fill="rgb(224,213,32)" fg:x="17910" fg:w="179"/><text x="84.3029%" y="383.50"></text></g><g><title>Blit_3or4_to_3or4__inversed_rgb (178 samples, 0.84%)</title><rect x="84.0576%" y="357" width="0.8354%" height="15" fill="rgb(251,11,48)" fg:x="17911" fg:w="178"/><text x="84.3076%" y="367.50"></text></g><g><title>SDL_ConvertPixels_REAL (194 samples, 0.91%)</title><rect x="83.9919%" y="389" width="0.9105%" height="15" fill="rgb(236,173,5)" fg:x="17897" fg:w="194"/><text x="84.2419%" y="399.50"></text></g><g><title>GL_ActivateRenderer (3 samples, 0.01%)</title><rect x="84.9024%" y="357" width="0.0141%" height="15" fill="rgb(230,95,12)" fg:x="18091" fg:w="3"/><text x="85.1524%" y="367.50"></text></g><g><title>SDL_TLSGet_REAL (3 samples, 0.01%)</title><rect x="84.9024%" y="341" width="0.0141%" height="15" fill="rgb(232,209,1)" fg:x="18091" fg:w="3"/><text x="85.1524%" y="351.50"></text></g><g><title>texsubimage_error_check (5 samples, 0.02%)</title><rect x="84.9352%" y="325" width="0.0235%" height="15" fill="rgb(232,6,1)" fg:x="18098" fg:w="5"/><text x="85.1852%" y="335.50"></text></g><g><title>__memcpy_avx_unaligned_erms (43 samples, 0.20%)</title><rect x="84.9822%" y="293" width="0.2018%" height="15" fill="rgb(210,224,50)" fg:x="18108" fg:w="43"/><text x="85.2322%" y="303.50"></text></g><g><title>_mesa_bytes_per_pixel (8 samples, 0.04%)</title><rect x="85.2966%" y="261" width="0.0375%" height="15" fill="rgb(228,127,35)" fg:x="18175" fg:w="8"/><text x="85.5466%" y="271.50"></text></g><g><title>_mesa_components_in_format (4 samples, 0.02%)</title><rect x="85.3154%" y="245" width="0.0188%" height="15" fill="rgb(245,102,45)" fg:x="18179" fg:w="4"/><text x="85.5654%" y="255.50"></text></g><g><title>_mesa_image_address (33 samples, 0.15%)</title><rect x="85.1840%" y="293" width="0.1549%" height="15" fill="rgb(214,1,49)" fg:x="18151" fg:w="33"/><text x="85.4340%" y="303.50"></text></g><g><title>_mesa_image_offset (32 samples, 0.15%)</title><rect x="85.1887%" y="277" width="0.1502%" height="15" fill="rgb(226,163,40)" fg:x="18152" fg:w="32"/><text x="85.4387%" y="287.50"></text></g><g><title>iris_resource_create_for_image.constprop.0 (5 samples, 0.02%)</title><rect x="85.3482%" y="293" width="0.0235%" height="15" fill="rgb(239,212,28)" fg:x="18186" fg:w="5"/><text x="85.5982%" y="303.50"></text></g><g><title>iris_transfer_map (10 samples, 0.05%)</title><rect x="85.3717%" y="293" width="0.0469%" height="15" fill="rgb(220,20,13)" fg:x="18191" fg:w="10"/><text x="85.6217%" y="303.50"></text></g><g><title>tc_texture_map (4 samples, 0.02%)</title><rect x="85.4327%" y="293" width="0.0188%" height="15" fill="rgb(210,164,35)" fg:x="18204" fg:w="4"/><text x="85.6827%" y="303.50"></text></g><g><title>tc_texture_unmap (3 samples, 0.01%)</title><rect x="85.4515%" y="293" width="0.0141%" height="15" fill="rgb(248,109,41)" fg:x="18208" fg:w="3"/><text x="85.7015%" y="303.50"></text></g><g><title>SDL_UpdateTexture_REAL (121 samples, 0.57%)</title><rect x="84.9024%" y="389" width="0.5679%" height="15" fill="rgb(238,23,50)" fg:x="18091" fg:w="121"/><text x="85.1524%" y="399.50"></text></g><g><title>GL_UpdateTexture (121 samples, 0.57%)</title><rect x="84.9024%" y="373" width="0.5679%" height="15" fill="rgb(211,48,49)" fg:x="18091" fg:w="121"/><text x="85.1524%" y="383.50"></text></g><g><title>_mesa_TexSubImage2D (114 samples, 0.54%)</title><rect x="84.9352%" y="357" width="0.5350%" height="15" fill="rgb(223,36,21)" fg:x="18098" fg:w="114"/><text x="85.1852%" y="367.50"></text></g><g><title>texsubimage_err (114 samples, 0.54%)</title><rect x="84.9352%" y="341" width="0.5350%" height="15" fill="rgb(207,123,46)" fg:x="18098" fg:w="114"/><text x="85.1852%" y="351.50"></text></g><g><title>texture_sub_image (109 samples, 0.51%)</title><rect x="84.9587%" y="325" width="0.5115%" height="15" fill="rgb(240,218,32)" fg:x="18103" fg:w="109"/><text x="85.2087%" y="335.50"></text></g><g><title>st_TexSubImage (107 samples, 0.50%)</title><rect x="84.9681%" y="309" width="0.5022%" height="15" fill="rgb(252,5,43)" fg:x="18105" fg:w="107"/><text x="85.2181%" y="319.50"></text></g><g><title>SDL_free_REAL (3 samples, 0.01%)</title><rect x="85.4702%" y="389" width="0.0141%" height="15" fill="rgb(252,84,19)" fg:x="18212" fg:w="3"/><text x="85.7202%" y="399.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.03%)</title><rect x="85.4843%" y="373" width="0.0329%" height="15" fill="rgb(243,152,39)" fg:x="18215" fg:w="7"/><text x="85.7343%" y="383.50"></text></g><g><title>_int_malloc (4 samples, 0.02%)</title><rect x="85.4984%" y="357" width="0.0188%" height="15" fill="rgb(234,160,15)" fg:x="18218" fg:w="4"/><text x="85.7484%" y="367.50"></text></g><g><title>SDL_UpdateTexture_REAL (326 samples, 1.53%)</title><rect x="83.9919%" y="405" width="1.5299%" height="15" fill="rgb(237,34,20)" fg:x="17897" fg:w="326"/><text x="84.2419%" y="415.50"></text></g><g><title>SDL_malloc_REAL (8 samples, 0.04%)</title><rect x="85.4843%" y="389" width="0.0375%" height="15" fill="rgb(229,97,13)" fg:x="18215" fg:w="8"/><text x="85.7343%" y="399.50"></text></g><g><title>sdl2::render::Texture::update (328 samples, 1.54%)</title><rect x="83.9872%" y="437" width="1.5393%" height="15" fill="rgb(234,71,50)" fg:x="17896" fg:w="328"/><text x="84.2372%" y="447.50"></text></g><g><title>sdl2::render::InternalTexture::update (328 samples, 1.54%)</title><rect x="83.9872%" y="421" width="1.5393%" height="15" fill="rgb(253,155,4)" fg:x="17896" fg:w="328"/><text x="84.2372%" y="431.50"></text></g><g><title>_mesa_get_current_tex_object (4 samples, 0.02%)</title><rect x="85.6063%" y="309" width="0.0188%" height="15" fill="rgb(222,185,37)" fg:x="18241" fg:w="4"/><text x="85.8563%" y="319.50"></text></g><g><title>st_ChooseTextureFormat (15 samples, 0.07%)</title><rect x="85.6486%" y="309" width="0.0704%" height="15" fill="rgb(251,177,13)" fg:x="18250" fg:w="15"/><text x="85.8986%" y="319.50"></text></g><g><title>st_choose_format (13 samples, 0.06%)</title><rect x="85.6580%" y="293" width="0.0610%" height="15" fill="rgb(250,179,40)" fg:x="18252" fg:w="13"/><text x="85.9080%" y="303.50"></text></g><g><title>iris_is_format_supported (9 samples, 0.04%)</title><rect x="85.6767%" y="277" width="0.0422%" height="15" fill="rgb(242,44,2)" fg:x="18256" fg:w="9"/><text x="85.9267%" y="287.50"></text></g><g><title>isl_format_for_pipe_format (4 samples, 0.02%)</title><rect x="85.7002%" y="261" width="0.0188%" height="15" fill="rgb(216,177,13)" fg:x="18261" fg:w="4"/><text x="85.9502%" y="271.50"></text></g><g><title>__memset_avx2_unaligned_erms (3 samples, 0.01%)</title><rect x="85.7378%" y="229" width="0.0141%" height="15" fill="rgb(216,106,43)" fg:x="18269" fg:w="3"/><text x="85.9878%" y="239.50"></text></g><g><title>iris_alloc_resource (4 samples, 0.02%)</title><rect x="85.7518%" y="229" width="0.0188%" height="15" fill="rgb(216,183,2)" fg:x="18272" fg:w="4"/><text x="86.0018%" y="239.50"></text></g><g><title>iris_syncobj_destroy (7 samples, 0.03%)</title><rect x="85.8081%" y="149" width="0.0329%" height="15" fill="rgb(249,75,3)" fg:x="18284" fg:w="7"/><text x="86.0581%" y="159.50"></text></g><g><title>iris_bufmgr_get_fd (5 samples, 0.02%)</title><rect x="85.8175%" y="133" width="0.0235%" height="15" fill="rgb(219,67,39)" fg:x="18286" fg:w="5"/><text x="86.0675%" y="143.50"></text></g><g><title>iris_bo_alloc (17 samples, 0.08%)</title><rect x="85.7706%" y="229" width="0.0798%" height="15" fill="rgb(253,228,2)" fg:x="18276" fg:w="17"/><text x="86.0206%" y="239.50"></text></g><g><title>pb_slab_alloc_reclaimed (13 samples, 0.06%)</title><rect x="85.7894%" y="213" width="0.0610%" height="15" fill="rgb(235,138,27)" fg:x="18280" fg:w="13"/><text x="86.0394%" y="223.50"></text></g><g><title>pb_slabs_reclaim_locked (12 samples, 0.06%)</title><rect x="85.7941%" y="197" width="0.0563%" height="15" fill="rgb(236,97,51)" fg:x="18281" fg:w="12"/><text x="86.0441%" y="207.50"></text></g><g><title>iris_can_reclaim_slab (12 samples, 0.06%)</title><rect x="85.7941%" y="181" width="0.0563%" height="15" fill="rgb(240,80,30)" fg:x="18281" fg:w="12"/><text x="86.0441%" y="191.50"></text></g><g><title>iris_bo_wait_syncobj (11 samples, 0.05%)</title><rect x="85.7988%" y="165" width="0.0516%" height="15" fill="rgb(230,178,19)" fg:x="18282" fg:w="11"/><text x="86.0488%" y="175.50"></text></g><g><title>iris_bo_map (4 samples, 0.02%)</title><rect x="85.8504%" y="229" width="0.0188%" height="15" fill="rgb(210,190,27)" fg:x="18293" fg:w="4"/><text x="86.1004%" y="239.50"></text></g><g><title>isl_surf_get_ccs_surf (3 samples, 0.01%)</title><rect x="85.8739%" y="213" width="0.0141%" height="15" fill="rgb(222,107,31)" fg:x="18298" fg:w="3"/><text x="86.1239%" y="223.50"></text></g><g><title>isl_surf_init_s (3 samples, 0.01%)</title><rect x="85.8739%" y="197" width="0.0141%" height="15" fill="rgb(216,127,34)" fg:x="18298" fg:w="3"/><text x="86.1239%" y="207.50"></text></g><g><title>iris_resource_configure_aux (5 samples, 0.02%)</title><rect x="85.8692%" y="229" width="0.0235%" height="15" fill="rgb(234,116,52)" fg:x="18297" fg:w="5"/><text x="86.1192%" y="239.50"></text></g><g><title>iris_resource_configure_main (13 samples, 0.06%)</title><rect x="85.8926%" y="229" width="0.0610%" height="15" fill="rgb(222,124,15)" fg:x="18302" fg:w="13"/><text x="86.1426%" y="239.50"></text></g><g><title>isl_surf_init_s (8 samples, 0.04%)</title><rect x="85.9161%" y="213" width="0.0375%" height="15" fill="rgb(231,179,28)" fg:x="18307" fg:w="8"/><text x="86.1661%" y="223.50"></text></g><g><title>iris_resource_create_for_image.constprop.0 (48 samples, 0.23%)</title><rect x="85.7331%" y="245" width="0.2253%" height="15" fill="rgb(226,93,45)" fg:x="18268" fg:w="48"/><text x="85.9831%" y="255.50"></text></g><g><title>guess_and_alloc_texture (55 samples, 0.26%)</title><rect x="85.7190%" y="277" width="0.2581%" height="15" fill="rgb(215,8,51)" fg:x="18265" fg:w="55"/><text x="85.9690%" y="287.50"></text></g><g><title>st_texture_create (52 samples, 0.24%)</title><rect x="85.7331%" y="261" width="0.2440%" height="15" fill="rgb(223,106,5)" fg:x="18268" fg:w="52"/><text x="85.9831%" y="271.50"></text></g><g><title>u_transfer_helper_resource_create (4 samples, 0.02%)</title><rect x="85.9583%" y="245" width="0.0188%" height="15" fill="rgb(250,191,5)" fg:x="18316" fg:w="4"/><text x="86.2083%" y="255.50"></text></g><g><title>st_AllocTextureImageBuffer (57 samples, 0.27%)</title><rect x="85.7190%" y="293" width="0.2675%" height="15" fill="rgb(242,132,44)" fg:x="18265" fg:w="57"/><text x="85.9690%" y="303.50"></text></g><g><title>iris_alloc_resource (4 samples, 0.02%)</title><rect x="86.0287%" y="261" width="0.0188%" height="15" fill="rgb(251,152,29)" fg:x="18331" fg:w="4"/><text x="86.2787%" y="271.50"></text></g><g><title>iris_bo_alloc (4 samples, 0.02%)</title><rect x="86.0475%" y="261" width="0.0188%" height="15" fill="rgb(218,179,5)" fg:x="18335" fg:w="4"/><text x="86.2975%" y="271.50"></text></g><g><title>alloc_bo_from_cache (4 samples, 0.02%)</title><rect x="86.0475%" y="245" width="0.0188%" height="15" fill="rgb(227,67,19)" fg:x="18335" fg:w="4"/><text x="86.2975%" y="255.50"></text></g><g><title>iris_bo_busy (4 samples, 0.02%)</title><rect x="86.0475%" y="229" width="0.0188%" height="15" fill="rgb(233,119,31)" fg:x="18335" fg:w="4"/><text x="86.2975%" y="239.50"></text></g><g><title>iris_bo_wait_syncobj (3 samples, 0.01%)</title><rect x="86.0522%" y="213" width="0.0141%" height="15" fill="rgb(241,120,22)" fg:x="18336" fg:w="3"/><text x="86.3022%" y="223.50"></text></g><g><title>iris_resource_create_for_image.constprop.0 (13 samples, 0.06%)</title><rect x="86.0287%" y="277" width="0.0610%" height="15" fill="rgb(224,102,30)" fg:x="18331" fg:w="13"/><text x="86.2787%" y="287.50"></text></g><g><title>iris_resource_configure_main (5 samples, 0.02%)</title><rect x="86.0663%" y="261" width="0.0235%" height="15" fill="rgb(210,164,37)" fg:x="18339" fg:w="5"/><text x="86.3163%" y="271.50"></text></g><g><title>isl_surf_init_s (4 samples, 0.02%)</title><rect x="86.0710%" y="245" width="0.0188%" height="15" fill="rgb(226,191,16)" fg:x="18340" fg:w="4"/><text x="86.3210%" y="255.50"></text></g><g><title>pipe_resource_reference (3 samples, 0.01%)</title><rect x="86.0897%" y="277" width="0.0141%" height="15" fill="rgb(214,40,45)" fg:x="18344" fg:w="3"/><text x="86.3397%" y="287.50"></text></g><g><title>st_flush_bitmap_cache (3 samples, 0.01%)</title><rect x="86.1038%" y="277" width="0.0141%" height="15" fill="rgb(244,29,26)" fg:x="18347" fg:w="3"/><text x="86.3538%" y="287.50"></text></g><g><title>st_TexImage (86 samples, 0.40%)</title><rect x="85.7190%" y="309" width="0.4036%" height="15" fill="rgb(216,16,5)" fg:x="18265" fg:w="86"/><text x="85.9690%" y="319.50"></text></g><g><title>st_TexSubImage (29 samples, 0.14%)</title><rect x="85.9865%" y="293" width="0.1361%" height="15" fill="rgb(249,76,35)" fg:x="18322" fg:w="29"/><text x="86.2365%" y="303.50"></text></g><g><title>__strchrnul_avx2 (3 samples, 0.01%)</title><rect x="86.1507%" y="245" width="0.0141%" height="15" fill="rgb(207,11,44)" fg:x="18357" fg:w="3"/><text x="86.4007%" y="255.50"></text></g><g><title>___snprintf_chk (9 samples, 0.04%)</title><rect x="86.1273%" y="293" width="0.0422%" height="15" fill="rgb(228,190,49)" fg:x="18352" fg:w="9"/><text x="86.3773%" y="303.50"></text></g><g><title>__vsnprintf_internal (9 samples, 0.04%)</title><rect x="86.1273%" y="277" width="0.0422%" height="15" fill="rgb(214,173,12)" fg:x="18352" fg:w="9"/><text x="86.3773%" y="287.50"></text></g><g><title>__printf_buffer (9 samples, 0.04%)</title><rect x="86.1273%" y="261" width="0.0422%" height="15" fill="rgb(218,26,35)" fg:x="18352" fg:w="9"/><text x="86.3773%" y="271.50"></text></g><g><title>_mesa_error_check_format_and_type (3 samples, 0.01%)</title><rect x="86.1742%" y="293" width="0.0141%" height="15" fill="rgb(220,200,19)" fg:x="18362" fg:w="3"/><text x="86.4242%" y="303.50"></text></g><g><title>_mesa_is_compressed_format (3 samples, 0.01%)</title><rect x="86.1883%" y="293" width="0.0141%" height="15" fill="rgb(239,95,49)" fg:x="18365" fg:w="3"/><text x="86.4383%" y="303.50"></text></g><g><title>_mesa_max_texture_levels (3 samples, 0.01%)</title><rect x="86.2071%" y="293" width="0.0141%" height="15" fill="rgb(235,85,53)" fg:x="18369" fg:w="3"/><text x="86.4571%" y="303.50"></text></g><g><title>_mesa_TexImage2D (137 samples, 0.64%)</title><rect x="85.5970%" y="341" width="0.6430%" height="15" fill="rgb(233,133,31)" fg:x="18239" fg:w="137"/><text x="85.8470%" y="351.50"></text></g><g><title>teximage_err (137 samples, 0.64%)</title><rect x="85.5970%" y="325" width="0.6430%" height="15" fill="rgb(218,25,20)" fg:x="18239" fg:w="137"/><text x="85.8470%" y="335.50"></text></g><g><title>texture_error_check (24 samples, 0.11%)</title><rect x="86.1273%" y="309" width="0.1126%" height="15" fill="rgb(252,210,38)" fg:x="18352" fg:w="24"/><text x="86.3773%" y="319.50"></text></g><g><title>_mesa_TexParameteri (3 samples, 0.01%)</title><rect x="86.2399%" y="341" width="0.0141%" height="15" fill="rgb(242,134,21)" fg:x="18376" fg:w="3"/><text x="86.4899%" y="351.50"></text></g><g><title>_mesa_get_texobj_by_target_and_texunit (3 samples, 0.01%)</title><rect x="86.2399%" y="325" width="0.0141%" height="15" fill="rgb(213,28,48)" fg:x="18376" fg:w="3"/><text x="86.4899%" y="335.50"></text></g><g><title>_mesa_is_proxy_texture (3 samples, 0.01%)</title><rect x="86.2399%" y="309" width="0.0141%" height="15" fill="rgb(250,196,2)" fg:x="18376" fg:w="3"/><text x="86.4899%" y="319.50"></text></g><g><title>_mesa_texture_parameteri (5 samples, 0.02%)</title><rect x="86.2681%" y="341" width="0.0235%" height="15" fill="rgb(227,5,17)" fg:x="18382" fg:w="5"/><text x="86.5181%" y="351.50"></text></g><g><title>set_tex_parameteri (4 samples, 0.02%)</title><rect x="86.2728%" y="325" width="0.0188%" height="15" fill="rgb(221,226,24)" fg:x="18383" fg:w="4"/><text x="86.5228%" y="335.50"></text></g><g><title>_mesa_HashInsertLocked (6 samples, 0.03%)</title><rect x="86.2915%" y="325" width="0.0282%" height="15" fill="rgb(211,5,48)" fg:x="18387" fg:w="6"/><text x="86.5415%" y="335.50"></text></g><g><title>hash_table_search (4 samples, 0.02%)</title><rect x="86.3009%" y="309" width="0.0188%" height="15" fill="rgb(219,150,6)" fg:x="18389" fg:w="4"/><text x="86.5509%" y="319.50"></text></g><g><title>__calloc (3 samples, 0.01%)</title><rect x="86.3338%" y="309" width="0.0141%" height="15" fill="rgb(251,46,16)" fg:x="18396" fg:w="3"/><text x="86.5838%" y="319.50"></text></g><g><title>_int_malloc (3 samples, 0.01%)</title><rect x="86.3338%" y="293" width="0.0141%" height="15" fill="rgb(220,204,40)" fg:x="18396" fg:w="3"/><text x="86.5838%" y="303.50"></text></g><g><title>create_textures.part.0 (13 samples, 0.06%)</title><rect x="86.2915%" y="341" width="0.0610%" height="15" fill="rgb(211,85,2)" fg:x="18387" fg:w="13"/><text x="86.5415%" y="351.50"></text></g><g><title>_mesa_new_texture_object (7 samples, 0.03%)</title><rect x="86.3197%" y="325" width="0.0329%" height="15" fill="rgb(229,17,7)" fg:x="18393" fg:w="7"/><text x="86.5697%" y="335.50"></text></g><g><title>GL_CreateTexture (174 samples, 0.82%)</title><rect x="85.5500%" y="357" width="0.8166%" height="15" fill="rgb(239,72,28)" fg:x="18229" fg:w="174"/><text x="85.8000%" y="367.50"></text></g><g><title>enable_texture.isra.0 (3 samples, 0.01%)</title><rect x="86.3525%" y="341" width="0.0141%" height="15" fill="rgb(230,47,54)" fg:x="18400" fg:w="3"/><text x="86.6025%" y="351.50"></text></g><g><title>__GI_getenv (3 samples, 0.01%)</title><rect x="86.3713%" y="341" width="0.0141%" height="15" fill="rgb(214,50,8)" fg:x="18404" fg:w="3"/><text x="86.6213%" y="351.50"></text></g><g><title>SDL_GetHint_REAL (6 samples, 0.03%)</title><rect x="86.3666%" y="357" width="0.0282%" height="15" fill="rgb(216,198,43)" fg:x="18403" fg:w="6"/><text x="86.6166%" y="367.50"></text></g><g><title>SDL_CreateTexture_REAL (186 samples, 0.87%)</title><rect x="85.5406%" y="373" width="0.8729%" height="15" fill="rgb(234,20,35)" fg:x="18227" fg:w="186"/><text x="85.7906%" y="383.50"></text></g><g><title>SDL_calloc_REAL (4 samples, 0.02%)</title><rect x="86.3948%" y="357" width="0.0188%" height="15" fill="rgb(254,45,19)" fg:x="18409" fg:w="4"/><text x="86.6448%" y="367.50"></text></g><g><title>__calloc (4 samples, 0.02%)</title><rect x="86.3948%" y="341" width="0.0188%" height="15" fill="rgb(219,14,44)" fg:x="18409" fg:w="4"/><text x="86.6448%" y="351.50"></text></g><g><title>_int_malloc (4 samples, 0.02%)</title><rect x="86.3948%" y="325" width="0.0188%" height="15" fill="rgb(217,220,26)" fg:x="18409" fg:w="4"/><text x="86.6448%" y="335.50"></text></g><g><title>__GI_getenv (16 samples, 0.08%)</title><rect x="86.4276%" y="357" width="0.0751%" height="15" fill="rgb(213,158,28)" fg:x="18416" fg:w="16"/><text x="86.6776%" y="367.50"></text></g><g><title>__strncmp_avx2 (4 samples, 0.02%)</title><rect x="86.4839%" y="341" width="0.0188%" height="15" fill="rgb(252,51,52)" fg:x="18428" fg:w="4"/><text x="86.7339%" y="351.50"></text></g><g><title>SDL_GetHint_REAL (20 samples, 0.09%)</title><rect x="86.4136%" y="373" width="0.0939%" height="15" fill="rgb(246,89,16)" fg:x="18413" fg:w="20"/><text x="86.6636%" y="383.50"></text></g><g><title>__calloc (4 samples, 0.02%)</title><rect x="86.5121%" y="357" width="0.0188%" height="15" fill="rgb(216,158,49)" fg:x="18434" fg:w="4"/><text x="86.7621%" y="367.50"></text></g><g><title>_int_malloc (3 samples, 0.01%)</title><rect x="86.5168%" y="341" width="0.0141%" height="15" fill="rgb(236,107,19)" fg:x="18435" fg:w="3"/><text x="86.7668%" y="351.50"></text></g><g><title>gb_rs::graphics::Graphics::render (10,630 samples, 49.89%)</title><rect x="36.6576%" y="453" width="49.8874%" height="15" fill="rgb(228,185,30)" fg:x="7811" fg:w="10630"/><text x="36.9076%" y="463.50">gb_rs::graphics::Graphics::render</text></g><g><title>sdl2::render::TextureCreator&lt;T&gt;::create_texture_target (217 samples, 1.02%)</title><rect x="85.5266%" y="437" width="1.0184%" height="15" fill="rgb(246,134,8)" fg:x="18224" fg:w="217"/><text x="85.7766%" y="447.50"></text></g><g><title>sdl2::render::TextureCreator&lt;T&gt;::create_texture (217 samples, 1.02%)</title><rect x="85.5266%" y="421" width="1.0184%" height="15" fill="rgb(214,143,50)" fg:x="18224" fg:w="217"/><text x="85.7766%" y="431.50"></text></g><g><title>sdl2::render::ll_create_texture (216 samples, 1.01%)</title><rect x="85.5313%" y="405" width="1.0137%" height="15" fill="rgb(228,75,8)" fg:x="18225" fg:w="216"/><text x="85.7813%" y="415.50"></text></g><g><title>SDL_CreateTexture_REAL (215 samples, 1.01%)</title><rect x="85.5359%" y="389" width="1.0090%" height="15" fill="rgb(207,175,4)" fg:x="18226" fg:w="215"/><text x="85.7859%" y="399.50"></text></g><g><title>SDL_calloc_REAL (8 samples, 0.04%)</title><rect x="86.5074%" y="373" width="0.0375%" height="15" fill="rgb(205,108,24)" fg:x="18433" fg:w="8"/><text x="86.7574%" y="383.50"></text></g><g><title>__memset_avx2_unaligned_erms (3 samples, 0.01%)</title><rect x="86.5309%" y="357" width="0.0141%" height="15" fill="rgb(244,120,49)" fg:x="18438" fg:w="3"/><text x="86.7809%" y="367.50"></text></g><g><title>gb_rs::memory::Memory::read_byte (9 samples, 0.04%)</title><rect x="86.8922%" y="437" width="0.0422%" height="15" fill="rgb(223,47,38)" fg:x="18515" fg:w="9"/><text x="87.1422%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6 samples, 0.03%)</title><rect x="87.3334%" y="293" width="0.0282%" height="15" fill="rgb(229,179,11)" fg:x="18609" fg:w="6"/><text x="87.5834%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (28 samples, 0.13%)</title><rect x="87.2771%" y="309" width="0.1314%" height="15" fill="rgb(231,122,1)" fg:x="18597" fg:w="28"/><text x="87.5271%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (10 samples, 0.05%)</title><rect x="87.3616%" y="293" width="0.0469%" height="15" fill="rgb(245,119,9)" fg:x="18615" fg:w="10"/><text x="87.6116%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (56 samples, 0.26%)</title><rect x="87.5493%" y="293" width="0.2628%" height="15" fill="rgb(241,163,25)" fg:x="18655" fg:w="56"/><text x="87.7993%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (176 samples, 0.83%)</title><rect x="87.1128%" y="357" width="0.8260%" height="15" fill="rgb(217,214,3)" fg:x="18562" fg:w="176"/><text x="87.3628%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (176 samples, 0.83%)</title><rect x="87.1128%" y="341" width="0.8260%" height="15" fill="rgb(240,86,28)" fg:x="18562" fg:w="176"/><text x="87.3628%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (176 samples, 0.83%)</title><rect x="87.1128%" y="325" width="0.8260%" height="15" fill="rgb(215,47,9)" fg:x="18562" fg:w="176"/><text x="87.3628%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (113 samples, 0.53%)</title><rect x="87.4085%" y="309" width="0.5303%" height="15" fill="rgb(252,25,45)" fg:x="18625" fg:w="113"/><text x="87.6585%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (27 samples, 0.13%)</title><rect x="87.8121%" y="293" width="0.1267%" height="15" fill="rgb(251,164,9)" fg:x="18711" fg:w="27"/><text x="88.0621%" y="303.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (25 samples, 0.12%)</title><rect x="87.9388%" y="357" width="0.1173%" height="15" fill="rgb(233,194,0)" fg:x="18738" fg:w="25"/><text x="88.1888%" y="367.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (13 samples, 0.06%)</title><rect x="87.9951%" y="341" width="0.0610%" height="15" fill="rgb(249,111,24)" fg:x="18750" fg:w="13"/><text x="88.2451%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (13 samples, 0.06%)</title><rect x="87.9951%" y="325" width="0.0610%" height="15" fill="rgb(250,223,3)" fg:x="18750" fg:w="13"/><text x="88.2451%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (13 samples, 0.06%)</title><rect x="87.9951%" y="309" width="0.0610%" height="15" fill="rgb(236,178,37)" fg:x="18750" fg:w="13"/><text x="88.2451%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (304 samples, 1.43%)</title><rect x="87.0847%" y="389" width="1.4267%" height="15" fill="rgb(241,158,50)" fg:x="18556" fg:w="304"/><text x="87.3347%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (299 samples, 1.40%)</title><rect x="87.1081%" y="373" width="1.4032%" height="15" fill="rgb(213,121,41)" fg:x="18561" fg:w="299"/><text x="87.3581%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (97 samples, 0.46%)</title><rect x="88.0561%" y="357" width="0.4552%" height="15" fill="rgb(240,92,3)" fg:x="18763" fg:w="97"/><text x="88.3061%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (92 samples, 0.43%)</title><rect x="88.0796%" y="341" width="0.4318%" height="15" fill="rgb(205,123,3)" fg:x="18768" fg:w="92"/><text x="88.3296%" y="351.50"></text></g><g><title>core::hash::Hasher::write_u8 (92 samples, 0.43%)</title><rect x="88.0796%" y="325" width="0.4318%" height="15" fill="rgb(205,97,47)" fg:x="18768" fg:w="92"/><text x="88.3296%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (81 samples, 0.38%)</title><rect x="88.1312%" y="309" width="0.3801%" height="15" fill="rgb(247,152,14)" fg:x="18779" fg:w="81"/><text x="88.3812%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (81 samples, 0.38%)</title><rect x="88.1312%" y="293" width="0.3801%" height="15" fill="rgb(248,195,53)" fg:x="18779" fg:w="81"/><text x="88.3812%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (81 samples, 0.38%)</title><rect x="88.1312%" y="277" width="0.3801%" height="15" fill="rgb(226,201,16)" fg:x="18779" fg:w="81"/><text x="88.3812%" y="287.50"></text></g><g><title>core::hash::sip::u8to64_le (47 samples, 0.22%)</title><rect x="88.2908%" y="261" width="0.2206%" height="15" fill="rgb(205,98,0)" fg:x="18813" fg:w="47"/><text x="88.5408%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.10%)</title><rect x="88.5911%" y="341" width="0.0986%" height="15" fill="rgb(214,191,48)" fg:x="18877" fg:w="21"/><text x="88.8411%" y="351.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (20 samples, 0.09%)</title><rect x="88.5958%" y="325" width="0.0939%" height="15" fill="rgb(237,112,39)" fg:x="18878" fg:w="20"/><text x="88.8458%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (67 samples, 0.31%)</title><rect x="88.6897%" y="341" width="0.3144%" height="15" fill="rgb(247,203,27)" fg:x="18898" fg:w="67"/><text x="88.9397%" y="351.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (56 samples, 0.26%)</title><rect x="88.7413%" y="325" width="0.2628%" height="15" fill="rgb(235,124,28)" fg:x="18909" fg:w="56"/><text x="88.9913%" y="335.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (56 samples, 0.26%)</title><rect x="88.7413%" y="309" width="0.2628%" height="15" fill="rgb(208,207,46)" fg:x="18909" fg:w="56"/><text x="88.9913%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (56 samples, 0.26%)</title><rect x="88.7413%" y="293" width="0.2628%" height="15" fill="rgb(234,176,4)" fg:x="18909" fg:w="56"/><text x="88.9913%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u8&gt;::eq (56 samples, 0.26%)</title><rect x="88.7413%" y="277" width="0.2628%" height="15" fill="rgb(230,133,28)" fg:x="18909" fg:w="56"/><text x="88.9913%" y="287.50"></text></g><g><title>hashbrown::raw::h2 (28 samples, 0.13%)</title><rect x="89.0041%" y="341" width="0.1314%" height="15" fill="rgb(211,137,40)" fg:x="18965" fg:w="28"/><text x="89.2541%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (4 samples, 0.02%)</title><rect x="89.1355%" y="341" width="0.0188%" height="15" fill="rgb(254,35,13)" fg:x="18993" fg:w="4"/><text x="89.3855%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (4 samples, 0.02%)</title><rect x="89.1355%" y="325" width="0.0188%" height="15" fill="rgb(225,49,51)" fg:x="18993" fg:w="4"/><text x="89.3855%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.02%)</title><rect x="89.1355%" y="309" width="0.0188%" height="15" fill="rgb(251,10,15)" fg:x="18993" fg:w="4"/><text x="89.3855%" y="319.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (492 samples, 2.31%)</title><rect x="86.9439%" y="437" width="2.3090%" height="15" fill="rgb(228,207,15)" fg:x="18526" fg:w="492"/><text x="87.1939%" y="447.50">s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (492 samples, 2.31%)</title><rect x="86.9439%" y="421" width="2.3090%" height="15" fill="rgb(241,99,19)" fg:x="18526" fg:w="492"/><text x="87.1939%" y="431.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (492 samples, 2.31%)</title><rect x="86.9439%" y="405" width="2.3090%" height="15" fill="rgb(207,104,49)" fg:x="18526" fg:w="492"/><text x="87.1939%" y="415.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (158 samples, 0.74%)</title><rect x="88.5114%" y="389" width="0.7415%" height="15" fill="rgb(234,99,18)" fg:x="18860" fg:w="158"/><text x="88.7614%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (158 samples, 0.74%)</title><rect x="88.5114%" y="373" width="0.7415%" height="15" fill="rgb(213,191,49)" fg:x="18860" fg:w="158"/><text x="88.7614%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (158 samples, 0.74%)</title><rect x="88.5114%" y="357" width="0.7415%" height="15" fill="rgb(210,226,19)" fg:x="18860" fg:w="158"/><text x="88.7614%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (21 samples, 0.10%)</title><rect x="89.1543%" y="341" width="0.0986%" height="15" fill="rgb(229,97,18)" fg:x="18997" fg:w="21"/><text x="89.4043%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (21 samples, 0.10%)</title><rect x="89.1543%" y="325" width="0.0986%" height="15" fill="rgb(211,167,15)" fg:x="18997" fg:w="21"/><text x="89.4043%" y="335.50"></text></g><g><title>gb_rs::joypad::Joypad::update (578 samples, 2.71%)</title><rect x="86.5450%" y="453" width="2.7126%" height="15" fill="rgb(210,169,34)" fg:x="18441" fg:w="578"/><text x="86.7950%" y="463.50">gb..</text></g><g><title>sdl2::timer::&lt;impl sdl2::sdl::TimerSubsystem&gt;::delay (6 samples, 0.03%)</title><rect x="89.2576%" y="453" width="0.0282%" height="15" fill="rgb(241,121,31)" fg:x="19019" fg:w="6"/><text x="89.5076%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_default (6 samples, 0.03%)</title><rect x="89.7785%" y="405" width="0.0282%" height="15" fill="rgb(232,40,11)" fg:x="19130" fg:w="6"/><text x="90.0285%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::ok (31 samples, 0.15%)</title><rect x="89.8160%" y="373" width="0.1455%" height="15" fill="rgb(205,86,26)" fg:x="19138" fg:w="31"/><text x="90.0660%" y="383.50"></text></g><g><title>std::sys::unix::time::Timespec::now (27 samples, 0.13%)</title><rect x="89.9615%" y="373" width="0.1267%" height="15" fill="rgb(231,126,28)" fg:x="19169" fg:w="27"/><text x="90.2115%" y="383.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (27 samples, 0.13%)</title><rect x="89.9615%" y="357" width="0.1267%" height="15" fill="rgb(219,221,18)" fg:x="19169" fg:w="27"/><text x="90.2115%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (63 samples, 0.30%)</title><rect x="90.7593%" y="357" width="0.2957%" height="15" fill="rgb(211,40,0)" fg:x="19339" fg:w="63"/><text x="91.0093%" y="367.50"></text></g><g><title>core::cmp::PartialOrd::ge (63 samples, 0.30%)</title><rect x="90.7593%" y="341" width="0.2957%" height="15" fill="rgb(239,85,43)" fg:x="19339" fg:w="63"/><text x="91.0093%" y="351.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (7 samples, 0.03%)</title><rect x="91.0222%" y="325" width="0.0329%" height="15" fill="rgb(231,55,21)" fg:x="19395" fg:w="7"/><text x="91.2722%" y="335.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (363 samples, 1.70%)</title><rect x="89.7785%" y="437" width="1.7036%" height="15" fill="rgb(225,184,43)" fg:x="19130" fg:w="363"/><text x="90.0285%" y="447.50"></text></g><g><title>std::time::Instant::duration_since (363 samples, 1.70%)</title><rect x="89.7785%" y="421" width="1.7036%" height="15" fill="rgb(251,158,41)" fg:x="19130" fg:w="363"/><text x="90.0285%" y="431.50"></text></g><g><title>std::time::Instant::checked_duration_since (357 samples, 1.68%)</title><rect x="89.8066%" y="405" width="1.6754%" height="15" fill="rgb(234,159,37)" fg:x="19136" fg:w="357"/><text x="90.0566%" y="415.50"></text></g><g><title>std::sys::unix::time::Instant::checked_sub_instant (357 samples, 1.68%)</title><rect x="89.8066%" y="389" width="1.6754%" height="15" fill="rgb(216,204,22)" fg:x="19136" fg:w="357"/><text x="90.0566%" y="399.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (297 samples, 1.39%)</title><rect x="90.0882%" y="373" width="1.3938%" height="15" fill="rgb(214,17,3)" fg:x="19196" fg:w="297"/><text x="90.3382%" y="383.50"></text></g><g><title>core::time::Duration::new (91 samples, 0.43%)</title><rect x="91.0550%" y="357" width="0.4271%" height="15" fill="rgb(212,111,17)" fg:x="19402" fg:w="91"/><text x="91.3050%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_add (35 samples, 0.16%)</title><rect x="91.3178%" y="341" width="0.1643%" height="15" fill="rgb(221,157,24)" fg:x="19458" fg:w="35"/><text x="91.5678%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (35 samples, 0.16%)</title><rect x="91.3178%" y="325" width="0.1643%" height="15" fill="rgb(252,16,13)" fg:x="19458" fg:w="35"/><text x="91.5678%" y="335.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::convert::From&lt;libc::unix::timespec&gt;&gt;::from (3 samples, 0.01%)</title><rect x="91.7355%" y="389" width="0.0141%" height="15" fill="rgb(221,62,2)" fg:x="19547" fg:w="3"/><text x="91.9855%" y="399.50"></text></g><g><title>std::sys::unix::time::Timespec::new (3 samples, 0.01%)</title><rect x="91.7355%" y="373" width="0.0141%" height="15" fill="rgb(247,87,22)" fg:x="19547" fg:w="3"/><text x="91.9855%" y="383.50"></text></g><g><title>gb_rs::main (17,938 samples, 84.18%)</title><rect x="14.5720%" y="485" width="84.1843%" height="15" fill="rgb(215,73,9)" fg:x="3105" fg:w="17938"/><text x="14.8220%" y="495.50">gb_rs::main</text></g><g><title>gb_rs::gb::GameBoy::run (17,938 samples, 84.18%)</title><rect x="14.5720%" y="469" width="84.1843%" height="15" fill="rgb(207,175,33)" fg:x="3105" fg:w="17938"/><text x="14.8220%" y="479.50">gb_rs::gb::GameBoy::run</text></g><g><title>std::time::Instant::elapsed (2,018 samples, 9.47%)</title><rect x="89.2857%" y="453" width="9.4706%" height="15" fill="rgb(243,129,54)" fg:x="19025" fg:w="2018"/><text x="89.5357%" y="463.50">std::time::Ins..</text></g><g><title>std::time::Instant::now (1,550 samples, 7.27%)</title><rect x="91.4821%" y="437" width="7.2743%" height="15" fill="rgb(227,119,45)" fg:x="19493" fg:w="1550"/><text x="91.7321%" y="447.50">std::time:..</text></g><g><title>std::sys::unix::time::Instant::now (1,550 samples, 7.27%)</title><rect x="91.4821%" y="421" width="7.2743%" height="15" fill="rgb(205,109,36)" fg:x="19493" fg:w="1550"/><text x="91.7321%" y="431.50">std::sys::..</text></g><g><title>std::sys::unix::time::Timespec::now (1,545 samples, 7.25%)</title><rect x="91.5055%" y="405" width="7.2508%" height="15" fill="rgb(205,6,39)" fg:x="19498" fg:w="1545"/><text x="91.7555%" y="415.50">std::sys::..</text></g><g><title>__clock_gettime_2 (1,493 samples, 7.01%)</title><rect x="91.7496%" y="389" width="7.0068%" height="15" fill="rgb(221,32,16)" fg:x="19550" fg:w="1493"/><text x="91.9996%" y="399.50">__clock_g..</text></g><g><title>__vdso_clock_gettime (1,382 samples, 6.49%)</title><rect x="92.2705%" y="373" width="6.4858%" height="15" fill="rgb(228,144,50)" fg:x="19661" fg:w="1382"/><text x="92.5205%" y="383.50">__vdso_c..</text></g><g><title>[[vdso]] (973 samples, 4.57%)</title><rect x="94.1900%" y="357" width="4.5664%" height="15" fill="rgb(229,201,53)" fg:x="20070" fg:w="973"/><text x="94.4400%" y="367.50">[[vds..</text></g><g><title>gb_rs::memory::Memory::read_word (5 samples, 0.02%)</title><rect x="98.7563%" y="485" width="0.0235%" height="15" fill="rgb(249,153,27)" fg:x="21043" fg:w="5"/><text x="99.0063%" y="495.50"></text></g><g><title>gb_rs::memory::Memory::write_byte (39 samples, 0.18%)</title><rect x="98.7798%" y="485" width="0.1830%" height="15" fill="rgb(227,106,25)" fg:x="21048" fg:w="39"/><text x="99.0298%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (11 samples, 0.05%)</title><rect x="98.9628%" y="485" width="0.0516%" height="15" fill="rgb(230,65,29)" fg:x="21087" fg:w="11"/><text x="99.2128%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.03%)</title><rect x="99.0285%" y="437" width="0.0329%" height="15" fill="rgb(221,57,46)" fg:x="21101" fg:w="7"/><text x="99.2785%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (12 samples, 0.06%)</title><rect x="99.0145%" y="485" width="0.0563%" height="15" fill="rgb(229,161,17)" fg:x="21098" fg:w="12"/><text x="99.2645%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (9 samples, 0.04%)</title><rect x="99.0285%" y="469" width="0.0422%" height="15" fill="rgb(222,213,11)" fg:x="21101" fg:w="9"/><text x="99.2785%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (9 samples, 0.04%)</title><rect x="99.0285%" y="453" width="0.0422%" height="15" fill="rgb(235,35,13)" fg:x="21101" fg:w="9"/><text x="99.2785%" y="463.50"></text></g><g><title>st_TexImage (4 samples, 0.02%)</title><rect x="99.1552%" y="485" width="0.0188%" height="15" fill="rgb(233,158,34)" fg:x="21128" fg:w="4"/><text x="99.4052%" y="495.50"></text></g><g><title>st_TexSubImage (5 samples, 0.02%)</title><rect x="99.1740%" y="485" width="0.0235%" height="15" fill="rgb(215,151,48)" fg:x="21132" fg:w="5"/><text x="99.4240%" y="495.50"></text></g><g><title>std::sys::unix::time::Timespec::now (5 samples, 0.02%)</title><rect x="99.2116%" y="485" width="0.0235%" height="15" fill="rgb(229,84,14)" fg:x="21140" fg:w="5"/><text x="99.4616%" y="495.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (23 samples, 0.11%)</title><rect x="99.2350%" y="485" width="0.1079%" height="15" fill="rgb(229,68,14)" fg:x="21145" fg:w="23"/><text x="99.4850%" y="495.50"></text></g><g><title>std::time::Instant::elapsed (42 samples, 0.20%)</title><rect x="99.3430%" y="485" width="0.1971%" height="15" fill="rgb(243,106,26)" fg:x="21168" fg:w="42"/><text x="99.5930%" y="495.50"></text></g><g><title>tc_batch_execute (4 samples, 0.02%)</title><rect x="99.5448%" y="485" width="0.0188%" height="15" fill="rgb(206,45,38)" fg:x="21211" fg:w="4"/><text x="99.7948%" y="495.50"></text></g><g><title>[unknown] (19,638 samples, 92.16%)</title><rect x="7.4808%" y="501" width="92.1626%" height="15" fill="rgb(226,6,15)" fg:x="1594" fg:w="19638"/><text x="7.7308%" y="511.50">[unknown]</text></g><g><title>__clock_gettime_2 (12 samples, 0.06%)</title><rect x="99.6480%" y="501" width="0.0563%" height="15" fill="rgb(232,22,54)" fg:x="21233" fg:w="12"/><text x="99.8980%" y="511.50"></text></g><g><title>__clone3 (7 samples, 0.03%)</title><rect x="99.7043%" y="501" width="0.0329%" height="15" fill="rgb(229,222,32)" fg:x="21245" fg:w="7"/><text x="99.9543%" y="511.50"></text></g><g><title>_start (7 samples, 0.03%)</title><rect x="99.7466%" y="501" width="0.0329%" height="15" fill="rgb(228,62,29)" fg:x="21254" fg:w="7"/><text x="99.9966%" y="511.50"></text></g><g><title>gb_rs::cpu::CPU::display_registers (5 samples, 0.02%)</title><rect x="99.7794%" y="501" width="0.0235%" height="15" fill="rgb(251,103,34)" fg:x="21261" fg:w="5"/><text x="100.0294%" y="511.50"></text></g><g><title>gb_rs::memory::Memory::write_byte (6 samples, 0.03%)</title><rect x="99.8029%" y="501" width="0.0282%" height="15" fill="rgb(233,12,30)" fg:x="21266" fg:w="6"/><text x="100.0529%" y="511.50"></text></g><g><title>glPixelStorei (3 samples, 0.01%)</title><rect x="99.8733%" y="501" width="0.0141%" height="15" fill="rgb(238,52,0)" fg:x="21281" fg:w="3"/><text x="100.1233%" y="511.50"></text></g><g><title>all (21,308 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(223,98,5)" fg:x="0" fg:w="21308"/><text x="0.2500%" y="543.50"></text></g><g><title>gb-rs (21,303 samples, 99.98%)</title><rect x="0.0235%" y="517" width="99.9765%" height="15" fill="rgb(228,75,37)" fg:x="5" fg:w="21303"/><text x="0.2735%" y="527.50">gb-rs</text></g></svg></svg>